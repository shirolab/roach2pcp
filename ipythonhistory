 1/1: run index.py
 1/2: run index.py
 1/3: run index.py
 1/4: q
 1/5: run index.py
 2/1: run index.py
 2/2: import qtconsole
 3/1: cd KID_lab/
 3/2: LS
 3/3: ls
 3/4: run index.py
 4/1: import qtconsole
 4/2: qtconsole.__version__
 5/1: qtconsole.__version__
 5/2: import qtconsole
 5/3: qtconsole.__version__
 5/4: run index.py
 5/5: pwd
 5/6: cd KID_lab/
 5/7: run index.py
 5/8: QUIT
 6/1: run index.py
 6/2: cd KID_lab/
 6/3: run index.py
 6/4: run index.py
 6/5: run index.py
 6/6: run index.py
 6/7: run index.py
 6/8: run index.py
 7/1: run index.py
 7/2: cd KID_lab/
 7/3: run index.py
 7/4: import casperfpga
 7/5: run index.py
 7/6: run index.py
 7/7: QUIT
 9/1: run index.py
10/1: run index.py
11/1: run index.py
11/2: run index.py
12/1: run index.py
13/1: run index.py
13/2: run index.py
15/1: cd ./
15/2: cd
15/3: pwd
16/1: run getData.py
16/2: data
16/3: data
16/4: run getData.py
16/5: run getData.py
16/6: run getData.py
16/7: run getData.py
16/8: run getData.py
16/9: data
16/10: data.shape
16/11: run getData.py
16/12: len(data)
16/13: run getData.py
16/14: I.shape()
16/15: I.shape
17/1: run getData.py
17/2: run getData.py
17/3: run getData.py
17/4: run getData.py
17/5: run getData.py
17/6: run getData.py
17/7: run getData.py
17/8: run getData.py
17/9: run getData.py
17/10: run getData.py
18/1: run getData.py
18/2: data.shape
18/3: meas_name
18/4: data
18/5: path
18/6: filename
18/7: Nchan
18/8: channels
18/9: data = np.load.load(path +filename)
18/10: import numpy as np
18/11: data = np.load.load(path +filename)
18/12: data = np.load(path +filename)
19/1: run plotdata.py
19/2: run plotdata.py
19/3: run plotdata.py
19/4: run plotdata.py
19/5: cd 1538560148-Oct-03-2018-10-49-08.dir/
19/6: g = np.load('bb_freqs.npy')
19/7: g
20/1: %run plotdata.py
20/2: %run plotdata.py
20/3: plt.loglog(FREQS_full[0],PSD_full[0])
20/4: plt.show()
20/5: plt.plot(FREQS_full[1],PSD_full[1])
20/6: plt.show()
20/7: plt.figure()
20/8: plt.plot(FREQS_full[1],PSD_full[1])
20/9: plt.grid(True)
20/10: plt.show()
22/1: %run plotdata.py
22/2: %run plotdata.py
22/3: %run plotdata.py
22/4: %run plotdata.py
22/5: plt.plot(FREQS_full[1],PSD_full[1])
22/6: plt.show()
22/7: %run plotdata.py
22/8: %run plotdata.py
22/9: %run plotdata.py
22/10: %run plotdata.py
23/1: %run plotdata.py
23/2: PSD_full[0]
23/3: plt.figure(1)
23/4: plt.plot(FREQS_full[1],PSD_full[1])
23/5: plt.show()
23/6: plt.plot(FREQS_full[1][-3:],PSD_full[1][-3:])
23/7: plt.show()
23/8: plt.plot(FREQS_full[1][-3:],PSD_full[1][3:])
23/9: plt.plot(FREQS_full[1][3:],PSD_full[1][3:])
23/10: plt.show()
23/11: plt.show()
23/12: plt.plot(FREQS_full[1][3:],PSD_full[1][3:])
23/13: plt.show()
23/14: %run plotdata.py
24/1: %run plotdata.py
24/2: %run plotdata.py
25/1: %run plotdata.py
25/2: %run plotdata.py
25/3: %run plotdata.py
25/4: %run plotdata.py
25/5: %run plotdata.py
25/6: %run plotdata.py
25/7: %run plotdata.py#
25/8: %run plotdata.py#
25/9: %run plotdata.py#
25/10: %run plotdata.py
25/11: Navg
25/12: %run plotdata.py
25/13: %run getData.py
25/14: %run getData.py
25/15: %run getData.py
25/16: %run getData.py
25/17: %run getData.py
25/18: %run getData.py
25/19: %run getData.py
25/20: %run getData.py
25/21: %run getData.py
25/22: %run getData.py
25/23: %run getData.py
25/24: %run getData.py
25/25: %run getData.py
25/26: %run getData.py
25/27: %run getData.py
25/28: %run getData.py
25/29: %run getData.py
25/30: %run getData.py
25/31: %run getData.py
25/32: %run getData.py
25/33: %run getData.py
25/34: %run getData.py
25/35: %run plotdata.py
25/36: %run plotdata.py
26/1: %run plotdata.py
26/2: %run plotdata.py
26/3: %run plotdata.py
26/4: %run plotdata.py
26/5: %run plotdata.py
26/6: bb_freqs
26/7: plt.figure
26/8:
for i in range(len(bb_freqs)):
    plt.axvline(x=bb_freqs[i])
26/9: plt.show()
26/10: new_targs
26/11: new_targs - 973.852e6
26/12: f=new_targs - 973.852e6
26/13: f=new_targs-973.852e6
26/14: f=new_targs-
26/15: f=new_targs-
26/16: f=new_targs-1
26/17: type(new_targs)
26/18: f=np.array(new_targs)-973.852e6
26/19: f
26/20: clear
26/21: %run plotdata.py
26/22: Is[:,0]
26/23: i[:,0]
26/24: i[:,0]
26/25: %run plotdata.py
26/26: %run plotdata.py
26/27: Is[:,0]
26/28: i[:,0]
26/29: np.diff(i[:,0])
26/30: i[:,0]np.diff(Is[:,chan])/np.diff(chan_freqs[chan])
26/31: np.diff(Is[:,chan])/np.diff(chan_freqs[chan])
26/32: np.diff(i[:,chan])/np.diff(chan_freqs[chan])
26/33: chan = 0
26/34: np.diff(i[:,chan])/np.diff(chan_freqs[chan])
26/35: di_df = np.diff(i[:,chan])/np.diff(chan_freqs[chan])
26/36: dq_df = np.diff(q[:,chan])/np.diff(chan_freqs[chan])
26/37: np.sqrt(di_df**2 + dq_df**2)
26/38: %run plotdata.py
26/39: %run plotdata.py
27/1: %run plotdata.py
27/2: %run plotdata.py
27/3: %run plotdata.py
27/4: %run plotdata.py
27/5: %run plotdata.py
27/6: %run plotdata.py
27/7: %run plotdata.py
27/8: %run plotdata.py
27/9: %run plotdata.py
27/10: %run plotdata.py
28/1: %run plotdata.py
28/2: %run plotdata.py
28/3: %run plotdata.py
28/4: %run plotdata.py
28/5: %run plotdata.py
28/6: %run plotdata.py
28/7: %run plotdata.py
28/8: %run plotdata.py
28/9: %run plotdata.py
28/10: %run plotdata.py
28/11: %run plotdata.py
28/12: %run plotdata.py
28/13: %run plotdata.py
28/14: %run plotdata.py
28/15: Is
28/16: i
28/17: i.shape
28/18: mags
28/19: mag
28/20: chan_freqs#
28/21: chan_freqs.shape()
28/22: chan_freqs.shape
28/23: chan_freqs.shape
28/24: %run plotdata.py
28/25: %run plotdata.py
28/26: %run plotdata.py
28/27: %run plotdata.py
28/28: %run plotdata.py
28/29: cd
28/30: cd Documents/amber_meas_051018/
28/31: pwd
28/32: %run getData.py#
28/33: ls
28/34: %run getData.py
28/35: %run getData.py
28/36: %run plotdata.py
28/37: %run plotdata.py
28/38: %run plotdata.py
28/39: %run plotdata.py
28/40: %run plotdata.py
28/41: %run plotdata.py
28/42: %run plotdata.py
28/43: %run plotdata.py
28/44: %run plotdata.py
28/45: %run plotdata.py
28/46: %run plotdata.py
28/47: plt.figure()
28/48: plt.plot(FREQS_full[0][3:],PSD_avg[1][3:])
28/49: plot.show()
28/50: plt.show()
28/51: %run plotdata.py
28/52: %run plotdata.py
28/53: %run plotdata.py
28/54: %run plotdata.py
28/55: %run plotdata.py
28/56: %run plotdata.py
28/57: %run plotdata.py
28/58: %run plotdata.py
28/59: %run plotdata.py
28/60: %run plotdata.py
28/61: %run plotdata.py
28/62: %run plotdata.py
28/63: %run plotdata.py
28/64: %run plotdata.py
29/1: %run plotdata.py
29/2: plt.figure()
29/3: plt.plot(FREQS_full[1],PSD_full[1])
29/4: plt.show()
29/5: plt.show()
29/6: plt.plot(FREQS_full[1],PSD_full[1])
29/7: plt.show()
29/8: PSD_full[1].shape
29/9: plt.plot(FREQS_full[0],PSD_full[0])
29/10: plt.show()
29/11: plt.plot(FREQS_full[1],PSD_full[1])
29/12: plt.show()
29/13: plt.plot(FREQS_full[36],PSD_full[36])
29/14: plt.show()
29/15: M = PSD_full[36] + PSD_full[1] + PSD_full[72]
29/16: M= M/3
30/1: QUIT
31/1: %run plotdata.py
31/2: M = PSD_full[36] + PSD_full[1] + PSD_full[72]
31/3: %run plotdata.py
31/4: %run plotdata.py
31/5: M = PSD_full[36] + PSD_full[1] + PSD_full[71]
31/6: M= M/3
31/7: plt.plot(FREQS_full[36],M)
31/8: plt.show()
31/9: M = PSD_full[36] + PSD_full[1]
31/10: M= M/2
31/11: plt.plot(FREQS_full[36],M)
31/12: plt.show()
31/13: plt.plot(FREQS_full[0],PSD_full[0])
31/14: plt.show()
31/15: plt.plot(FREQS_full[0],PSD_full[0])
31/16: plt.plot(FREQS_full[1],PSD_full[1])
31/17: plt.show()
32/1: %run plotdata.py
32/2: plt.plot(FREQS_full[1],PSD_full[1])
32/3: plt.show()
32/4: plt.plot(FREQS_full[36],PSD_full[36])
32/5: plt.show()
32/6: plt.plot(FREQS_full[36],PSD_full[36])
32/7: plt.plot(FREQS_full[1],PSD_full[1])
32/8: plt.show()
32/9: plt.plot(FREQS_full[1],PSD_full[1])
32/10: plt.show()
32/11: plt.plot(FREQS_full[1],PSD_full[1])
32/12: plt.plot(FREQS_full[0],PSD_full[0])
32/13: plt.show()
32/14: pwd
32/15: %run getData.py
32/16: %run plotdata.py
32/17: %run plotdata.py
32/18: %run plotdata.py
33/1: %run plotdata.py
33/2: plt.figure(chan_freqs[0],i[0])
33/3: plt.figure(chan_freqs[0],i[0,:])
33/4: plt.figure(chan_freqs[0],i[:,0])
33/5: i.shape
33/6: chan_freqs.shape
33/7: chan_freqs[0]
33/8: i[:,0]
33/9: i[:,0].shape
33/10: chan_freqs[0].shape
33/11: plt.figure(1)
33/12: plt.plot(chan_freqs[0],i[:,0])
33/13: plt.show()
33/14: plt.plot(chan_freqs[1],i[:,1])
33/15: plt.show()
33/16: plt.plot(i[:,1],q[:,1])
33/17: plt.show()
33/18: plt.plot(i[:,1],q[:,1])
33/19: i_aux = np.load(full_path + 'I_' + str(chan) + '.npy')
33/20: i_aux = np.load(full_path + 'I_' + str(1) + '.npy')
33/21: q_aux = np.load(full_path + 'Q_' + str(1) + '.npy')
33/22: plt.plot(i_aux,q_aux,',')
33/23: plt.show()
33/24: plt.plot(chan_freqs[1],i[:,1])
33/25: plt.show()
33/26: plt.plot(chan_freqs[1],np.sqrt(i[:,1]+q[:,1]))
33/27: plt.show()
33/28: plt.plot(chan_freqs[1],np.sqrt(i[:,1]**2+q[:,1]**2))
33/29: plt.show()
34/1: run roach_interface.py
34/2: service --status-all
34/3: import os
34/4: cwd = os.getcwd()
34/5: cwd
34/6: message = "GET_PID:HOLA"
34/7: message.split(":")[0]
34/8: message = "GET_PID:HOLA:si"
34/9: message.split(":")[0]
34/10: message.split(":")[1]
35/1: run plotdata.py
35/2: run plotdata.py
35/3: run plotdata.py
35/4: run plotdata.py
35/5: run plotdata.py
35/6: run plotdata.py
35/7: run plotdata.py
35/8: run plotdata.py
35/9: run plotdata.py
35/10: run plotdata.py
35/11: pwd
35/12: cd /media/muscat/DA481013480FED57/amber_meas_051018/
35/13: run plotdata.py
35/14:   pwd
35/15: pwd
37/1: run roach_interface.py
37/2: pwd
37/3: run roach_interface.py
37/4: from .configuration import ROOTDIR, filesys_config, roach_config
37/5: from .configuration import filesys_config, roach_config
37/6: from . import package
34/11: [wd
34/12: pwd
34/13: cd
34/14: cd MUSCAT/multitone/pcp/
34/15: ls
34/16: run roach_interface.py
34/17: from configuration import *
34/18: pip install pyyaml
34/19: pip install pyyaml
34/20: from configuration import *
34/21: from configuration import *
38/1: from configuration import *
38/2: ROOTDIR
38/3: from .configuration import *
38/4: from configuration import ROOTDIR, filesys_config, roach_config, network_config, hardware_config, general_config
38/5: roach_config
39/1: run roach_interface.py
39/2: run roach_interface.py
39/3: run roach_interface.py
40/1: run roach_interface.py
40/2: run roach_interface.py
41/1: run roach_interface.py
41/2: run roach_interface.py
41/3: wuit
42/1: run roach_interface.py
42/2: run roach_interface.py
42/3: run roach_interface.py
42/4: cd lib/
42/5: run lib_dirfiles.py
42/6: ROOTDIR
42/7: ri = roachInterface("dummyroach")
42/8: ri.initialse_hardware()
42/9: ri.input_atten()
42/10: ri.input_atten
42/11: ri.ROACH_CFG
42/12: SYNTHS_IN_USE
42/13: SYNTHS_IN_USE[synthid_lo].synthobj()
42/14: SYNTHS_IN_USE["testsynth"].synthobj()
42/15: SYNTHS_IN_USE["testsynth"]
42/16: ri.initialse_hardware()
42/17: run datalog_mp.py
42/18: pwd
42/19: cd ..
42/20: run datalog_mp.py
42/21: run datalog_mp.py
42/22: run datalog_mp.py
42/23: ls
42/24: datalog = dataLogger("dummyroach")
42/25: datalog.logger
42/26: datalog.process_name
42/27: datalog.network_config
42/28: datalog._ctrlevent
42/29: datalog._initialise_data_logger_process("dummytest")
42/30: datalog.process()
42/31: datalog.process
42/32: datalog.start_daemon
42/33: datalog.process.is_alive
42/34: datalog.is_daemon_running
42/35: datalog._initialise_data_logger_process("dummytest")
42/36: datalog.is_daemon_running
42/37: datalog._initialise_network_config("dummyroach")
42/38: datalog._initialise_writer_thread("dummyroach")
42/39: datalog.print_status
42/40: datalog.print_status()
42/41: datalog._initialise_writer_thread("dummyroach")
42/42: datalog._initialise_data_logger_process("dummytest")
42/43: datalog.print_status()
42/44: datalog.is_writer_thread_running()
42/45: datalog.process_name
42/46: datalog.process
42/47: datalog.start_daemon()
42/48: datalog._initialise_data_logger_process("dummytest")
42/49: datalog.print_status()
42/50: datalog.is_daemon_running
42/51: datalog._initialise_writer_thread
42/52: datalog._initialise_writer_thread("dummyroach")
42/53: datalog.process.pid
42/54: datalog.process.pid
42/55: datalog.process.pid
42/56: da
42/57: datalog.is_daemon_running
42/58: datalog.is_daemon_running()
42/59: datalog.start_daemon()
42/60: datalog.start_daemon()
42/61: datalog.is_daemon_running()
42/62: datalog.is_daemon_running()
42/63: datalog.is_writer_thread_running()
42/64: data.termin()
42/65: data
42/66: datalog.terminate()
42/67: datalog = dataLogger("dummyroach")
42/68: datalog.start_daemon()
42/69: datalog.pid
42/70: datalog.process.pid
42/71: datalog.print_status()
42/72: datalog.terminate()
42/73: datalog.current_dirfile
42/74: datalog.set_active_dirfile?
42/75: pwd
42/76: datalog.set_active_dirfile('test_dirfile')
42/77: import pcp
42/78: pwd
42/79: cd ..
42/80: import pcp
42/81: pcp.configuration.roach_config
42/82: reload(pcp)
42/83: reload(pcp.lib)
42/84: from pcp import datalog_mp
42/85: import pcp
42/86: pcp.configuration
42/87: reload(pcp.lib)
42/88: reload(pcp.lib)
42/89: reload(pcp)
42/90: from pcp import datalog_mp
43/1: cd
43/2: cd MUSCAT/multitone/
43/3: ls
43/4: cd pcp/
43/5: cd ..
43/6: import pcp
43/7: ri = roachInterface("dummyroach")
43/8: ri = pcp.roachInterface("dummyroach")
43/9: import pcp
43/10: pcp = pcp()
43/11: pcp = roachInterface("dummyroach")
43/12: from pcp import roach_interface
43/13: ri = roachInterface()
43/14: ri = roach_interface("dummytest")
43/15: ri = roach_interface.roachInterface("dummytest")
43/16: ri = roach_interface.roachInterface("dummyroach")
43/17: ri._initialise_fpga("dummyroach")
43/18: import casperfpga
43/19: ri._initialise_fpga("dummyroach")
43/20: casperfpga --version
43/21: casperfpga --
43/22: casperfpga -v
43/23: casperfpga
44/1: cd ./
45/1: cd ./
46/1: import casperfpga
46/2: print casperfpga.__version__
46/3: import casperfpga
47/1: import casperfpga
47/2: import casperfpga
47/3: import casperfpga
48/1: import casperfpga
48/2: import casperfpga
48/3: print casperfpga.__version__
49/1: cd ./
50/1: cd ./
51/1: cd ./
52/1: cd ./
48/4: print casperfpga.__version__
53/1: cd ./
54/1: cd ./
55/1: cd ./
56/1: cd ./
57/1: cd ./
58/1: cd ./
59/1: cd ./
60/1: cd ./
60/2: ls
61/1:
path = "/home/muscat/Documents/VNA_meas/meas_121018/INAOE_FASS_1/20181012_Dark_Data_Prelim"

dataRedtn = dataRed()

sweep = []

vnaPath = path + "/VNA_Sweeps/"
files = os.listdir(vnaPath)
61/2:
import os

import numpy as np
import matplotlib.pyplot as plt

from dataRed import dataRed
from detector_peaks import detect_peaks
from scipy import signal
from scipy.signal import savgol_filter
61/3:
path = "/home/muscat/Documents/VNA_meas/meas_121018/INAOE_FASS_1/20181012_Dark_Data_Prelim"

dataRedtn = dataRed()

sweep = []

vnaPath = path + "/VNA_Sweeps/"
files = os.listdir(vnaPath)
61/4:
    name = ""
    for l in file:
        if l == "_":
            name = name + ","
        else:
            name = name + l
61/5:
name = ""
for l in file:
    if l == "_":
        name = name + ","
    else:
        name = name + l
61/6: name = ""
61/7:
for l in file:
    if l=="_":
        name = name + ","
    else:
        name = name + l
61/8: files
61/9:
for l in files[0]:
    if l=="_":
        name = name + ","
    else:
        name = name + l
61/10: name
61/11: freq, mag = dataRedtn.get_full_vna(str(vnaPath + file))
61/12: freq, mag = dataRedtn.get_full_vna(str(vnaPath + file[0]))
61/13: file[0]
61/14: files
61/15: freq, mag = dataRedtn.get_full_vna(str(vnaPath + files[0]))
61/16: freq
61/17: mag
61/18: plt.figure()
61/19: plt.plot(freq,mag)
61/20: plt.show()
61/21: base = savgol_filter(mag, 50001,3)
61/22: plt.show(freq,base)
61/23: plt.plot(freq,base)
61/24: plt.show(freq,base)
61/25: plt.show()
61/26: plt.plot(freq,mag)
61/27: plt.plot(freq,base)
61/28: plt.show()
61/29: plt.plot(freq,mag - base + 1)
61/30: plt.show()
61/31: mag_WBL = mag - base + 1
61/32:     mph = np.min(mag)mpd = 0.5*(freq[-1] - freq[0])/(len(freq))
61/33: mph = np.min(mag)
61/34: mpd = 0.5*(freq[-1] - freq[0])/(len(freq))
61/35: mph
61/36: mpd
61/37: ind = detect_peaks(signal.detrend(mag_wBL),valley=True,mph=mph,mpd=mpd)
61/38: ind = detect_peaks(signal.detrend(mag_WBL),valley=True,mph=mph,mpd=mpd)
61/39: ind
61/40:
for i in ind:
    plt.axvline(freq[i],color='r',linewidth=0.75)
    plt.plot(freq[i],mag[i],'bo')
61/41: plt.show()
61/42: len(ind)
61/43:
for i in ind:
    plt.axvline(freq[i],color='r',linewidth=0.75)
61/44: plt.plot(freq,mag - base + 1)
61/45: plt.show()
61/46: run vnaAnalyser.py
61/47: run vnaAnalyser.py
61/48: mpd
61/49: mpd
61/50: run vnaAnalyser.py
61/51: run vnaAnalyser.py
61/52: freq
61/53: mag_WBL
61/54: ls
61/55: mpd
61/56: mph
61/57: mph
61/58: run vnaAnalyser.py
61/59: mph
61/60: ind
61/61: plt.plot(np.diff(mag_wBL)/np.diff(freq))
61/62: plt.show()
61/63: run vnaAnalyser.py
61/64: run vnaAnalyser.py
61/65: run vnaAnalyser.py
61/66: mph
61/67: run vnaAnalyser.py
61/68: run vnaAnalyser.py
61/69: run vnaAnalyser.py
61/70: run vnaAnalyser.py
61/71: run vnaAnalyser.py
61/72: run vnaAnalyser.py
61/73: run vnaAnalyser.py
61/74: run vnaAnalyser.py
61/75: run vnaAnalyser.py
61/76: run vnaAnalyser.py
61/77: run vnaAnalyser.py
61/78: run vnaAnalyser.py
61/79: run vnaAnalyser.py
61/80: mph
61/81: mph
61/82: run vnaAnalyser.py
61/83: run vnaAnalyser.py
61/84: run vnaAnalyser.py
61/85: run vnaAnalyser.py
61/86: run vnaAnalyser.py
61/87: run vnaAnalyser.py
61/88: run vnaAnalyser.py
61/89: run vnaAnalyser.py
61/90: run vnaAnalyser.py
61/91: run vnaAnalyser.py
61/92: run vnaAnalyser.py
61/93: run vnaAnalyser.py
61/94: run vnaAnalyser.py
61/95: run vnaAnalyser.py
61/96: run vnaAnalyser.py
61/97: run vnaAnalyser.py
61/98: run vnaAnalyser.py
61/99: run vnaAnalyser.py
61/100: run vnaAnalyser.py
62/1: path = "/home/muscat/Documents/KID_Analyser/README.md"#
62/2: path[-1]
61/101: mph
63/1: import matplotlib.pyplot as plt
63/2: plt.ion()
63/3: f=plt.figure(1)
63/4: f
63/5: f.axes()
63/6: plt.gcf()
63/7: plt.gcf()
63/8: ax = f.add_subplot(111)
63/9: plt.gca()
63/10: axes = plt.gca()
63/11: print axes
63/12: print axes
63/13: axes.get_window_extent()
63/14: axes.get_window_extent()
63/15: axes.get_ylim()
63/16: axes.get_xlim()
63/17: axes.get_ylim()
63/18: a = axes.get_ylim()
63/19: a[0]
65/1: z=np.array([1,3.5,2.2,4,7,8])
65/2: import numpy as np
65/3: z=np.array([1,3.5,2.2,4,7,8])
65/4: z
65/5: np.where(z=="3")
65/6: np.where(z==3)
65/7: np.where(z==3.5)
65/8: np.where(z==7)
65/9: 7 in z
65/10:
if not 7 in z:
    print "Si"
else:
    print "No"
65/11:
if 7 in z:
    print "Si"
else:
    print "No"
66/1: a=[2,3,4]
66/2: b=[1,2,3]
66/3: c=[2,3,4]
66/4: a==b
66/5: a==c
67/1: import numpy as np
67/2: a = [2,3.1,34,6]
67/3: a
67/4: a.remove(2)
67/5: a
67/6: a.remove(6)
67/7: a
67/8: a = [2,3.1,34,6]
67/9: del a[2]
67/10: a
68/1: import numpy as np
68/2: import matplotlib.pyplot as plt
68/3: Qr = [38786.39814639028, 31407.53799963843, 48221.156333903826, 29741.757188117095, 19624.15933726036, 91856.4899693952, 12528.802387807616, 19069.122081830486, 17291.4390652811, 20541.647938494807, 26732.15655416728, 39248.28486104067, 23030.643324709567, 9162.427339620319, 19123.84824941323, 9909.632753643646, 18853.375653984334, 6690.435066491543]
68/4: Qr
68/5:         hist = np.histogram(Qr, bins=np.linspace(0,np.max(Qr),30))
68/6: hist
68/7:         hist,bins = np.histogram(Qr, bins=np.linspace(0,np.max(Qr),30))
68/8: hist
68/9: plt.hist(hist, bins=bins)
68/10: plt.ion()
68/11: plt.figure()
68/12: plt.show()
68/13: plt.hist(hist)
68/14: plt.show()
68/15: plt.figure(2)
68/16: plt.hist(hist)
69/1: Qr = [38786.39814639028, 31407.53799963843, 48221.156333903826, 29741.757188117095, 19624.15933726036, 91856.4899693952, 12528.802387807616, 19069.122081830486, 17291.4390652811, 20541.647938494807, 26732.15655416728, 39248.28486104067, 23030.643324709567, 9162.427339620319, 19123.84824941323, 9909.632753643646, 18853.375653984334, 6690.435066491543]
69/2: import numpy as np
69/3: import matplotlib.pyplot as plt
69/4:         hist,bins = np.histogram(Qr, bins=np.linspace(0,np.max(Qr),30))
69/5: hist
69/6: plt.hist(hist,bins)
69/7: plt,show()
69/8: plt.show()
69/9: plt.hist(hist)
69/10: plt.show()
69/11: plt.hist(Qr, bins=np.linspace(0,np.max(Qr),30))
69/12: plt.show()
69/13: plt.hist(Qr, bins=np.linspace(0,np.max(Qr),25))
69/14: plt.show()
70/1: pwd
70/2: cd Documents/KID_Analyser/
70/3: pwd
70/4: cd config/
70/5: ls
70/6: import numpy as np
70/7: O = [[1,11,3,13],[5,15,7,17],[9,19,2,12],[4,14,6,16],[8,18,10,20]]
70/8: O
70/9: np.save("order_map.conf",O)
70/10: pwd
70/11: ls
70/12: np.save("order_map",O)
70/13:
m = np.zeros(5,4)
for i in range(5):
    for j in range(4):
        x = input("X-array")
        y = input("Y-array")
        p = [x,y]
        m[i][j]=p
70/14: m
70/15: np
70/16: m = np.zeros(5,1)
70/17:
m = np.zeros((5,4))
for i in range(5):
    for j in range(4):
        x = input("X-array")
        y = input("Y-array")
        p = [x,y]
        m[i][j]=p
70/18: m
70/19:
x = np.zeros((5,4))
y = np.zeros((5,4))
for i in range(5):
    for j in range(4):
        xi = input("X-array")
        yi = input("Y-array")
        x[i][j]=xi
        y[i][j]=yi
70/20:
x = np.zeros((5,4))
y = np.zeros((5,4))
for i in range(5):
    for j in range(4):
        xi = input("X-array")
        yi = input("Y-array")
        x[i][j]=xi
        y[i][j]=yi
70/21: x
70/22: y
70/23:
for i in range(5):
    for j in range(4):
        plt.plot(x[i][j],y[i][j],'bo')
70/24: import matplotlib.pyplot as plt
70/25:
for i in range(5):
    for j in range(4):
        plt.plot(x[i][j],y[i][j],'bo')
70/26: plt.show()
70/27: x
70/28: y
70/29: points = [x,y]
70/30: np.save("map_array",points)
70/31: x,y=np.load("map_array.npy")
70/32: z
70/33: x
70/34: x
70/35: x.shape
70/36: s,z=x.shape
70/37: a
70/38: s
70/39: s
71/1: ipython
72/1: x=0
72/2: x.shape
72/3: x=[]
72/4: x.shape
72/5: x=[0]
72/6: x.shape
72/7: import numpy as np
72/8: x.shape
72/9: x.shape()
72/10: x=[[0]]
72/11: x.shape()
72/12: x=None
72/13:
if x:
    print "tRUE"
72/14: x=1
72/15:
if x:
    print "tRUE"
73/1: z=None
73/2: z
73/3: z.shape
73/4: z=[[0],[0]]
73/5: z.sahpe
73/6: z.shape
73/7: z=np.array()
73/8: import numpy as np
73/9: z=np.array()
73/10: z=np.array([])
73/11: z
73/12: z.shape
73/13: z.shape[0]
73/14: z
73/15: x,y =z.shape
73/16: xz.shape
73/17: x=z.shape
73/18: x
74/1: import numpy as np
74/2: a=np.load("config/order_map.npy")
74/3: a
74/4: self.sortedItems = np.load("config/order_map.npy").tolist()
74/5: sortedItems = np.load("config/order_map.npy").tolist()
74/6: sortedItems
74/7: sortedItems[0]
74/8: sortedItems[0][1]
75/1: import numpy as np
75/2: sortedItems = np.load("config/order_map.npy").tolist()
75/3: sortedItems
75/4: sortedItems[0]
75/5: clear
76/1: import numpy as np
76/2: a = [[2],[1],[4]]
76/3: a
76/4: np.save(a,"Hola")
77/1: import matplotlib.pyplot as plt
77/2: plt.figure("Hola")
77/3: plt.show()
77/4: plt.figure(r"$Q_1$")
77/5: plt.show()
77/6: plt.figure(r'Q_1')
77/7: plt.show()
78/1:
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
80/1:
Qr = [[50224.50891181 26407.93933768 14325.70094809 27571.29761131]
 [28264.17285275 31960.85853746 18755.50425412 29988.50450465]
 [14471.790672   32533.50850654 31640.41567588 32868.3625624 ]
 [53862.80835894  5319.32479524  4945.61658049 22336.33624775]
 [ 8661.72112294  5320.24383965  5327.28918646 16597.0502817 ]]
80/2: Qr = [[50224.50891181 26407.93933768 14325.70094809 27571.29761131], [28264.17285275 31960.85853746 18755.50425412 29988.50450465], [14471.790672   32533.50850654 31640.41567588 32868.3625624 ], [53862.80835894  5319.32479524  4945.61658049 22336.33624775], [ 8661.72112294  5320.24383965  5327.28918646 16597.0502817 ]]
80/3: Qr = [[50224.50891181, 26407.93933768, 14325.70094809, 27571.29761131], [28264.17285275, 31960.85853746, 18755.50425412, 29988.50450465], [14471.790672,   32533.50850654, 31640.41567588, 32868.3625624 ], [53862.80835894 , 5319.32479524,  4945.61658049, 22336.33624775], [ 8661.72112294 , 5320.24383965,  5327.28918646, 16597.0502817 ]]
80/4: Qr
80/5: import numpy as np
80/6:

import numpy as np
import matplotlib.pyplot as plt
from astropy.io import fits
from numpy import fft

from dataRed import dataRed
from getQ import get_Q_factor
from fitting_bounds import fitting_resonators
from enableThread import enableWindow
from loadThread import loadThread

from detector_peaks import detect_peaks
from scipy import signal

from scipy.signal import savgol_filter

import matplotlib
import matplotlib.gridspec as gridspec
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt4agg import(
    FigureCanvasQTAgg as FigureCanvas,
    NavigationToolbar2QT as NavigationToolbar)

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from scipy.interpolate import griddata
80/7:
        fig = plt.figure()
        ax = fig.gca(projection='3d')

        xi = np.linspace(0,12,100)
        yi = np.linspace(0,12,100)
80/8: xi
80/9: xMap,yMap = np.load("config/map_array.npy")
80/10: xMap
80/11: x,y = np.load("config/map_array.npy")
80/12: zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
80/13: Qr = z
80/14: z=Qr
80/15: zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
80/16: x
80/17: x.tolist()
80/18: x
80/19: x=x.tolist()
80/20: y=y.tolist()
80/21: zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
80/22: z
80/23: x
80/24: y
80/25:
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy.ma as ma
from numpy.random import uniform, seed
80/26:
seed(1234)
npts = 200
x = uniform(-2,2,npts)
y = uniform(-2,2,npts)
z = x*np.exp(-x**2-y**2)
80/27: x
80/28: x,y = np.load("config/map_array.npy")
80/29: x
80/30: Qr
80/31: Z
80/32: z
80/33: z = x*np.exp(-x**2-y**2)
80/34: zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
80/35: x
80/36: y
80/37: z
80/38: xi
80/39:
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy.ma as ma
from numpy.random import uniform, seed
# make up some randomly distributed data
seed(1234)
npts = 200
x = uniform(-2,2,npts)
y = uniform(-2,2,npts)
z = x*np.exp(-x**2-y**2)
# define grid.
xi = np.linspace(-2.1,2.1,100)
yi = np.linspace(-2.1,2.1,100)
# grid the data.
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(-2,2)
plt.ylim(-2,2)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/40: zi
80/41:
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy.ma as ma
from numpy.random import uniform, seed
# make up some randomly distributed data
seed(1234)
npts = 200
x = uniform(-2,2,npts)
y = uniform(-2,2,npts)
z = x*np.exp(-x**2-y**2)
# define grid.
xi = np.linspace(-2.1,2.1,100)
yi = np.linspace(-2.1,2.1,100)
# grid the data.
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(-2,2)
plt.ylim(-2,2)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/42: zi
80/43: xi
80/44: yi
80/45: xi
80/46: type(xi)
80/47: x
80/48: x.shape
80/49: y.shape
80/50: x
80/51: x = uniform(-2,2,npts)
80/52: x
80/53: x,y = np.load("config/map_array.npy")
80/54: x
80/55: sx,sy = x.shape
80/56:
nx = []
ny = []
for i in sx:
    for j in sy:
        nx.append(x[i][j])
        ny.append(y[i][j])
80/57:
nx = []
ny = []
for i in range(sx):
    for j in range(sy):
        nx.append(x[i][j])
        ny.append(y[i][j])
80/58: nx
80/59: QR
80/60: z = Qr
80/61: z
80/62:
nz = []
for i in range(sx):
    for j in range(sy):
        nz.append(Qr[i][j])
80/63: nz
80/64: nx = np.array(nx)
80/65: ny = np.array(ny)
80/66: nz = np.array(nz)
80/67: nx
80/68: ny
80/69: nz
80/70:
        xi = np.linspace(0,12,100)
        yi = np.linspace(0,12,100)
80/71: zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
80/72: zi = griddata((nx, ny), nz, (xi[None,:], yi[:,None]), method='cubic')
80/73:
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(-2,2)
plt.ylim(-2,2)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/74:
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
plt.show()
80/75:
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
# plot data points.
plt.scatter(nx,ny,marker='o',c='b',s=5)
plt.xlim(0,12)
plt.ylim(0,12)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/76:
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
# plot data points.
plt.scatter(nx,ny,marker='o',c='b',s=5)
plt.xlim(0,12)
plt.ylim(0,12)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/77: x = nx
80/78: y = ny
80/79: z = nz
80/80:
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(0,12)
plt.ylim(0,12)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/81:
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy.ma as ma
from numpy.random import uniform, seed
80/82:
# grid the data.
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(0,12)
plt.ylim(0,12)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/83:
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy.ma as ma
from numpy.random import uniform, seed
# make up some randomly distributed data
seed(1234)
npts = 200
x = uniform(-2,2,npts)
y = uniform(-2,2,npts)
z = x*np.exp(-x**2-y**2)
# define grid.
xi = np.linspace(-2.1,2.1,100)
yi = np.linspace(-2.1,2.1,100)
# grid the data.
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(-2,2)
plt.ylim(-2,2)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/84:
import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy.ma as ma
from numpy.random import uniform, seed
# make up some randomly distributed data
seed(1234)
npts = 200
x = uniform(-2,2,npts)
y = uniform(-2,2,npts)
z = x*np.exp(-x**2-y**2)
# define grid.
xi = np.linspace(-2.1,2.1,100)
yi = np.linspace(-2.1,2.1,100)
# grid the data.
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(-2,2)
plt.ylim(-2,2)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/85:

import numpy as np
import matplotlib.pyplot as plt
from astropy.io import fits
from numpy import fft
from dataRed import dataRed
from getQ import get_Q_factor
from fitting_bounds import fitting_resonators
from enableThread import enableWindow
from loadThread import loadThread

from detector_peaks import detect_peaks
from scipy import signal

from scipy.signal import savgol_filter

import matplotlib
import matplotlib.gridspec as gridspec
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt4agg import(
    FigureCanvasQTAgg as FigureCanvas,
    NavigationToolbar2QT as NavigationToolbar)

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from scipy.interpolate import griddata
80/86: x = nx
80/87: y=ny
80/88: z=nz
80/89:
# grid the data.
zi = griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')
# contour the gridded data, plotting dots at the randomly spaced data points.
CS = plt.contour(xi,yi,zi,15,linewidths=0.5,colors='k')
CS = plt.contourf(xi,yi,zi,15,cmap=plt.cm.jet)
plt.colorbar() # draw colorbar
# plot data points.
plt.scatter(x,y,marker='o',c='b',s=5)
plt.xlim(0,12)
plt.ylim(0,12)
plt.title('griddata test (%d points)' % npts)
plt.show()
80/90: x
80/91: nx
80/92: ny
80/93: nz
80/94: fig, ax = plt.subplots()
80/95: x
80/96: nx = np.arange(2,4,6,8,10)
80/97: nx = np.arange([2,4,6,8,10])
80/98: nx = np.array([2,4,6,8,10])
80/99: ny
80/100: im = ax.imshow(nz, interpolation='nearest', origin='lower', cmap=cm)
80/101: plt.show()
80/102: im = ax.imshow(nz,cmap=cm)
80/103: im
80/104: im = ax.imshow(nz)
80/105: ny
80/106: nz
80/107: Qr
80/108: im = ax.imshow(Qr)
80/109: plt.show()
80/110: im
80/111:

fig, ax = plt.subplots()
80/112: im = ax.imshow(Qr)
80/113: plt.show()
80/114: self.xMap,self.yMap = np.load("config/map_array.npy")
80/115: x,y = np.load("config/map_array.npy")
80/116: x
80/117: im = ax.imshow((x,y),Qr)
80/118: im = ax.imshow((x,y),np.array(Qr))
80/119:
real_x=np.array([15,16,17])
real_y=np.array([20,21,22,23])
80/120:
dx = (real_x[1]-real_x[0])/2.
dy = (real_y[1]-real_y[0])/2.
extent = [real_x[0]-dx, real_x[-1]+dx, real_y[0]-dy, real_y[-1]+dy]
plt.imshow(data, extent=extent)
80/121: A=np.array([[3,2,5],[8,1,2],[6,6,7],[3,5,1]]) #The array to plot
80/122: data=A
80/123:
dx = (real_x[1]-real_x[0])/2.
dy = (real_y[1]-real_y[0])/2.
extent = [real_x[0]-dx, real_x[-1]+dx, real_y[0]-dy, real_y[-1]+dy]
plt.imshow(data, extent=extent)
80/124: plt.ahow()
80/125: plt.show()
80/126: X
80/127: x
80/128: y
80/129: z
80/130: Qr
80/131: z=np.array(Qr)
80/132: x
80/133: y
80/134: z
80/135: extent = [1, 11, 0, 10]
80/136: plt.imshow(z, extent=extent)
80/137: plt.show()
80/138: plt.imshow(z,cmap=plt.cm.hot)
80/139: plt.show()
80/140: z
80/141: x
80/142: y
80/143: w=1
80/144: x.shape
80/145: np.max(x)
80/146: np.max(y)
80/147:
for i in range(10):
    for j in range(8):
        pass
80/148: z
80/149: z.shape()
80/150: z[0][0]
82/1: pix = [[    0. ,            0.,             0.,             0.,      0.        ,     0.  ,           0.       ,      0.,      0.         ,    0.        ], [    0.      ,       0.,             0.  ,           0.,      0.          ,   0. ,            0.         ,    0.,      0.           ,  0.        ], [    0.        ,     0.,         50224.50891181, 50224.50891181,  26407.93933768, 26407.93933768, 14325.70094809 14325.70094809,  27571.29761131, 27571.29761131], [    0.     ,        0.   ,      50224.50891181, 50224.50891181,  26407.93933768, 26407.93933768, 14325.70094809, 14325.70094809,  27571.29761131, 27571.29761131], [    0.    ,     28264.17285275, 28264.17285275, 31960.85853746,  31960.85853746, 18755.50425412, 18755.50425412, 29988.50450465,  29988.50450465,     0.        ], [    0.  ,       28264.17285275, 28264.17285275, 31960.85853746,  31960.85853746, 18755.50425412, 18755.50425412, 29988.50450465,  29988.50450465 ,    0.        ], [    0.  ,           0.  ,       14471.790672,   14471.790672,  32533.50850654, 32533.50850654, 31640.41567588, 31640.41567588,  32868.3625624,  32868.3625624 ], [    0.  ,           0.,         14471.790672,   14471.790672,  32533.50850654, 32533.50850654, 31640.41567588 ,31640.41567588,  32868.3625624,  32868.3625624 ], [    0.     ,    53862.80835894, 53862.80835894 , 5319.32479524,   5319.32479524,  4945.61658049,  4945.61658049, 22336.33624775,  22336.33624775,     0.        ], [    0. ,        53862.80835894, 53862.80835894 , 5319.32479524,   5319.32479524,  4945.61658049,  4945.6165804, 22336.33624775,  22336.33624775,     0.        ], [    0. ,            0.   ,       8661.72112294,  8661.72112294,   5320.24383965,  5320.24383965 , 5327.28918646 , 5327.28918646,  16597.0502817,  16597.0502817 ], [    0.    ,        0.       ,   8661.72112294 , 8661.72112294,   5320.24383965,  5320.24383965,  5327.28918646,  5327.28918646,  16597.0502817,  16597.0502817 ]]
82/2: pix = [[    0. ,            0.,             0.,             0.,      0.        ,     0.  ,           0.       ,      0.,      0.         ,    0.        ], [    0.      ,       0.,             0.  ,           0.,      0.          ,   0. ,            0.         ,    0.,      0.           ,  0.        ], [    0.        ,     0.,         50224.50891181, 50224.50891181,  26407.93933768, 26407.93933768, 14325.70094809, 14325.70094809,  27571.29761131, 27571.29761131], [    0.     ,        0.   ,      50224.50891181, 50224.50891181,  26407.93933768, 26407.93933768, 14325.70094809, 14325.70094809,  27571.29761131, 27571.29761131], [    0.    ,     28264.17285275, 28264.17285275, 31960.85853746,  31960.85853746, 18755.50425412, 18755.50425412, 29988.50450465,  29988.50450465,     0.        ], [    0.  ,       28264.17285275, 28264.17285275, 31960.85853746,  31960.85853746, 18755.50425412, 18755.50425412, 29988.50450465,  29988.50450465 ,    0.        ], [    0.  ,           0.  ,       14471.790672,   14471.790672,  32533.50850654, 32533.50850654, 31640.41567588, 31640.41567588,  32868.3625624,  32868.3625624 ], [    0.  ,           0.,         14471.790672,   14471.790672,  32533.50850654, 32533.50850654, 31640.41567588 ,31640.41567588,  32868.3625624,  32868.3625624 ], [    0.     ,    53862.80835894, 53862.80835894 , 5319.32479524,   5319.32479524,  4945.61658049,  4945.61658049, 22336.33624775,  22336.33624775,     0.        ], [    0. ,        53862.80835894, 53862.80835894 , 5319.32479524,   5319.32479524,  4945.61658049,  4945.6165804, 22336.33624775,  22336.33624775,     0.        ], [    0. ,            0.   ,       8661.72112294,  8661.72112294,   5320.24383965,  5320.24383965 , 5327.28918646 , 5327.28918646,  16597.0502817,  16597.0502817 ], [    0.    ,        0.       ,   8661.72112294 , 8661.72112294,   5320.24383965,  5320.24383965,  5327.28918646,  5327.28918646,  16597.0502817,  16597.0502817 ]]
82/3: import matplotlib.pyplot as plt
82/4: imgplot = plt.imshow(lum_img)
82/5: imgplot = plt.imshow(pix)
82/6: plt.colorbar()
82/7: plt.show()
82/8: imgplot = plt.imshow(pix)
82/9: plt.show()
82/10: imgplot = plt.imshow(pix,cmap='RdBu')
82/11: plt.show()
82/12: imgplot = plt.imshow(pix,cmap='rainbow')
82/13: plt.show()
82/14: imgplot = plt.imshow(pix,cmap='jet')
82/15: plt.show()
82/16: imgplot = plt.imshow(pix,cmap='magma')
82/17: plt.show()
82/18: imgplot = plt.imshow(pix,cmap='hot')
82/19: plt.show()
83/1: import matplotlib.pyplot as plt
83/2: plt__version
83/3: plt.__version
83/4: plt.__version.
83/5: plt.__version__.
83/6: plt.__version__
83/7: import matplotlib
83/8: matplotlib.__version__
83/9: print plt.rcParams['axes.prop_cycle'].by_key()['color']
83/10: plt.rcParams['axes.prop_cycle'].by_key()['color']
84/1: a = []*2
84/2: a
84/3: a = [None]*2
84/4: a
84/5: a = [[]]*2
84/6: a
84/7: len(a)
85/1: import numpy as np
85/2: import matplotlib.pyplot as plt
85/3: ls
85/4: Qp=np.load("Q_r0.npy")
85/5: Qp
85/6: Qp.shape
85/7: Qp[0:]
85/8: q=Qp[0:]
85/9: q.shape
85/10: Qp.shape
85/11: q=Qp[0,:]
85/12: q.shape
85/13: q=Qp[:,0]
85/14: q.shape
85/15: q
87/1: import spectrum_analyser
88/1: import sys
88/2: sys.path
89/1: import spectrum_analyser
89/2: s=spectrum_analyser.SpectrumAnalyser()
89/3: f,m = s.sweep?
89/4: f,m = s.sweep(0,1e9,1e6)
89/5: plot f,m
89/6: plot(f,m)
89/7: from numpy import *; from matplotlib.pyplot import *, ion()
89/8: from numpy import *; from matplotlib.pyplot import *; ion()
89/9: plot(f,m)
89/10: ls
90/1: import pcp
90/2: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
90/3: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1056')
90/4: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
90/5: syn_src.setPLLPowerOn(0)
90/6: syn_src.setPLLPowerOn(1)
90/7: ch6 = pcp.mux_channel.muxChannel('sith')
90/8: ch6.shutdown()
90/9: ch6 = pcp.mux_channel.muxChannel('jedi')
90/10: ch6.initialise_hardware()
90/11: ch6.roach_iface.initialise_fpga(force_reupload=True)
90/12: )
90/13: ch6.roach_iface.write_freqs_to_qdr?
90/14: ch6.toneslist
90/15: ch6.toneslist.amps
90/16: ch6.toneslist.amps()
90/17: ch6.toneslist.phases?
90/18: ch6.toneslist.phases
90/19: ch6.toneslist.phases()
90/20: ch6.toneslist.phases
90/21: ch6.toneslist.bb_freqs
91/1: import pcp
91/2: ch6 = pcp.mux_channel.muxChannel('jedi')
91/3: ch6.initialise_hardware()
89/11: pwd
91/4: rfcal_tones = open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt')
91/5: rfcal_tones
91/6: rfcal_tones.readlines()
91/7: ch6.toneslist.rf_freqs
91/8: ch6.toneslist.bb_freqs = 259e6
91/9: ch6.toneslist.bb_freqs
91/10: ch6.toneslist.rf_freqs
91/11: ch6.toneslist.phases
91/12: print ch6.toneslist.phases
91/13: rfcal_tones.readlines()
91/14: rfcal_tones.readlines()
91/15: rfcal_tones = open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt')
91/16:
for line in rfcal_tones.readlines():
    space = 0
    for i in line:
        if i == ' ':
            space =+ 1
91/17: from numpy import *; from matplotlib.pyplot import *; ion()
91/18: f,a,p = genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt',unpack=True)
91/19: f
91/20: a
91/21: p
91/22: f
91/23: ch6.roach_iface.write_freqs_to_qdr?
91/24: ch6.roach_iface.write_freqs_to_qdr//
91/25: ch6.roach_iface.write_freqs_to_qdr
91/26: ch6.roach_iface.write_freqs_to_qdr??
91/27: ch6.roach_iface.write_freqs_to_qdr(f,a,p)
91/28: len(f)
91/29: len(a)
91/30: len(a)
91/31: p
91/32: len(a)
91/33: p
91/34: ch6.roach_iface.read_ADC(1)
91/35: ch6.initialise_hardware()
91/36: ch6._check_connections()
91/37: ch6.sweep_lo()
91/38: pcp.toneslist.Toneslist
91/39: ch6.toneslist.load_tonelist(ch6.toneslist.tonelistfile)
91/40: ch6.roach_iface.write_freqs_to_qdr(f,a,p)
91/41: pcp.toneslist.Toneslist
91/42: pcp.toneslist.Toneslist.bb_freqs
91/43: ch6.toneslist.rf_freqs
91/44: ch6.toneslist.bb_freqs
91/45: ch6.input_atten.att
91/46: ch6.input_atten.att=0
91/47: ch6.output_atten.att=0
91/48: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
91/49: ch6.roach_iface.initialise_fpga(force_reupload=True)
91/50: ch6.roach_iface.write_freqs_to_qdr(f,a,p)
91/51: ch6.output_atten.att
91/52: ch6.input_atten.att
91/53: s
89/12: f,m = s.sweep(0,10e6,1e3)
89/13: close('all')
89/14: plot(f,m)
89/15: f,m = s.sweep(0,260e6,1e3)
89/16: plot(f,m)
89/17: f,m = s.sweep(0,260e6,1e3)
89/18: plot(f,m)
89/19: f,m = s.sweep?
89/20: s.resolution_bandwidth()
89/21: s.resolution_bandwidth(1e3)
89/22: f,m = s.sweep(0,260e6,1e3)
89/23: plot(f,m)
89/24: s.resolution_bandwidth(1e4)
89/25: s.detector_type()
89/26: s.filter_type()
89/27: s.measure_mode()
89/28: s.resolution_bandwidth_auto()
89/29: s.resolution_bandwidth_auto(1)
89/30: s.resolution_bandwidth()
89/31: s.resolution_bandwidth(3e4)
89/32: s.resolution_bandwidth()
89/33: f,m = s.sweep(0,260e6,0.5e3)
89/34: plot(f,m)
89/35: s.resolution_bandwidth_auto(1)
89/36: f,m = s.sweep(0,2e6,1e3)
89/37: s.resolution_bandwidth()
89/38: plot(f,m)
89/39: f,m = s.sweep(0,2e6,0.25e3)
89/40: plot(f,m)
89/41: s.resolution_bandwidth(1e4)
89/42: f,m = s.sweep(0,2e6,0.25e3)
89/43: s.resolution_bandwidth()
89/44: f,m = s.sweep(0,2e6,0.25e3)
89/45: plot(f,m)
89/46: plot(f,m)
89/47: plot(f,m)
89/48: plot(f,m)
89/49: plot(f,m)
89/50: plot(f,m)
89/51: plot(f,m)
89/52: s.resolution_bandwidth_auto(1)
89/53: f,m = s.sweep(0,2e6,0.5e3)
89/54: plot(f,m)
89/55: f,m = s.sweep(0,2e6,0.5e3)
89/56: plot(f,m)
89/57: s.resolution_bandwidth(1e4)
89/58: f,m = s.sweep(0,2e6,0.25e3)
89/59: plot(f,m)
89/60: f,m = s.sweep(0,2e6,0.25e3)
89/61: plot(f,m)
89/62: f,m = s.sweep(0,2e6,0.25e3)
89/63: plot(f,m)
89/64: f,m = s.sweep(0,2e6,0.25e3)
89/65: plot(f,m)
89/66: f,m = s.sweep(0,2e6,0.25e3)
89/67: plot(f,m)
89/68: f,m = s.sweep(0,2e6,0.25e3)
89/69: plot(f,m)
89/70: f,m = s.sweep(0,2e6,0.25e3)
89/71: plot(f,m)
89/72: f,m = s.sweep(18e6,20e6,0.25e3)
89/73: plot(f,m)
89/74: f,m = s.sweep(18e6,20e6,0.25e3)
89/75: plot(f,m)
89/76: f,m = s.sweep(18e6,20e6,0.25e3)
89/77: plot(f,m)
89/78: f,m = s.sweep(18e6,20e6,0.25e3)
89/79: plot(f,m)
89/80: f,m = s.sweep(18e6,20e6,0.25e3)
89/81: plot(f,m)
89/82: f,m = s.sweep(18e6,20e6,0.25e3)
89/83: plot(f,m)
89/84: f,m = s.sweep(18e6,20e6,0.25e3)
89/85: plot(f,m)
89/86: f,m = s.sweep(18e6,20e6,0.25e3)
89/87: plot(f,m)
91/54: f
91/55: f[0]
91/56: f[100]
89/88: s.center_freq(204347873.9319713)
89/89: fr,am,ph=genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt',unpack=1)
89/90: import time
89/91:
for ffff in fr:
    s.center_freq(ffff)
    time.sleep(0.2)
89/92:
for ffff in fr:
    s.center_freq(ffff)
    time.sleep(1)
89/93: dddd
89/94: ffff
89/95: s.center_freq(204347873.9319713)
89/96: s.span(1000)
89/97:
for ffff in fr:
    s.center_freq(abs(ffff))
    time.sleep(0.5)
91/57: ch6.roach_iface.write_freqs_to_qdr(f+100,a,p)
91/58: ch6.roach_iface.write_freqs_to_qdr(f-500,a,p)
91/59: ch6.roach_iface.write_freqs_to_qdr(f+500,a,p)
91/60: ch6.roach_iface.write_freqs_to_qdr(f,a,p)
89/98:
for ffff in fr[::2]:
    s.center_freq(abs(ffff))
    time.sleep(0.5)
89/99: f
91/61: f
89/100: fr
89/101: fr[:10]
91/62: fr[:10]
91/63: f[:10]
91/64: plot(f,m)
89/102: plot(f,m)
89/103: ffff
89/104: plot(f,m)
89/105: plot(f,m)
89/106: plot(f,m)
89/107:
for ffff in fr[::2]:
    f,m=s.center_freq(abs(ffff))
    time.sleep(0.5)
89/108:
for ffff in fr[::2]:
    f,m=s.center_freq(abs(ffff))
    time.sleep(0.5)
89/109: ffff
89/110: fr
89/111: s.resolution_bandwidth()
89/112: s.span
89/113: s.span()
89/114:
for ffff in fr[::2]:
    s.center_freq(abs(ffff))
    f,m=s.sweep(ffff-500,ffff+500,751)
    peaks.append(max(m))
89/115: peaks=[]
89/116:
for ffff in fr[::2]:
    s.center_freq(abs(ffff))
    f,m=s.sweep(ffff-500,ffff+500,1000./751)
    peaks.append(max(m))
89/117: ffff
89/118:
for ffff in fr[::2]:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    peaks.append(max(m))
89/119: figu
89/120: figure()
89/121: plot(peaks,'o')
89/122: close('all')
89/123:
for ffff in fr[::2]:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    peaks.append(max(m))
89/124:
for ffff in fr[::2]:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(ffff)
    peaks.append(max(m))
89/125: draw()
89/126: close('all')
89/127:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
89/128:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
89/129:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
89/130:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
    pause(0.01)
89/131:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1000./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
    pause(0.1)
89/132:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-500,abs(ffff)+500,1001./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
    pause(0.1)
89/133:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-400,abs(ffff)+400,1001./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
    pause(0.1)
89/134: ls
89/135: close('all')
89/136:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-400,abs(ffff)+400,1001./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
    pause(0.1)
89/137:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-400,abs(ffff)+400,1001./751)
    plot(f,m)
    plot(f[argmax(m)],m[argmax(m)],'o')
    axvline(abs(ffff))
    peaks.append(max(m))
    draw()
    pause(0.1)
89/138: close('all')
89/139: peaks=[]
89/140:
for ffff in fr:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-400,abs(ffff)+400,1001./751)
    peaks.append(max(m))
91/65: 2**21/2**15
91/66: 512e6/2**21
91/67: f
91/68: diff f
91/69: diff(f)
91/70: mean(diff(f))
91/71: mean(diff(f))/2.
91/72: ch6.roach_iface.write_freqs_to_qdr(f+256e3/2.,a,p)
89/141: plot fr,peaks,'o'
89/142: plot(fr,peaks,'o')
89/143: fr1=fr+256e3/2.
89/144: peaks1=[]
89/145:
for ffff in fr1:
    s.center_freq(abs(ffff))
    f,m=s.sweep(abs(ffff)-400,abs(ffff)+400,1001./751)
    peaks1.append(max(m))
89/146: plot(fr1,peaks1,'o')
91/73: ch6.roach_iface.write_freqs_to_qdr(f+2*256e3/2.,a,p)
91/74: ch6.roach_iface.write_freqs_to_qdr?
91/75: ch6.roach_iface.write_freqs_to_qdr??
91/76: pcp
91/77: pcp.__file__
91/78: pcp.__path__
91/79: pcp.__package__
91/80: subplot(211)
89/147: pwd
89/148: ls
89/149: import get_iq_cal
89/150: import get_iq_cal
91/81: pwd
89/151: pwd
89/152: close('all')
89/153: import get_iq_cal
92/1: import pcp
92/2: pcp.synthesizer.SYNTH_HW_DICT
92/3: pcp.synthesizer.windfreaksynth_v2
92/4: pcp.synthesizer.windfreaksynth_v2.ACM_PORTS
92/5: ch6 = pcp.mux_channel.muxChannel('jedi')
92/6: ch6.synth_lo.
92/7: ch6._initialise_synth_lo??
92/8: pcp.ROACH_CFG["synthid_lo"]
92/9: pcp.configuration.ROACH_CFG["synthid_lo"]
92/10: pcp.configuration.roach_config
92/11: pcp.configuration.roach_config['jedi']
92/12: pcp.configuration.hardware_config
92/13: pcp.configuration.hardware_config['synth_jedi_lo']
92/14: pcp.configuration.hardware_config['synth_config']['synth_jedi_lo']
92/15: pcp.configuration.hardware_config['synth_config']['synth_jedi_lo']['serial']
93/1: import get_iq_cal
93/2: import get_iq_cal
93/3: get_iq_cal.do_cal(6,'q')
94/1: import get_iq_cal
95/1: import get_iq_cal
95/2: get_iq_cal.do_cal(6,'q')
95/3: close('all')
96/1: import get_iq_cal
96/2: get_iq_cal.do_cal(6,'q')
96/3:
import os
duration =1
freq=440
os.system('play -nq -t alsa synth {} sine {}'.format(duration, freq))
97/1:
import os
duration =1
freq=440
os.system('play -nq -t alsa synth {} sine {}'.format(duration, freq))
97/2:
import os
duration =1
freq=440
os.system('play -nq -t alsa synth {} sine {}'.format(duration, freq))
98/1: import get_iq_cal
98/2: get_iq_cal.do_cal(6,'q')
98/3: ax=gca()
98/4: from numpy import *; from matplotlib.pyplot import *; ion()
98/5: ax=gca()
98/6: l=ax.lines
98/7: ll=l[0]
98/8: ll.get_xdata()
98/9: f = array([i.get_xdata()[0] for i in l])
98/10: f
98/11: p = array([i.get_ydata()[0] for i in l])
98/12: figure()
98/13: plot(f,p,'o')
98/14: p=p[argsort(f)]
98/15: f=f[argsort(f)]
98/16: plot f,p
98/17: %autocall
98/18: plot f,p
98/19: savepath='/home/muscat/rfcal_23082019/iqcal/'
98/20: ch=6
98/21: iq='q'
98/22: filename = os.path.join(savepath,'iqcal_ch%d_%c.npy'%(ch,iq))
98/23: import os
98/24: filename = os.path.join(savepath,'iqcal_ch%d_%c.npy'%(ch,iq))
98/25: save(filename,array([f,p]))
98/26: ls savepath
98/27: pwd
98/28: !whoami
98/29: savepath
98/30: ls '/home/muscat/rfcal_23082019/iqcal/'
98/31: ls -l '/home/muscat/rfcal_23082019/iqcal/'
98/32: reload(get_iq_cal)
98/33: get_iq_cal.do_cal(6,'i')
98/34: import os
98/35: filename = os.path.join(savepath,'iqcal_ch%d_%c.npy'%(6,'i'))
98/36: filename
98/37: save(filename,array([measured_freqs,measured_peaks]))
98/38: ax=gca()
98/39: ax.title('123123123')
98/40: ax.set_title('123123123')
98/41: l=ax.lines
98/42: f = array([i.get_xdata()[0] for i in l])
98/43: p = array([i.get_ydata()[0] for i in l])
98/44: p=p[argsort(f)]
98/45: f=f[argsort(f)]
98/46: plot f,p
98/47: filename = os.path.join(savepath,'iqcal_ch%d_%c.npy'%(6,'i'))
98/48: ls -l '/home/muscat/rfcal_23082019/iqcal/'
98/49: save(filename,array([f,p]))
98/50: filename
98/51: reload(get_iq_cal)
98/52: reload(get_iq_cal)
98/53: t0=time.time()
98/54: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
98/55: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
98/56: import pcp
98/57: pcp.synthesizer.windfrea.s
98/58: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
98/59: synd_dev = pcp.synthesizer.wimdfr
98/60: synd_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1054')
98/61: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
98/62: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synt_dev,0)
98/63: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev,0)
98/64: syn_src.setPLLPowerOn(0)
98/65: syn_src.setPLLPowerOn(1)
98/66: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
98/67: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
99/1: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
99/2: import time
99/3: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
99/4: import get_iq_cal
99/5: t0=time.time(); get_iq_cal.do_cal(5,'i'); print time.time()-t0
99/6: t0=time.time(); get_iq_cal.do_cal(5,'q'); print time.time()-t0
99/7: t0=time.time(); get_iq_cal.do_cal(4,'q'); print time.time()-t0
99/8: import pcp
99/9: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
99/10: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
99/11: synd_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1053')
99/12: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev,0)
99/13: syn_src.setPLLPowerOn(0)
99/14: syn_src.setPLLPowerOn(1)
99/15: t0=time.time(); get_iq_cal.do_cal(4,'q'); print time.time()-t0
100/1: import time
100/2: t0=time.time(); get_iq_cal.do_cal(4,'q'); print time.time()-t0
100/3: import get_iq_cal
100/4: t0=time.time(); get_iq_cal.do_cal(4,'q'); print time.time()-t0
100/5: t0=time.time(); get_iq_cal.do_cal(4,'i'); print time.time()-t0
100/6: synd_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1052')
100/7: import pcp
100/8: synd_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1052')
100/9: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1052')
100/10: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev,0)
100/11: syn_src.setPLLPowerOn(0)
100/12: syn_src.setPLLPowerOn(1)
100/13: t0=time.time(); get_iq_cal.do_cal(3,'q'); print time.time()-t0
100/14: t0=time.time(); get_iq_cal.do_cal(3,'i'); print time.time()-t0
100/15: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
100/16: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev,0)
100/17: syn_src.setPLLPowerOn(0)
100/18: syn_src.setPLLPowerOn(1)
100/19: syn_src.setPLLPowerOn(0)
100/20: syn_src.setPLLPowerOn(1)
100/21: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
100/22: synd_dev.getHelp()
100/23: t0=time.time(); get_iq_cal.do_cal(2,'q'); print time.time()-t0
100/24: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
100/25: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev,0)
100/26: synd_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1051')
100/27: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev,0)
100/28: syn_src.setPLLPowerOn(0)
100/29: syn_src.setPLLPowerOn(1)
100/30: t0=time.time(); get_iq_cal.do_cal(2,'q'); print time.time()-t0
100/31: QUIT
101/1: import pcp
101/2: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
101/3: import get_iq_cal
101/4: t0=time.time(); get_iq_cal.do_cal(2,'q'); print time.time()-t0
101/5: import time
101/6: t0=time.time(); get_iq_cal.do_cal(2,'q'); print time.time()-t0
101/7: t0=time.time(); get_iq_cal.do_cal(2,'i'); print time.time()-t0
101/8: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('929')
101/9: t0=time.time(); get_iq_cal.do_cal(1,'q'); print time.time()-t0
102/1: import process_iq_cal
102/2: process_iq_cal.view_iq_cal(1,'i')
102/3: ls /home/muscat/rfcal_23082019/iqcal/
102/4: process_iq_cal.view_iq_cal(6,'i')
101/10: t0=time.time(); get_iq_cal.do_cal(1,'i'); print time.time()-t0
102/5: process_iq_cal.view_iq_cal(6,'q')
102/6: figure()
102/7: process_iq_cal.view_iq_cal(5,'q')
102/8: process_iq_cal.view_iq_cal(5,'i')
102/9: ls
102/10: cd ~/lib/
102/11: ls
102/12: vim get_iq_cal.py
103/1: from scipy import interpolate
103/2: interpolate.interp1d?
103/3: from numpy import *; from matplotlib.pyplot import *; ion()
103/4: x=linspace(0,10,100)
103/5: y = linspace(1,2,100)
103/6: i = interpolate.interp1d(x,y)
103/7: i(0.5)
103/8: i(array([0.5,3,3.5,5,5.5]))
101/11: import pcp
101/12: phantom = pcp.mux_channel.muxChannel('phantom')
101/13: phantom.initialise_hardware()
104/1: import iqcal_interpolate
101/14: phantom.output_atten = 0
101/15: phantom.output_atten = 15
103/9: import iqcal_interpolate
101/16: phantom.output_atten = 0
101/17: phantom.input_atten = 0
101/18: phantom.synth_lo.frequency
103/10: iqcal_interpolate.get_interpolated_value(0.5e6,'i',1)
103/11: reload(get_iq_cal)
103/12: import iqcal
103/13: iqcal.get_values(0.5e6,1,'i')
103/14: iqcal.get_values(5.5e6,1,'i')
103/15: iqcal.get_values(55.5e6,1,'i')
103/16: iqcal.get_values(255.5e6,1,'i')
103/17: iqcal.get_values(555.5e6,1,'i')
103/18: iqcal.get_values(255.5e6,1,'i')
103/19: iqcal.get_values(-255.5e6,1,'i')
103/20: iqcal.get_values(-255.9e6,1,'i')
103/21: iqcal.get_values(-255.8e6,1,'i')
103/22: iqcal.get_values(-255.7e6,1,'i')
103/23: iqcal.get_values(-255.6e6,1,'i')
103/24: iqcal.get_values(-255.5e6,1,'i')
103/25: iqcal.get_values(255.5e6,1,'i')
103/26: iqcal.get_values(255.8e6,1,'i')
103/27: iqcal.get_values(256e6,1,'i')
103/28: iqcal.get_values(256.5e6,1,'i')
103/29: iqcal.get_values(256e6,1,'i')
101/19: phantom.input_atten = 15
101/20: phantom.output_atten = 15
101/21: phantom.output_atten = 15
103/30: StandardError
103/31: IOError
103/32: RuntimeError?
103/33: IOError?
103/34: StandardError?
103/35: help Error
101/22: phantom.output_atten = 0
101/23: phantom.output_atten
101/24: phantom.synth_lo.frequency
101/25: phantom.synth_lo.frequency
101/26: phantom.synth_lo.frequency=500e6
101/27: phantom.synth_lo.frequency=750e6
101/28: phantom.synth_lo.frequency=1000e6
101/29: phantom.synth_lo.frequency=750e6
101/30: phantom.input_atten
101/31: phantom.input_atten=50
101/32: phantom._initialise_atten_in()
101/33: phantom.input_atten.att=50
101/34: phantom.input_atten.att=40
101/35: phantom.input_atten.att=30
101/36: phantom.input_atten.att=200
101/37: phantom.input_atten.att=20
101/38: phantom.input_atten.att=10
101/39: phantom.input_atten.att=00
101/40: clones = pcp.mux_channel.muxChannel('clones')
101/41: #
101/42: clones.initialise_hardware()
101/43: clones.synth_lo.frequency=1e9
101/44: clones.synth_lo.frequency=750e6
101/45: clones.input_atten.att=00
101/46: sith = pcp.mux_channel.muxChannel('sith')
101/47: sith.initialise_hardware()
101/48: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1052')
101/49: sith.initialise_hardware()
101/50: sith.synth_lo.frequency
101/51: sith.synth_clk.frequency
101/52: sith.synth_lo.frequency = 750e6
101/53: sith.input_atten.att=0
101/54: sith.output_atten.att=0
101/55: sith.input_atten.att=0
101/56: sith.synth_lo.SynthHDDevice.getHelp()
101/57: sith.synth_lo.setPower(14)
101/58: sith.synth_lo.SynthHDDevice.getHelp()
101/59: sith.synth_lo.setPLLPowerOn(1)
101/60: sith.synth_lo.setRFAmpOn(1)
101/61: sith.synth_lo.setTemperatureCompensationSetting?
101/62: sith.synth_lo.getTemperatureCompensationSetting()
101/63: reload(pcp)
101/64: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1052')
101/65: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('929')
101/66: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
101/67: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
101/68: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
101/69: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
101/70: ch2
101/71: clones.synth_lo.SynthHDDevice.getHelp()
101/72: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
101/73: clones.synth_lo.SynthHDDevice.getHelp()
101/74: reload(pcp)
101/75: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
101/76: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values??
101/77: clones.synth_lo.SynthHDDevice.getHelp()
101/78: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
101/79: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values??
101/80: clones.synth_lo.setRFAmpOn(1)
101/81: clones.synth_lo.setPower(14)
101/82: clones.synth_lo.SynthHDDevice.getHelp()
101/83: clones.synth_lo.setFrequency(1000e6)
101/84: clones.synth_lo.setFrequency(750e6)
105/1: import pcp
105/2: import pcp
106/1: import pcp
107/1: import pcp
108/1: import pcp
108/2: phantom = pcp.mux_channel.muxChannel('phantom')
108/3: clones = pcp.mux_channel.muxChannel('clones')
108/4: sith = pcp.mux_channel.muxChannel('sith')
108/5: hope = pcp.mux_channel.muxChannel('hope')
108/6: empire = pcp.mux_channel.muxChannel('empire')
108/7: jedi = pcp.mux_channel.muxChannel('jedi')
108/8: for
108/9: jedi = pcp.mux_channel.muxChannel('jedi')
108/10:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.roach_iface.initialis
108/11: hope.roach_iface.initialise_fpga(force_reupload=True)
108/12: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('929')
108/13: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
108/14: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1052')
108/15: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
108/16: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
108/17: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
108/18: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1053')
108/19: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
108/20: syn_src.setPLLPowerOn(0)
108/21: syn_src.setPLLPowerOn(1)
108/22: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1054')
108/23: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
108/24: syn_src.setPLLPowerOn(1)
108/25: syn_src.setPLLPowerOn(0)
108/26: syn_src.setPLLPowerOn(1)
108/27: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1056')
108/28: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
108/29: syn_src.setPLLPowerOn(0)
108/30: syn_src.setPLLPowerOn(1)
108/31: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1052')
108/32: syn_src = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
108/33: syn_src.setPLLPowerOn(0)
108/34: syn_src.setPLLPowerOn(1)
108/35: syn_dev.getHelp()
108/36:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.roach_iface.initialise_fpga(force_reupload=True)
108/37:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.synth_lo.getHelp()
108/38:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.synth_lo.SynthDevice.getHelp()
108/39:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.initialise_hardware()
108/40:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.synth_lo.SynthHDDevice.getHelp()
    print str(i),'\n\n\n'
108/41:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.synth_lo.setFrequency(750e6)
    
    print str(i),'\n\n\n'
108/42:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.synth_lo.SynthHDDevice.getHelp()
    print str(i),'\n\n\n'
108/43:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.synth_lo.SynthHDDevice.sendCommand('e')
    print str(i),'\n\n\n'
108/44:
for i in [phantom,clones,sith,hope,empire,jedi]:
    #i.write_freqs_to_fpga(f,a,p)
    print str(i),'\n\n\n'
108/45: f,a,p = genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt',unpack=True)
108/46: from numpy import *; from matplotlib.pyplot import *; ion()
108/47: f,a,p = genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt',unpack=True)
108/48:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.write_freqs_to_fpga(f,a,p)
    print str(i),'\n\n\n'
108/49:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.roach_iface.write_freqs_to_fpga(f,a,p)
    print str(i),'\n\n\n'
108/50:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.roach_iface.write_freqs_to_qdr(f,a,p)
    print str(i),'\n\n\n'
108/51:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.input_atten.att=10
108/52:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.input_atten.att=5
108/53:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.input_atten.att=0
108/54: phantom.roach_iface.write_freqs_to_qdr(f[501:],a[501:],p[501:])
108/55: phantom.roach_iface.write_freqs_to_qdr(f[:501],a[:501],p[:501])
108/56: phantom.roach_iface.write_freqs_to_qdr(f,a,p)
108/57: phantom.synth_lo.SynthHDDevice.getHelp()
108/58: clones.synth_lo.SynthHDDevice.getHelp()
108/59: sith.synth_lo.SynthHDDevice.getHelp()
108/60: hope.synth_lo.SynthHDDevice.getHelp()
108/61: empire.synth_lo.SynthHDDevice.getHelp()
108/62: jedi.synth_lo.SynthHDDevice.getHelp()
108/63: phantom.synth_lo.SynthHDDevice.getHelp()
108/64: phantom.synth_lo.setFrequency(1000e6)
108/65: phantom.synth_lo.setFrequency(900e6)
108/66: phantom.synth_lo.setFrequency(800e6)
108/67: phantom.synth_lo.setFrequency(700e6)
108/68: phantom.input_atten.att=00
108/69: phantom.output_atten.att=00
108/70: ch1
108/71: phantom
108/72:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.roach_iface.initialise_fpga(force_reupload=True)
108/73:
for i in [phantom,clones,sith,hope,empire,jedi]:
    i.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(i.synth_lo.serial));
    
    #i.roach_iface.initialise_fpga(force_reupload=True)
109/1: import pcp
109/2: phantom
110/1: import pcp
110/2: name = ['phantom','clones','sith','hope','empire','jedi']
110/3:     freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
110/4: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
110/5: from numpy import *; from matplotlib.pyplot import *; ion()
110/6: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
110/7: ch1 = pcp.mux_channel.muxChannel(name[0])
110/8: ch2 = pcp.mux_channel.muxChannel(name[1])
110/9: ch3 = pcp.mux_channel.muxChannel(name[2])
110/10: ch4 = pcp.mux_channel.muxChannel(name[3])
110/11: ch5 = pcp.mux_channel.muxChannel(name[4])
110/12: ch6 = pcp.mux_channel.muxChannel(name[5])
110/13:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
110/14: ch
110/15: ch.name
110/16: ch1
110/17: ch1.roachid
110/18:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
110/19:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
110/20:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
110/21:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
110/22:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
110/23:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
110/24:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
111/1: import pcp
111/2: ch1 = pcp.mux_channel.muxChannel(name[0])
111/3: name = ['phantom','clones','sith','hope','empire','jedi']
111/4: ch1 = pcp.mux_channel.muxChannel(name[0])
111/5: ch2 = pcp.mux_channel.muxChannel(name[1])
111/6: ch3 = pcp.mux_channel.muxChannel(name[2])
111/7: ch4 = pcp.mux_channel.muxChannel(name[3])
111/8: ch5 = pcp.mux_channel.muxChannel(name[4])
111/9: ch6 = pcp.mux_channel.muxChannel(name[5])
111/10:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
112/1: import pcp
112/2: !ls /dev/
112/3: !ls /dev/
112/4: !ls /dev/
112/5: !ls /dev/
112/6: !ls /dev/
112/7: !ls /dev/
112/8: !ls /dev/
112/9: !ls /dev/
113/1: import pcp
113/2: ch1 = pcp.mux_channel.muxChannel(name[0])
113/3: name = ['phantom','clones','sith','hope','empire','jedi']
113/4: ch1 = pcp.mux_channel.muxChannel(name[0])
113/5: ch2 = pcp.mux_channel.muxChannel(name[1])
113/6: ch3 = pcp.mux_channel.muxChannel(name[2])
113/7: ch4 = pcp.mux_channel.muxChannel(name[3])
113/8: cj5
113/9: ch5 = pcp.mux_channel.muxChannel(name[4])
113/10: ch6
113/11: ch6 = pcp.mux_channel.muxChannel(name[5])
113/12:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial'])
113/13:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
113/14: ch1.roach_iface.initialise_fpga(force_reupload=1)
113/15: ch1.synth_lo
113/16: ch1.initialise_hardware()
113/17:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
113/18: ch1.roach_iface.initialise_fpga(force_reupload=1)
113/19: ch1.synth_lo
113/20: ch1.synth_lo.SynthHDDevice.getHelp()
113/21: ch1.synth_lo.setFrequency(650e6)
113/22: ch1.synth_lo.setFrequency(750e6)
113/23: ch1.synth_lo.SynthHDDevice.getHelp()
113/24: ch1.synth_clk.setFrequency(512e6)
113/25: ch1.synth_clk.setPLLPowerOn(0)
113/26: ch1.synth_clk.setPLLPowerOn(1)
113/27: ch1.synth_lo.SynthHDDevice.getHelp()
113/28: ch1.initialise_hardware()
113/29: ch1.synth_lo.SynthHDDevice.getHelp()
113/30: ch1.synth_lo.SynthHDDevice.getHelp()
113/31: ch1.synth_clk.setPLLPowerOn(0)
113/32: ch1.synth_clk.setPLLPowerOn(1)
113/33: ch1.synth_lo.SynthHDDevice.getHelp()
113/34: ch1.synth_lo.setPLLPowerOn(1)
113/35: ch1.synth_lo.SynthHDDevice.getHelp()
113/36: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
113/37: from numpy import *; from matplotlib.pyplot import *; ion()
113/38: ch2.synth_lo.setPLLPowerOn(1)
113/39: ch2.synth_lo.setPLLPowerOn(0)
113/40: ch2.synth_lo.setPLLPowerOn(1)
113/41: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
113/42: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
113/43: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
113/44: ch1.roach_iface.initialise_fpga(force_reupload=1)
113/45: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
113/46:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
113/47:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.synth_lo.setFrequency(750e6)
113/48: import spectrum_analyser
113/49: s=spectrum_analyser.SpectrumAnalyser()
113/50: f,m = s.sweep(700e6,720e6,1e3)
113/51: figure()
113/52: f,m = s.sweep(730e6,770e6,1e3)
113/53: plot(f,m)
113/54: f,m = s.sweep(930e6,970e6,1e3)
113/55: plot(f,m)
113/56: f,m = s.sweep(530e6,570e6,1e3)
113/57: plot(f,m)
113/58: f,m = s.sweep(450e6,1050e6,3e3)
113/59: plot(f,m)
113/60:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.input_atten.set_atten(0)
113/61: f,m = s.sweep(450e6,1050e6,3e3)
113/62: f,m = s.sweep(450e6,1050e6,1e3)
113/63: plot(f,m)
113/64: ch1.synth_lo.frequency
113/65: ch1.synth_lo.frequency=800000000
113/66: f,m = s.sweep(550e6,1150e6,1e3)
113/67: plot(f,m)
113/68: ch1.synth_lo.frequency=850000000
113/69: f,m = s.sweep(550e6,1150e6,1e3)
113/70: f,m = s.sweep(650e6,1250e6,1e3)
113/71: plot(f,m)
113/72: ch1.synth_lo.power
113/73: ch1.synth_lo.power=15
113/74: f,m = s.sweep(650e6,1250e6,1e3)
113/75: plot(f,m)
113/76: 1250e6-650e6
113/77: 1250e6/2+650e6/2
113/78: ch1.synth_lo.power=14
113/79: gca().lines.pop(-1);draw()
113/80: gca().lines.pop(-1);draw()
113/81: gca().lines.pop(-1);draw()
113/82: gca().lines.pop(0);draw()
113/83: gca().lines.pop(0);draw()
113/84: gca().lines.pop(0);draw()
113/85: gca().lines.pop(0);draw()
113/86: ch1.synth_lo.frequency=758.1e6
113/87: f,m = s.sweep(650e6,1250e6,1e3)
113/88: f,m = s.sweep(450e6,1050e6,1e3)
113/89: plot(f,m)
113/90: ch1.roach_iface.write_freqs_to_qdr?
113/91: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch1_i.npy')
113/92: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch1_q.npy')
113/93: figure()
113/94: plot(fcal,ical)
113/95: from scipy import interpolate
113/96: icali=interpolate.interp1d(fcal,ical)
113/97: qcali=interpolate.interp1d(fcal,qcal)
113/98: freqs
113/99: icorr = icali(freqs)
113/100: qcorr =qcali(freqs)
113/101: plot(freqs,icorr,'x')
113/102: icorr -= icorr.max()
113/103: qcorr -= qcorr.max()
113/104: cla()
113/105: plot freqs,icorr
113/106: plot(freqs,icorr)
113/107: plot(freqs,qcorr)
113/108: icorr = 10**(icorr/10)
113/109: qcorr = 10**(qcorr/10)
113/110: plot(freqs,icorr)
113/111: plot(freqs,qcorr)
113/112: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/113: f,m = s.sweep(450e6,1050e6,1e3)
113/114: figure()
113/115: plot(f,m)
113/116: f,m = s.sweep(450e6,1050e6,1e3)
113/117: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/118: figure()
113/119: plot(z.real[:10000])
113/120: plot(z[0][:10000])
113/121: axhline(32768)
113/122: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/123: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=None)
113/124: plot(z[0][:10000])
113/125: max[z]
113/126: max[z[0]]
113/127: max(z[0])
113/128: max(abs(z[0]))
113/129: max(abs(z[1]))
113/130: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/131: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr(max(abs(z[0])))*32767 + 1j*qcorr/(max(abs(z[1])))*32767)
113/132: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr/(max(abs(z[0])))*32767 + 1j*qcorr/(max(abs(z[1])))*32767)
113/133: plot(z[0][:10000])
113/134: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/135: plot(z[0][:10000])
113/136: cla()
113/137: plot(z[0][:10000])
113/138: plot(z[0][:100000])
113/139: plot(z[0][:1000000])
113/140: plot(z[0])
113/141: plot(z[1])
113/142: max(abs(z[0]))
113/143: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/144: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/145: cla()
113/146: plot(z[1])
113/147: ax(abs(z[0]))
113/148: max(abs(z[0]))
113/149: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/150: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/151: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/152: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=1./icorr+1j/qcorr)
113/153: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=None)
113/154: clf()
113/155: psd(z,Fs=256e6)
113/156: clf()
113/157: psd(z[0]+1j*z[1],Fs=256e6)
113/158: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=1.*icorr+1j*qcorr)
113/159: psd(z[0]+1j*z[1],Fs=256e6)
113/160: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=None)
113/161: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/162: psd(z[0]+1j*z[1],Fs=256e6)
113/163: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=None)
113/164: psd(z[0]+1j*z[1],Fs=256e6)
113/165: clf()
113/166: psd(z[0]+1j*z[1],Fs=256e6)
113/167: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/168: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/169: psd(z[0]+1j*z[1],Fs=256e6)
113/170: icorr = icali(freqs)
113/171: qcorr = qcali(freqs)
113/172: clf()
113/173: plot(freqs,icorr)
113/174: icorr = 10**(icorr/10)
113/175: qcorr = 10**(qcorr/10)
113/176: clf()
113/177: plot(freqs,icorr)
113/178: plot(freqs,qcorr)
113/179: icorr = icali(freqs)
113/180: icorr -= icorr.max()
113/181: icorr = 10**(icorr/10)
113/182: qcorr = qcali(freqs)
113/183: qcorr -= qcorr.max()
113/184: qcorr = 10**(qcorr/10)
113/185: clf()
113/186: plot(freqs,icorr)
113/187: icorr = icali(freqs)
113/188: icorr = 10**(icorr/20)
113/189: icorr = icali(freqs)
113/190: icorr -= icorr.max()
113/191: icorr = 10**(icorr/20)
113/192: qcorr = qcali(freqs)
113/193: qcorr -= qcorr.max()
113/194: qcorr = 10**(qcorr/20)
113/195: figure()
113/196: plot(freqs,icorr)
113/197: plot(freqs,qcorr)
113/198: qcorr = clip?
113/199: qcorr = clip(qcorr,0.45,1.0)
113/200: icorr = clip(icorr,0.45,1.0)
113/201: plot(freqs,icorr)
113/202: plot(freqs,qcorr)
113/203: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/204: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/205: s=spectrum_analyser.SpectrumAnalyser()
113/206: s=spectrum_analyser.SpectrumAnalyser()
113/207: f,m = s.sweep(450e6,1050e6,1e3)
113/208: figure()
113/209: plot(f,m)
113/210: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/211: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/212: plot(f,m)
113/213: cla()
113/214: plot(f0,m0)
113/215: plot(f,m)
113/216: plot(f0,m0)
113/217: #np.save('f',array([f,m]))
113/218: ch1.synth_lo.frequency
113/219: figure()
113/220: plot(f,m)
113/221: plot(f0,m0)
113/222: clf()
113/223: plot(f0,m0)
113/224: plot(f,m)
113/225: plot(f0,m0)
113/226: np.save('ch1_lo750_uncorrected',array([f0,m0]))
113/227: pwd
113/228: np.save('ch1_lo758_uncorrected',array([f0,m0]))
113/229: pwd
113/230: whoami
113/231: ls
113/232: pwd
113/233: np.save('/home/muscat/ch1_lo758_uncorrected',array([f0,m0]))
113/234: np.save('/home/muscat/ch1_lo758_corrected',array([f,m]))
113/235: ch1.synth_lo.setFrequency(750e6)
113/236: ch1.input_atten
113/237: ch1.input_atten.att
113/238: ch1.output_atten.att
113/239: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/240: plot(f0,m0)
113/241: s=spectrum_analyser.SpectrumAnalyser()
113/242: s=spectrum_analyser.SpectrumAnalyser()
113/243: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/244: plot(f0,m0)
113/245: figure()
113/246: plot(f0,m0)
113/247: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/248: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/249: plot(f0,m0)
113/250: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/251: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/252: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/253: plot(f_corr, m_corr)
113/254: np.save('/home/muscat/ch1_lo750_corrected',array([f_corr,m_corr]))
113/255: np.save('/home/muscat/ch1_lo750_uncorrected',array([f0,m0]))
113/256: ch1.synth_lo.setFrequency(775e6)
113/257: f_corr,m_corr = s.sweep(475e6,1075e6,1e3)
113/258: figure
113/259: figure('775_CH1_Corr')
113/260: plot(f_corr, m_corr)
113/261: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/262: f0,m0 = s.sweep(475e6,1075e6,1e3)
113/263: plot(f0, m0)
113/264: np.save('/home/muscat/ch1_lo775_uncorrected',array([f0,m0]))
113/265: np.save('/home/muscat/ch1_lo775_corrected',array([f_corr,m_corr]))
113/266: ch1.synth_lo.setFrequency(800e6)
113/267: f0,m0 = s.sweep(500e6,1100e6,1e3)
113/268: figure('780_CH1')
113/269: plot(f0, m0)
113/270: z=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/271: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/272: f_corr,m_corr = s.sweep(500e6,1100e6,1e3)
113/273: plot(f_corr, m_corr)
113/274: plot(f0, m0)
113/275: np.save('/home/muscat/ch1_lo780_uncorrected',array([f0,m0]))
113/276: np.save('/home/muscat/ch1_lo800_corrected',array([f_corr,m_corr]))
113/277: ch2.roachid
113/278: ch2.input_atten.att
113/279: ch2.output_atten.att
113/280: ch2.output_atten.att = 0
113/281: ch2.input_atten.att
113/282: ch2.output_atten.att
113/283: ch2.synth_lo.setFrequency(750e6)
113/284: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/285: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/286: figure('750_CH2')
113/287: plot(f0, m0)
113/288: ical
113/289: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
113/290: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
113/291: icorr = icali(freqs)
113/292: icali=interpolate.interp1d(fcal,ical)
113/293: qcali=interpolate.interp1d(fcal,qcal)
113/294: icorr = icali(freqs)
113/295: icorr -= icorr.max()
113/296: icorr = 10**(icorr/20)
113/297: qcorr = qcali(freqs)
113/298: qcorr -= qcorr.max()
113/299: qcorr = 10**(qcorr/20)
113/300: icorr = clip(icorr,0.45,1.0)
113/301: qcorr = clip(qcorr,0.45,1.0)
113/302: z=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/303: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/304: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/305: plot(f_corr, m_corr)
113/306: plot(f0, m0)
113/307: np.save('/home/muscat/ch2_lo750_corrected',array([f_corr,m_corr]))
113/308: np.save('/home/muscat/ch1_lo750_uncorrected',array([f0,m0]))
113/309: ch2.synth_lo.setFrequency(775e6)
113/310: f_corr,m_corr = s.sweep(475e6,1075e6,1e3)
113/311: figure('775_CH2')
113/312: plot(f_corr, m_corr)
113/313: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/314: f0,m0 = s.sweep(475e6,1075e6,1e3)
113/315: plot(f0, m0)
113/316: np.save('/home/muscat/ch1_lo775_uncorrected',array([f0,m0]))
113/317: np.save('/home/muscat/ch2_lo775_corrected',array([f_corr,m_corr]))
113/318: np.save('/home/muscat/ch2_lo775_uncorrected',array([f0,m0]))
113/319: ch2.synth_lo.setFrequency(800e6)
113/320: f0,m0 = s.sweep(500e6,1100e6,1e3)
113/321: z=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/322: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/323: figure('800_CH2')
113/324: plot(f0, m0)
113/325: f_corr,m_corr = s.sweep(500e6,1100e6,1e3)
113/326: plot(f_corr, m_corr)
113/327: plot(f0, m0)
113/328: np.save('/home/muscat/ch2_lo800_uncorrected',array([f0,m0]))
113/329: np.save('/home/muscat/ch2_lo800_corrected',array([f_corr,m_corr]))
113/330: ch3.input_atten.att
113/331: ch3.output_atten.att
113/332: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/333: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/334: figure('750_CH3')
113/335: ch3.synth_lo.frequency
113/336: plot(f0, m0)
113/337: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_q.npy')
113/338: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_i.npy')
113/339: icali=interpolate.interp1d(fcal,ical)
113/340: qcali=interpolate.interp1d(fcal,qcal)
113/341: icorr = icali(freqs)
113/342: qcorr = qcali(freqs)
113/343: icorr -= icorr.max()
113/344: icorr = 10**(icorr/20)
113/345: icorr = clip(icorr,0.45,1.0)
113/346: qcorr -= qcorr.max()
113/347: qcorr = 10**(qcorr/20)
113/348: qcorr = clip(qcorr,0.45,1.0)
113/349: z=ch3.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/350: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/351: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/352: plo
113/353: plot(f_corr, m_corr)
113/354: figure('750_CH3')
113/355: plot(f_corr, m_corr)
113/356: plot(f0, m0)
113/357: ch3.synth_lo.frequency = 775e6
113/358: ch3.synth_lo.frequency
113/359: f_corr,m_corr = s.sweep(475e6,1075e6,1e3)
113/360: figure('775_CH3')
113/361: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/362: f0,m0 = s.sweep(475e6,1075e6,1e3)
113/363: plot(f0, m0)
113/364: plot(f_corr, m_corr)
113/365: plot(f0, m0)
113/366: np.save('/home/muscat/ch3_lo750_corrected',array([f_corr,m_corr]))
113/367: np.save('/home/muscat/ch3_lo750_uncorrected',array([f_0,m_0]))
113/368: np.save('/home/muscat/ch3_lo750_uncorrected',array([f0,m0]))
113/369: np.save('/home/muscat/ch3_lo775_uncorrected',array([f0,m0]))
113/370: np.save('/home/muscat/ch3_lo775_corrected',array([f_corr,m_corr]))
113/371: ch3.synth_lo.frequency = 750e6
113/372: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/373: z=ch3.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/374: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/375: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/376: figure('750_CH3')
113/377: plot(f0, m0)
113/378: plot(f_corr, m_corr)
113/379: plot(f0, m0)
113/380: np.save('/home/muscat/ch3_lo750_corrected',array([f_corr,m_corr]))
113/381: np.save('/home/muscat/ch3_lo750_uncorrected',array([f0,m0]))
113/382: ch3.synth_lo.frequency = 800e6
113/383: f_corr,m_corr = s.sweep(500e6,1100e6,1e3)
113/384: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/385: f0,m0 = s.sweep(500e6,1100e6,1e3)
113/386: figure('800_CH3')
113/387: plot(f0, m0)
113/388: plot(f_corr, m_corr)
113/389: plot(f0, m0)
113/390: np.save('/home/muscat/ch3_lo800_uncorrected',array([f0,m0]))
113/391: np.save('/home/muscat/ch3_lo800_corrected',array([f_corr,m_corr]))
113/392: ch4.input_atten.att
113/393: ch4.output_atten.att
113/394: ch4.output_atten.att =0
113/395: ch4.synth_lo.frequency = 750e6
113/396: ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/397: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/398: figure('750_CH4')
113/399: plot(f0, m0)
113/400: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch4_i.npy')
113/401: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch4_q.npy')
113/402: icali=interpolate.interp1d(fcal,ical)
113/403: qcali=interpolate.interp1d(fcal,qcal)
113/404: icorr = icali(freqs)
113/405: icorr -= icorr.max()
113/406: icorr = 10**(icorr/20)
113/407: icorr = clip(icorr,0.45,1.0)
113/408: qcorr = qcali(freqs)
113/409: qcorr -= qcorr.max()
113/410: qcorr = 10**(qcorr/20)
113/411: qcorr = clip(qcorr,0.45,1.0)
113/412: z=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/413: ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/414: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/415: plot(f_corr, m_corr)
113/416: plot(f0, m0)
113/417: ch4.synth_lo.frequency = 775e6
113/418: f_corr,m_corr = s.sweep(475e6,1075e6,1e3)
113/419: ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/420: f0,m0 = s.sweep(475e6,1075e6,1e3)
113/421: ch4.input_atten.att
113/422: figure('775_CH4')
113/423: plot(f_corr, m_corr)
113/424: plot(f0, m0)
113/425: np.save('/home/muscat/ch4_lo775_corrected',array([f_corr,m_corr]))
113/426: np.save('/home/muscat/ch4_lo775_uncorrected',array([f0,m0]))
113/427: ch4.synth_lo.frequency = 800e6
113/428: f0,m0 = s.sweep(500e6,1100e6,1e3)
113/429: z=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/430: ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/431: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1053')
113/432: syn_dev.getHelp()
113/433: f_corr,m_corr = s.sweep(500e6,1100e6,1e3)
113/434: figure('800_CH4')
113/435: plot(f_corr, m_corr)
113/436: plot(f0, m0)
113/437: np.save('/home/muscat/ch4_lo800_uncorrected',array([f0,m0]))
113/438: np.save('/home/muscat/ch4_lo800_corrected',array([f_corr,m_corr]))
113/439: ch5.input_atten.att
113/440: ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/441: ch5.synth_lo.setFrequency(750e6)
113/442: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/443: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_q.npy')
113/444: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_i.npy')
113/445: icali=interpolate.interp1d(fcal,ical)
113/446: qcali=interpolate.interp1d(fcal,qcal)
113/447: icorr = icali(freqs)
113/448: icorr -= icorr.max()
113/449: icorr = 10**(icorr/20)
113/450: icorr = clip(icorr,0.45,1.0)
113/451: qcorr = qcali(freqs)
113/452: qcorr -= qcorr.max()
113/453: qcorr = 10**(qcorr/20)
113/454: qcorr = clip(qcorr,0.45,1.0)
113/455: z=ch5.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/456: ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/457: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/458: figure('750_CH5')
113/459: plot(f0, m0)
113/460: plot(f_corr, m_corr)
113/461: plot(f0, m0)
113/462: np.save('/home/muscat/ch5_lo750_uncorrected',array([f0,m0]))
113/463: np.save('/home/muscat/ch5_lo750_corrected',array([f_corr,m_corr]))
113/464: ch6.synth_lo.frequency
113/465: ch6.input_atten.att
113/466: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
113/467: f0,m0 = s.sweep(450e6,1050e6,1e3)
113/468: figure('750_CH6')
113/469: plot(f0, m0)
113/470: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
113/471: f_ca
113/472: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
113/473: icali=interpolate.interp1d(fcal,ical)
113/474: qcali=interpolate.interp1d(fcal,qcal)
113/475: icorr = icali(freqs)
113/476: icorr -= icorr.max()
113/477: icorr = 10**(icorr/20)
113/478: icorr = clip(icorr,0.45,1.0)
113/479: qcorr = qcali(freqs)
113/480: qcorr -= qcorr.max()
113/481: qcorr = 10**(qcorr/20)
113/482: qcorr = clip(qcorr,0.45,1.0)
113/483: z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
113/484: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
113/485: f_corr,m_corr = s.sweep(450e6,1050e6,1e3)
113/486: plot(f_corr, m_corr)
113/487: plot(f0, m0)
113/488: np.save('/home/muscat/ch6_lo750_corrected',array([f_corr,m_corr]))
113/489: np.save('/home/muscat/ch6_lo750_uncorrected',array([f0,m0]))
113/490:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
113/491:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
113/492: import pcp
113/493:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
113/494:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
113/495:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
    ch.initialise_hardware()
114/1: import pcp
114/2:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
114/3: ch1 = pcp.mux_channel.muxChannel(name[0])
114/4: name = ['phantom','clones','sith','hope','empire','jedi']
114/5: ch1 = pcp.mux_channel.muxChannel(name[0])
114/6: ch2 = pcp.mux_channel.muxChannel(name[1])
114/7: ch3 = pcp.mux_channel.muxChannel(name[2])
114/8: ch4 = pcp.mux_channel.muxChannel(name[3])
114/9: ch5 = pcp.mux_channel.muxChannel(name[4])
114/10: ch6 = pcp.mux_channel.muxChannel(name[5])
114/11:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
114/12: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
114/13: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
114/14: from numpy import *; from matplotlib.pyplot import *; ion()
114/15: from scipy import interpolate
114/16: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
114/17: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
114/18: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
114/19:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
114/20:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.input_atten.att=0
114/21: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
114/22: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
114/23: icali=interpolate.interp1d(fcal,ical)
114/24: qcali=interpolate.interp1d(fcal,qcal)
114/25: icorr = icali(freqs)
114/26: icorr -= icorr.max()
114/27: icorr = 10**(icorr/20)
114/28: icorr = clip(icorr,0.45,1.0)
114/29: qcorr = qcali(freqs)
114/30: qcorr -= qcorr.max()
114/31: qcorr = 10**(qcorr/20)
114/32: qcorr = clip(qcorr,0.45,1.0)
114/33: z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
114/34: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
114/35: import spectrum_analyser
114/36: s=spectrum_analyser.SpectrumAnalyser()
114/37: f,m = s.sweep(700e6,800e6,1e3)
114/38: figure('750_CH6')
114/39: plot(f0, m0)
114/40: plot(f, m)
114/41: ch6.synth_lo.frequency
114/42: ch6.synth_lo.get_frequency
114/43: ch6.synth_lo.getFrequency
114/44: ch6.synth_lo.getFrequency()
114/45: f,m = s.sweep(700e6,800e6,1e3)
114/46: plot(f, m)
114/47: ch6.synth_lo.getFrequency()
114/48: ch6.synth_lo.SynthHDDevice.getHelp()
114/49: ch6.synth_lo.setFrequency(750e6)
114/50: f,m = s.sweep(700e6,800e6,1e3)
114/51: clf()
114/52: plot(f, m)
114/53: ff,mm=load('/home/muscat/ch6_lo750_corrected.npy')
114/54: plot(ff, mm)
114/55: plot(f, m)
114/56: 760-750
114/57: 960-750
114/58: 750-210
114/59: qcorr
114/60: 10**(0.25/20)
114/61: qcorr *= 1.0292
114/62: z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
114/63: qcorr = qcali(freqs)
114/64: qcorr -= qcorr.max()
114/65: qcorr = 10**(qcorr/20)
114/66: qcorr = clip(qcorr,0.45,1.0)
114/67: z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
114/68: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767/1.0292)
114/69: f,m = s.sweep(700e6,800e6,1e3)
114/70: plot(f, m)
114/71: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767/1.0292 + 1j*qcorr*(max(abs(z[1])))/32767)
114/72: f,m = s.sweep(700e6,800e6,1e3)
114/73: plot(f, m)
114/74: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767/1.292 + 1j*qcorr*(max(abs(z[1])))/32767)
114/75: f,m = s.sweep(700e6,800e6,1e3)
114/76: plot(f, m)
114/77: gca().lines.pop(-1);draw()
114/78: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767*1.292 + 1j*qcorr*(max(abs(z[1])))/32767)
114/79: f,m = s.sweep(700e6,800e6,1e3)
114/80: plot(f, m)
114/81: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
114/82: figure('750_CH6')
114/83: figure()
114/84: fb,mb = s.sweep(0e6,250e6,1e3)
114/85: plot(fb.mb)
114/86: plot(fb,mb)
114/87: fb,mbq = s.sweep(0e6,250e6,1e3)
114/88: plot(fb,mbq)
114/89: plot(fb,mbq2)
114/90: fb,mbq2 = s.sweep(0e6,250e6,1e3)
114/91: plot(fb,mbq2)
114/92: f,m = s.sweep(700e6,800e6,1e3)
114/93: f1,m1 = s.sweep(700e6,800e6,1e3)
114/94: figure('750_CH6')
114/95: plot(f1,m1)
114/96:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%name]['serial']))
114/97:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.synthid)]['serial']))
114/98:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
115/1: import pcp
115/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
115/3: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
115/4: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
115/5: from numpy import *; from matplotlib.pyplot import *; ion()
115/6: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
115/7: name = ['phantom','clones','sith','hope','empire','jedi']
115/8: ch1 = pcp.mux_channel.muxChannel(name[0])
115/9: ch2 = pcp.mux_channel.muxChannel(name[1])
115/10: ch3 = pcp.mux_channel.muxChannel(name[2])
115/11: ch4 = pcp.mux_channel.muxChannel(name[3])
115/12: ch5 = pcp.mux_channel.muxChannel(name[4])
115/13: ch6 = pcp.mux_channel.muxChannel(name[5])
115/14:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
115/15:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
115/16: ch2.synth_lo.SynthHDDevice.getHelp()
115/17: ch2.synth_clk.setFrequency(512e6)
115/18: ch2.synth_lo.SynthHDDevice.getHelp()
115/19: ch2.synth_clk.setPLLPowerOn(1)
115/20: ch2.synth_lo.SynthHDDevice.getHelp()
115/21: ch2.synth_clk.setPLLPowerOn(0)
115/22: ch2.synth_clk.setPLLPowerOn(1)
115/23: ch2.synth_lo.SynthHDDevice.getHelp()
115/24:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
115/25: z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
115/26: fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
115/27: fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
115/28: icali=interpolate.interp1d(fcal,ical)
115/29: qcali=interpolate.interp1d(fcal,qcal)
115/30: from scipy import interpolate
115/31: icali=interpolate.interp1d(fcal,ical)
115/32: qcali=interpolate.interp1d(fcal,qcal)
115/33: icorr = icali(freqs)
115/34: icorr -= icorr.max()
115/35: icorr = 10**(icorr/20)
115/36: icorr = clip(icorr,0.45,1.0)
115/37: qcorr = qcali(freqs)
115/38: qcorr -= qcorr.max()
115/39: qcorr = 10**(qcorr/20)
115/40: qcorr = clip(qcorr,0.45,1.0)
115/41: z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
115/42: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
115/43:
def measure_sideband_leakage(rf_freq,lo_freq,span=10000):
    tone = rf_freq
    image = lo - (rf_freq - lo)
    ftone,mtone = s.sweep(tone-span/2.,tone+span/2.,500)
    fimage,mimage = s.sweep(image-span/2.,image+span/2.,500)
    return max(mtone)-max(mimage)
115/44: freqs
115/45: measure_sideband_leakage(freqs[100],750e6)
115/46:
def measure_sideband_leakage(rf_freq,lo_freq,span=10000):
    tone = rf_freq
    image = lo_freq - (rf_freq - lo_freq)
    ftone,mtone = s.sweep(tone-span/2.,tone+span/2.,500)
    fimage,mimage = s.sweep(image-span/2.,image+span/2.,500)
    return max(mtone)-max(mimage)
115/47: measure_sideband_leakage(freqs[100],750e6)
115/48: import spectrum_analyser
115/49: s=spectrum_analyser.SpectrumAnalyser()
115/50: measure_sideband_leakage(freqs[100],750e6)
115/51: s=spectrum_analyser.SpectrumAnalyser()
115/52:
def measure_sideband_leakage(rf_freq,lo_freq,span=10000):
    bb = rf_freq-lo_freq
    tone = bb + lo_freq
    image =-1*bb + lo_freq 
    ftone,mtone = s.sweep(tone-span/2.,tone+span/2.,500)
    fimage,mimage = s.sweep(image-span/2.,image+span/2.,500)
    return max(mtone)-max(mimage)
115/53: measure_sideband_leakage(freqs[100],750e6)
115/54: freqs[100]
115/55: measure_sideband_leakage(freqs[100]+750e6,750e6)
115/56:
def measure_sideband_leakage(rf_freq,lo_freq,span=10000):
    bb = rf_freq-lo_freq
    tone = bb + lo_freq
    image =-1*bb + lo_freq 
    ftone,mtone = s.sweep(tone-span/2.,tone+span/2.,500)
    pause(10)
    fimage,mimage = s.sweep(image-span/2.,image+span/2.,500)
    return max(mtone)-max(mimage)
115/57: measure_sideband_leakage(freqs[100]+750e6,750e6)
115/58: leakage=zeros_like(freqs)
115/59:
for j in range(len(freqs)):
    leakage[j] = measure_sideband_leakage(freqs[j]+750e6,750e6)
    print j,;sts.stdout.flush()
115/60: import sys
115/61:
def measure_sideband_leakage(rf_freq,lo_freq,span=10000):
    bb = rf_freq-lo_freq
    tone = bb + lo_freq
    image =-1*bb + lo_freq 
    ftone,mtone = s.sweep(tone-span/2.,tone+span/2.,500)
    fimage,mimage = s.sweep(image-span/2.,image+span/2.,500)
    return max(mtone)-max(mimage)
115/62:
for j in range(len(freqs)):
    leakage[j] = measure_sideband_leakage(freqs[j]+750e6,750e6)
    print j,;sys.stdout.flush()
115/63: figure('750_CH6')
115/64: plot(freqs,leakage,'o')
115/65: cla()
115/66: plot(freqs,-leakage,'o')
115/67: figure()
115/68: plot(f0,m0)
115/69: ff,mm=load('/home/muscat/ch6_lo750_corrected.npy')
115/70: plot(ff,mm)
115/71: tones = mm[ff==freqs]
115/72: array([mm[ff==k] for k in ff])
115/73: array([mm[ff==k] for k in freqs])
115/74: m=array([mm[argmin(abs(ff-k))] for k in freqs])
115/75: f=array([ff[argmin(abs(ff-k))] for k in freqs])
115/76: plot(f,m,'o')
115/77: f
115/78: f=array([ff[argmin(abs(ff-k))] for k in freqs+750e6])
115/79: m=array([mm[argmin(abs(ff-k))] for k in freqs+750e6])
115/80: plot(f,m,'o')
115/81: m=array([mm[argmin(abs(ff-k))+1] for k in freqs+750e6])
115/82: f=array([ff[argmin(abs(ff-k))+1] for k in freqs+750e6])
115/83: cla()
115/84: plot(ff,mm)
115/85: plot(f,m,'o')
115/86: fim = array([750e6-ff[argmin(abs(ff-k))+1] for k in freqs+750e6])
115/87: mim = array([mm[argmin(abs(ff-k))+1] for k in -1*freqs+750e6])
115/88: fim = array([ff[argmin(abs(ff-k))+1] for k in -1*freqs+750e6])
115/89: plot(fim,mim,'o')
115/90: plot(frews,mm-mim,'o')
115/91: plot(freqs,mm-mim,'o')
115/92: plot(freqs,m-mim,'o')
115/93: plot(freqs,-1*(m-mim),'o')
115/94: plot(freqs,-1*(m-mim),'o')
115/95: #f,m = s.sweep(650e6,850e6,1e3)
115/96:
def measure_sideband_leakage():
    f,m = s.sweep(750e6-260e6,750e6+260e6)
    mtone=array([m[argmin(abs(f-k))+1] for k in freqs+750e6])
    ftone=array([f[argmin(abs(f-k))+1] for k in freqs+750e6])
    mim = array([m[argmin(abs(f-k))+1] for k in -1*freqs+750e6])
    fim = array([f[argmin(abs(f-k))+1] for k in -1*freqs+750e6])
    leakage = mim-mtone
    return freqs+750e6,leakage
115/97: gca().lines.pop(-1);draw()
115/98: gca().lines.pop(-1);draw()
115/99: gca().lines.pop(-1);draw()
115/100: fleak,mleak = measure_sideband_leakage()
115/101:
def measure_sideband_leakage():
    f,m = s.sweep(750e6-260e6,750e6+260e6,1e3)
    mtone=array([m[argmin(abs(f-k))+1] for k in freqs+750e6])
    ftone=array([f[argmin(abs(f-k))+1] for k in freqs+750e6])
    mim = array([m[argmin(abs(f-k))+1] for k in -1*freqs+750e6])
    fim = array([f[argmin(abs(f-k))+1] for k in -1*freqs+750e6])
    leakage = mim-mtone
    return freqs+750e6,leakage
115/102: fleak,mleak = measure_sideband_leakage()
115/103: plot(fleak,mleak,'o')
115/104: plot(fleak-750e6,mleak,'o')
115/105: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
115/106: fleak0,mleak0 = measure_sideband_leakage()
115/107: plot(fleak0-750e6,mleak0,'o')
115/108: cla()
115/109: plot(fleak0-750e6,mleak0,'x',label='no correction')
115/110: i_offsets=linspace(10**(0./20),10**(1./20),5)
115/111: i_offsets
115/112: #z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
115/113: #ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
115/114:
for ioff in i_offsets:
    z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767*ioff + 1j*qcorr*(max(abs(z[1])))/32767)
    fleak,mleak = measure_sideband_leakage()
    plot(fleak,mleak,'o',label='i-%.3fdB'%(20*log10(abs(ioff))))
    pause(0.1)
115/115:
for ioff in i_offsets:
    z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767*ioff)
    fleak,mleak = measure_sideband_leakage()
    plot(fleak,mleak,'o',label='q-%.3fdB'%(20*log10(abs(ioff))))
    pause(0.1)
115/116: legend()
115/117: i_offsets=linspace(10**(05./20),10**(20./20),3)
115/118: i_offsets
115/119: i_offsets=linspace(10**(0.05/20),10**(0.20/20),4)
115/120: i_offsets
115/121:
for ioff in i_offsets:
    z=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr+1j*qcorr)
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767*ioff)
    fleak,mleak = measure_sideband_leakage()
    plot(fleak,mleak,'o',label='q-%.3fdB'%(20*log10(abs(ioff))))
    pause(0.1)
116/1: arange(-0.135,0.05,0.005)
116/2: from scipy import interpolate
116/3: from numpy import *; from matplotlib.pyplot import *; ion()
116/4: arange(-0.135,0.05,0.005)
116/5: degrees(arange(-0.135,0.05,0.005))
115/122: legend()
115/123: figure()
115/124: phi = arange(-0.135,0.05,0.005)
115/125: len phi
115/126: len(phi)
115/127: pwd
115/128: ls
115/129: phase_offsets = arange(-0.135,0.05,0.005)
115/130: plot(fleak0,mleak0,'x',label='no correction')
115/131: #ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767)
115/132:
for phi in phase_offsets:
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_error_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.001e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/6: pwd
116/7: cd
116/8: ls
116/9: f,l=load('ch6_phase_test_-0.135radians.npy')
116/10: l=load('ch6_phase_test_-0.135radians.npy')
116/11: cd /home/sam/rfcal/empire/phase_correction/
116/12: ls
116/13: load('rf_image_rejection_500positive_245MHz_750MHz_-0.135radians.npy')
116/14: figure()
116/15: plot(load('rf_image_rejection_500positive_245MHz_750MHz_-0.135radians.npy'),'o')
116/16: load('rf_image_rejection_500positive_245MHz_750MHz_-0.105radians.npy')
116/17: plot(load('rf_image_rejection_500positive_245MHz_750MHz_-0.125radians.npy'),'o')
116/18: plot(load('rf_image_rejection_500positive_245MHz_750MHz_-0.115radians.npy'),'o')
116/19: plot(load('rf_image_rejection_500positive_245MHz_750MHz_-0.105radians.npy'),'o')
116/20: plot(load('rf_image_rejection_500positive_245MHz_750MHz_-0.05radians.npy'),'o')
116/21: plot(load('rf_image_rejection_500positive_245MHz_750MHz_-0.005radians.npy'),'o')
116/22: ls
116/23: clf()
116/24:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(load('rf_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi),'o')
117/1: phase_offsets = arange(0,2*pi,pi/180)
117/2: from numpy import *; from matplotlib.pyplot import *; ion()
117/3: phase_offsets = arange(0,2*pi,pi/180)
117/4:
for phi in phase_offsets:
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_error_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.001e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
117/5:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(load('/home/sam/rfcal/empire/phase_correction/f_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi),'o')
117/6:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(load('/home/sam/rfcal/empire/phase_correction/rf_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi),'o')
115/133: ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction= icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_error_radians=phi)
115/134:
for phi in phase_offsets:
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.001e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/25: figure()
116/26: ls -lrt
116/27: cd
116/28: ls -lrt
116/29:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:9]):
    plot(load('ch6_phase_test_%0.3fradians.npy'%phi),'o')
116/30: from scipy.signal import savgol_filter
116/31: clf()
116/32:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,11,3),coor=line.get_color())
116/33:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,11,3),color=line.get_color())
116/34:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,11,2),color=line.get_color())
116/35:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,11,5),color=line.get_color())
116/36: cla()
116/37:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,11,2),color=line.get_color())
116/38:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,21,2),color=line.get_color())
116/39: cla()
116/40:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    plot(savgol_filter(l,21,2),color=line.get_color())
116/41: cla()
116/42:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(savgol_filter(l,21,2))
116/43:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(savgol_filter(l,21,4))
116/44:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(savgol_filter(l,21,5))
116/45: cla()
116/46:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(savgol_filter(l,21,5))
116/47:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(10**(l/20))
116/48: cla()
116/49:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:10]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(10**(l/20))
116/50:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:20]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    #line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(10**(l/20))
116/51:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:20]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),21,5))),color=line.get_color())
116/52: cla()
116/53:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),21,5))),color=line.get_color())
116/54:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,5))),color=line.get_color())
116/55: cla()
116/56:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,5))),color=line.get_color())
116/57:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,9))),color=line.get_color())
116/58: cla()
116/59:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,9))),color=line.get_color())
116/60:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,9))),color=line.get_color())
116/61: cla()
116/62:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,9))),color=line.get_color())
116/63:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,3))),color=line.get_color())
116/64:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,2))),color=line.get_color())
116/65: cla()
116/66:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),41,17))),color=line.get_color())
116/67: cla()
116/68:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),int(sqrt(1000)),3))),color=line.get_color())
116/69:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),int(sqrt(1000)),8))),color=line.get_color())
116/70:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),int(sqrt(1000)),12))),color=line.get_color())
116/71:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),int(sqrt(1000)),16))),color=line.get_color())
116/72: cla()
116/73:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),int(sqrt(1000)),15))),color=line.get_color())
116/74: cla()
116/75:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    plot(20*log10(abs(savgol_filter(10**(l/20),9,2))),color=line.get_color())
116/76:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=9
    sn=3
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/77:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=9
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/78:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=5
    sn=2
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/79:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=5
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/80:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=10
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/81:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=10
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/82:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=10
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/83:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=11
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/84: cla()
116/85:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=11
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/86:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/87:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/88: cla()
116/89:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:15][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/90:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=1
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/91:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=2
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/92:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=3
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/93:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=3
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/94:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=7
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/95:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=9
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/96:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=11
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/97:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=15
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/98:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=17
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/99:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/100:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/101: cla()
116/102:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/103:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::2]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/104:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::2]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/105: cla()
116/106:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:21][::2]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/107:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/108: cla()
116/109:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[::3]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/110: ls -lrt
116/111: !ls -l |grep 'Aug 28'
116/112: !ls -l |grep 'Aug 28' |wc -l
116/113:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:23]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/114: cla()
116/115:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:23]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'x')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/116: cla()
116/117:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:23]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'.')
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/118:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:23]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'.',alpha=0.3)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color(),alpha=0.3)
116/119: cla()
116/120:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:23]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'.',alpha=0.3)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color(),alpha=0.3)
116/121:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:23]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'.',alpha=0.3)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/122: !ls -l |grep 'Aug 28' |wc -l
116/123:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:27]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'.',alpha=0.3)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/124: cla()
116/125:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:27]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l,'.',alpha=0.3)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/126: cla()
116/127:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:27]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/128: !ls -l |grep 'Aug 28'
116/129: !ls -l |grep 'Aug 28' |wc -l
116/130:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:31]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/131: cla()
116/132:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:31]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/133: degrees(0.005)
116/134:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(load('rf_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi),'o')
116/135: cla()
116/136:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(load('/home/sam/rfcal/empire/phase_correction/rf_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi),'o')
116/137: cla()
116/138:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:31]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/139: !ls -l |grep 'Aug 28' |wc -l
116/140: cla()
116/141:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:34]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
115/135: phase_offsets
115/136: degrees(phase_offsets)
115/137: print degrees(phase_offsets)
115/138:
#for phi in radians(linspace(-30,30,10)):
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.005e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/139: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.005e6)
115/140: ch6.synth_lo.SynthHDDevice.getHelp()
115/141: ch6.synth_lo.setPower(15)
115/142: ch6.synth_lo.setPower(16)
115/143: ch6.synth_lo.setPower(17)
115/144: ch6.synth_lo.setPower(18)
115/145: ch6.synth_lo.setPower(8)
115/146: ch6.synth_lo.setPower(0)
115/147: ch6.synth_lo.getPower()
115/148: ch6.synth_lo.setPower(-20)
115/149: ch6.synth_lo.SynthHDDevice.getHelp()
115/150: ch6.synth_lo.setPLLPowerOn(0)
115/151: ch6.synth_lo.setPLLPowerOn(1)
115/152: ch6.synth_lo.setPLLPowerOn(1)
115/153: ch6.synth_lo.setPower(-30)
115/154: ch6.synth_lo.setPower(14)
115/155: ch6.synth_lo.setRFAmpOn(1)
115/156: ch6.synth_lo.setRFAmpOn(0)
115/157: ch6.synth_lo.setRFAmpOn(1)
115/158: ch6.synth_lo.setRFMuteOff(1)
115/159: ch6.synth_lo.setRFMuteOff(0)
115/160: ch6.synth_lo.setRFMuteOff(1)
115/161: ch6.synth_lo.setTemperatureCompensationSetting(0)
115/162: ch6.synth_lo.setTemperatureCompensationSetting(1)
115/163: ch6.synth_lo.setTemperatureCompensationSetting(2)
115/164: ch6.synth_lo.setTemperatureCompensationSetting(3)
115/165: ch6.synth_lo.setTemperatureCompensationSetting(4)
115/166: ch6.synth_lo.setTemperatureCompensationSetting(3)
115/167: ch6.synth_lo.SynthHDDevice.getHelp()
115/168: ch6.synth_lo.SynthHDDevice.sendCommand('b0')
115/169: ch6.synth_lo.SynthHDDevice.getHelp()
115/170: ch6.synth_lo.SynthHDDevice.sendCommand('b1')
115/171: ch6.synth_lo.SynthHDDevice.sendCommand('b0')
115/172: ch6.synth_lo.SynthHDDevice.sendCommand('b1')
115/173: ch6.synth_lo.SynthHDDevice.sendCommand('b0')
115/174: ch6.synth_lo.SynthHDDevice.sendCommand('b1')
115/175: ch6.synth_lo.SynthHDDevice.status
115/176: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.005e6)
115/177: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.001e6)
115/178: 3e6/751
115/179: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.004e6)
115/180: figure()
115/181: plot(uf,um)
115/182: plot(uf,us)
115/183: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.008e6)
115/184: plot(uf,us)
115/185: s.resolution_bandwidth()
115/186: s.resolution_bandwidth(1e4)
115/187: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.008e6)
115/188: plot(uf,us)
115/189: s.resolution_bandwidth_auto()
115/190: s.resolution_bandwidth_auto()
115/191: s.resolution_bandwidth_auto(1)
115/192: s.resolution_bandwidth_auto()
115/193: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.008e6)
115/194: plot(uf,us)
115/195: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
115/196: plot(uf,us)
115/197: s.resolution_bandwidth()
115/198: s.resolution_bandwidth(3e4)
115/199: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
115/200: plot(uf,us)
115/201: plot(uf,us)
115/202: plot(uf,us)
115/203: plot(uf,us)
115/204: cla()
115/205:
for phi in radians(linspace(-30,30,61)):
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/142:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    try:
        l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
    except:
        continue
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/143: gca().lines.pop(-1);draw()
116/144: gca().lines.pop(-1);draw()
116/145: gca().lines.pop(-1);draw()
116/146: gca().lines.pop(-1);draw()
116/147: gca().lines.pop(-1);draw()
116/148: gca().lines.pop(-1);draw()
116/149: gca().lines.pop(-1);draw()
116/150:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            time.sleep(1)
    line, = plot(l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/151: gca().lines.pop(-1);draw()
116/152: gca().lines.pop(-1);draw()
116/153: gca().lines.pop(-1);draw()
116/154: gca().lines.pop(-1);draw()
116/155: gca().lines.pop(-1);draw()
116/156: gca().lines.pop(-1);draw()
116/157: gca().lines.pop(-1);draw()
116/158: gca().lines.pop(-1);draw()
116/159: gca().lines.pop(-1);draw()
116/160: gca().lines.pop(-1);draw()
116/161: gca().lines.pop(-1);draw()
116/162:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            time.sleep(1)
    line, = plot(l)
    draw()
    pause(0.1)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/163:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(l)
    draw()
    
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/164:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/165: gca().lines.pop(-1);draw()
116/166: gca().lines.pop(-1);draw()
116/167: gca().lines.pop(-1);draw()
116/168: gca().lines.pop(-1);draw()
116/169: gca().lines.pop(-1);draw()
116/170: gca().lines.pop(-1);draw()
116/171: gca().lines.pop(-1);draw()
116/172: gca().lines.pop(-1);draw()
116/173: gca().lines.pop(-1);draw()
116/174: gca().lines.pop(-1);draw()
116/175: gca().lines.pop(-1);draw()
116/176: gca().lines.pop(-1);draw()
116/177: gca().lines.pop(-1);draw()
116/178: gca().lines.pop(-1);draw()
116/179: gca().lines.pop(-1);draw()
116/180: gca().lines.pop(-1);draw()
116/181: gca().lines.pop(-1);draw()
116/182: gca().lines.pop(-1);draw()
116/183: gca().lines.pop(-1);draw()
116/184: gca().lines.pop(-1);draw()
116/185: gca().lines.pop(-1);draw()
116/186: gca().lines.pop(-1);draw()
116/187: gca().lines.pop(-1);draw()
116/188: gca().lines.pop(-1);draw()
116/189: gca().lines.pop(-1);draw()
116/190: gca().lines.pop(-1);draw()
116/191: gca().lines.pop(-1);draw()
116/192: gca().lines.pop(-1);draw()
116/193: gca().lines.pop(-1);draw()
116/194: gca().lines.pop(-1);draw()
116/195: gca().lines.pop(-1);draw()
116/196: gca().lines.pop(-1);draw()
116/197: gca().lines.pop(-1);draw()
116/198: gca().lines.pop(-1);draw()
116/199: gca().lines.pop(-1);draw()
116/200: gca().lines.pop(-1);draw()
116/201: gca().lines.pop(-1);draw()
116/202: gca().lines.pop(-1);draw()
116/203: gca().lines.pop(-1);draw()
116/204: gca().lines.pop(-1);draw()
116/205: gca().lines.pop(-1);draw()
116/206: gca().lines.pop(-1);draw()
116/207: gca().lines.pop(-1);draw()
116/208: gca().lines.pop(-1);draw()
116/209: gca().lines.pop(-1);draw()
116/210: gca().lines.pop(-1);draw()
116/211: gca().lines.pop(-1);draw()
116/212:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=21
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/213: cla()
116/214:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=31
    sn=4
    plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/215: freqs
116/216: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
116/217: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
116/218:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/219: cla()
116/220:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/221: !ls -l |grep 'test2' |wc -l
116/222: cla()
116/223:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/224: m=zeros((len(freqs,61)))
116/225: m=zeros((len(freqs),61))
116/226: len m[0]
116/227: len(m[0])
116/228: m=zeros((61,len(freqs)))
116/229:
for j in range(61):
    m[j] = load('ch6_phase_test2_%.3fradians.npy'%(linspace(-30,30,61)[j]))
116/230:
for j in range(61):
    try:
        m[j] = load('ch6_phase_test2_%.3fradians.npy'%(linspace(-30,30,61)[j]))
    except:
        pass
116/231: figure()
116/232: imshow(m)
116/233: ls
116/234:
for j in range(61):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(linspace(-30,30,61)[j]))
    except:
        pass
116/235: imshow(m)
116/236: ls -lrt
116/237: m=zeros((61,len(freqs)))
116/238:
for j in range(61):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(linspace(-30,30,61)[j]))
        print j
    except:
        pass
116/239:
for j in range(61):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-30,30,61)[j])))
        print j
    except:
        pass
116/240: imshow(m)
116/241: cla()
116/242: matshow(m)
116/243: colorbar()
116/244: gca().set_aspect('auto')
116/245: figure()
116/246: matshow(m,aspect='auto')
116/247: matshow(m,aspect='auto',vmin=10)
116/248: matshow(m,aspect='auto',vmin=20)
116/249: imshow(m,aspect='auto',vmin=20,interpolation='none')
116/250: figure()
116/251: imshow(m,aspect='auto',vmin=20,interpolation='none')
116/252: from scipy import ndimage
116/253: imshow(ndimage.gaussian_filter(m,1),aspect='auto',vmin=20,interpolation='none')
116/254: imshow(ndimage.gaussian_filter(m,2),aspect='auto',vmin=20,interpolation='none')
116/255:
for j in range(61):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-30,30,61)[j])))
        print j
    except:
        pass
116/256: imshow(ndimage.gaussian_filter(m,2),aspect='auto',vmin=20,interpolation='none')
116/257: imshow(m,aspect='auto',vmin=20,interpolation='none')
116/258: imshow(10**(m/20),aspect='auto',vmin=10**(20/20.),interpolation='none')
116/259: imshow(10**(m/20),aspect='auto',vmin=10**(20/20.),vmax=10**(50/20.),interpolation='none')
116/260: imshow(10**(m/20),aspect='auto',vmin=10**(20/20.),vmax=10**(30/20.),interpolation='none')
116/261: imshow(10**(m/20),aspect='auto',vmin=10**(10/20.),vmax=10**(50/20.),interpolation='none')
116/262: imshow(10**(m/20),aspect='auto',vmin=10**(10/20.),vmax=10**(30/20.),interpolation='none')
116/263:
for j in range(61):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-30,30,61)[j])))
        print j
    except:
        pass
116/264: imshow(10**(m/20),aspect='auto',vmin=10**(10/20.),vmax=10**(30/20.),interpolation='none')
115/206:
for phi in radians(linspace(-45,45,91)):
    if os.path.exists('/home/muscat/ch6_phase_test2_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/207: import os
115/208:
for phi in radians(linspace(-45,45,91)):
    if os.path.exists('/home/muscat/ch6_phase_test2_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr*(max(abs(z[0])))/32767 + 1j*qcorr*(max(abs(z[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/265: m=zeros((91,len(freqs)))
116/266:
for j in range(91):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j])))
        print j
    except:
        pass
116/267: imshow(10**(m/20),aspect='auto',vmin=10**(10/20.),vmax=10**(30/20.),interpolation='none')
116/268: imshow(10**(m/20),aspect='auto',interpolation='none')
116/269: m=zeros((91,len(freqs)))*nan
116/270:
for j in range(91):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j])))
        print j
    except:
        pass
116/271: cla()
116/272: imshow(10**(m/20),aspect='auto',interpolation='none')
116/273: imshow(m,aspect='auto',interpolation='none')
116/274:
for j in range(91):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j])))
        print j
    except:
        pass
116/275: imshow(m,aspect='auto',interpolation='none')
116/276: imshow(ndimage.gaussian_filter(m,2),aspect='auto',vmin=20,interpolation='none')
116/277: imshow(ndimage.gaussian_filter(m,1),aspect='auto',vmin=20,interpolation='none')
116/278: imshow(ndimage.gaussian_filter(m,1),aspect='auto',interpolation='none')
116/279: imshow(ndimage.gaussian_filter(m,0.1),aspect='auto',interpolation='none')
116/280: imshow(ndimage.gaussian_filter(m,0.5),aspect='auto',interpolation='none')
116/281: imshow(ndimage.gaussian_filter1d(m,1),aspect='auto',interpolation='none')
116/282: imshow(ndimage.gaussian_filter(m,1),aspect='auto',interpolation='none')
116/283: imshow(ndimage.gaussian_filter1d(m,1),aspect='auto',interpolation='none')
116/284: imshow(ndimage.gaussian_filter1d(m,3),aspect='auto',interpolation='none')
116/285: imshow(ndimage.gaussian_filter1d(m,5),aspect='auto',interpolation='none')
116/286: imshow(ndimage.gaussian_filter1d(m,15),aspect='auto',interpolation='none')
116/287: imshow(ndimage.gaussian_filter1d(m,5),aspect='auto',interpolation='none')
116/288: 505/2.+990/2.
116/289: 750-505
116/290: 750-909
116/291: 750-990
116/292: 747-990
116/293: 747.5-990
116/294: 747.5-505
116/295: figure()
116/296:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/297:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(load('/home/sam/rfcal/empire/phase_correction/rf_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi))
116/298: gca().lines.pop(-1);draw()
116/299: gca().lines.pop(-1);draw()
116/300: gca().lines.pop(-1);draw()
116/301: gca().lines.pop(-1);draw()
116/302: gca().lines.pop(-1);draw()
116/303: gca().lines.pop(-1);draw()
116/304: gca().lines.pop(-1);draw()
116/305: gca().lines.pop(-1);draw()
116/306: gca().lines.pop(-1);draw()
116/307: gca().lines.pop(-1);draw()
116/308: gca().lines.pop(-1);draw()
116/309: gca().lines.pop(-1);draw()
116/310: gca().lines.pop(-1);draw()
116/311: gca().lines.pop(-1);draw()
116/312: gca().lines.pop(-1);draw()
116/313: gca().lines.pop(-1);draw()
116/314: gca().lines.pop(-1);draw()
116/315: gca().lines.pop(-1);draw()
116/316: gca().lines.pop(-1);draw()
116/317: gca().lines.pop(-1);draw()
116/318: gca().lines.pop(-1);draw()
116/319: gca().lines.pop(-1);draw()
116/320: gca().lines.pop(-1);draw()
116/321: gca().lines.pop(-1);draw()
116/322: gca().lines.pop(-1);draw()
116/323: gca().lines.pop(-1);draw()
116/324: gca().lines.pop(-1);draw()
116/325: gca().lines.pop(-1);draw()
116/326: gca().lines.pop(-1);draw()
116/327: gca().lines.pop(-1);draw()
116/328: gca().lines.pop(-1);draw()
116/329: gca().lines.pop(-1);draw()
116/330: gca().lines.pop(-1);draw()
116/331: gca().lines.pop(-1);draw()
116/332: gca().lines.pop(-1);draw()
116/333: gca().lines.pop(-1);draw()
116/334: gca().lines.pop(-1);draw()
116/335:
for i,phi in enumerate(arange(-0.135,0.05,0.005)):
    plot(freqs,load('/home/sam/rfcal/empire/phase_correction/rf_image_rejection_500positive_245MHz_750MHz_%0.3fradians.npy'%phi))
116/336:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    try:
        l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
    except:
        continue
    line, = plot(freqs,l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/337: cla()
116/338:
for i,phi in enumerate(radians(linspace(-30,30,61))):
    draw()
    while True:
        try:
            l=load('ch6_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    #line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))))
116/339:
for i,phi in enumerate(arange(-0.135,0.05,0.005)[:34]):
    l=load('ch6_phase_test_%0.3fradians.npy'%phi)
    line, = plot(freqs,l)
    #plot(savgol_filter(l,21,2),color=line.get_color())
    #sw=21
    #sn=4
    #plot(20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/340:
for j in range(91):
    try:
        m[j] = savgol_filter(load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j]))),21,2)
        print j
    except:
        pass
116/341: imshow(m,aspect='auto',interpolation='none')
116/342: imshow(ndimage.gaussian_filter(m,1),aspect='auto',interpolation='none')
115/209: fcal1,qcal1 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch1_q.npy')
115/210: fcal1,ical1 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch1_i.npy')
115/211: icali1=interpolate.interp1d(fcal1,ical1)
115/212: qcali1=interpolate.interp1d(fcal1,qcal1)
115/213: icorr1 = icali1(freqs)
115/214: icorr1 -= icorr1.max()
115/215: icorr1 = 10**(icorr1/20)
115/216: icorr1 = clip(icorr1,0.45,1.0)
115/217: qcorr1 = qcali1(freqs)
115/218: qcorr1 -= qcorr1.max()
115/219: qcorr1 = 10**(qcorr1/20)
115/220: qcorr1 = clip(qcorr1,0.45,1.0)
115/221: z1=ch1.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr1+1j*qcorr1)
115/222:
for phi in radians(linspace(-10,10,11)):
    if os.path.exists('/home/muscat/ch1_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/343: figure()
116/344:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=l.get_color())
116/345:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/346:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(freqs,l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/347: cla()
116/348:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(freqs,l)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/349: cla()
116/350:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(freqs,l,alpha=0.3)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color())
116/351:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(freqs,l,alpha=0.3)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color(),label=degrees(phi))
116/352: legend()
116/353: cla()
116/354:
for i,phi in enumerate(radians(linspace(-10,10,11))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(freqs,l,alpha=0.3)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color(),label='%.3f degrees'%(degrees(phi)))
116/355: legend()
115/223:
for phi in radians(linspace(-3,3,1+6*4)):
    if os.path.exists('/home/muscat/ch1_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/224:
for phi in radians(linspace(-3,3,1+6*4)):
    print '************************'
    print phi
    print '************************'
    if os.path.exists('/home/muscat/ch1_phase_test2_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/356: cla()
116/357:
for i,phi in enumerate(radians(linspace(-3,3,1+6*4))):
    draw()
    while True:
        try:
            l=load('ch1_phase_test2_%0.3fradians.npy'%phi)
            break
        except KeyboardInterrupt:
            raise Exception
        except:
            pause(1)
    line, = plot(freqs,l,alpha=0.3)
    sw=31
    sn=4
    plot(freqs,20*log10(abs(savgol_filter(10**(l/20),sw,sn))),color=line.get_color(),label='%.3f degrees'%(degrees(phi)))
116/358: legend()
116/359: m1=zeros((1+6*4,len(freqs)))*nan
116/360:
for j in range(1+6*4):
    try:
        m[j] = savgol_filter(load('ch1_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j]))),21,2)
        print j
    except:
        pass
116/361: figure()
116/362: imshow(m,aspect='auto',interpolation='none')
116/363: cla()
116/364: imshow(m1,aspect='auto',interpolation='none')
116/365:
for j in range(91):
    try:
        m[j] = savgol_filter(load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j]))),21,2)
        print j
    except:
        pass
116/366:
for j in range(1+6*4):
    try:
        m1[j] = savgol_filter(load('ch1_phase_test2_%0.3fradians.npy'%(radians(linspace(-3,3,1+4*6)[j]))),21,2)
        print j
    except:
        pass
116/367: imshow(m1,aspect='auto',interpolation='none')
115/225:
for phi in radians(linspace(-6,6,1+12*4)):
    print '************************'
    print phi
    print '************************'
    if os.path.exists('/home/muscat/ch1_phase_test2_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/226:
for phi in radians(linspace(-6,6,1+12*4)):
    print '************************'
    print phi
    print '************************'
    if os.path.exists('/home/muscat/ch1_phase_test2_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1_phase_test2_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/368: m1=zeros((1+6*4,len(freqs)))*nan
116/369: m1=zeros((1+12*4,len(freqs)))*nan
116/370:
for j in range(1+12*4):
    try:
        m1[j] = savgol_filter(load('ch1_phase_test2_%0.3fradians.npy'%(radians(linspace(-6,6,1+4*12)[j]))),21,2)
        print j
    except:
        pass
116/371: imshow(m1,aspect='auto',interpolation='none')
116/372: clf()
116/373: figure()
116/374: imshow(m1,aspect='auto',interpolation='none')
116/375:
for j in range(1+12*4):
    try:
        m1[j] = load('ch1_phase_test2_%0.3fradians.npy'%(radians(linspace(-6,6,1+4*12)[j])))
        print j
    except:
        pass
116/376: imshow(m1,aspect='auto',interpolation='none')
116/377: freqs[962]
116/378: figure()
116/379: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none')
116/380:
for j in range(1+12*4):
    try:
        m1[j] = load('ch1_phase_test2_%0.3fradians.npy'%(radians(linspace(-6,6,1+4*12)[j])))
        print j
    except:
        pass
116/381: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none')
116/382: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-6,6])
116/383: imshow(ndimage.gaussian_filter(m,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-45,45])
116/384: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-6,6])
115/227: fcal2,ical2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
115/228: fcal2,qcal2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
115/229: icali2=interpolate.interp1d(fcal2,ical2)
115/230: qcali2=interpolate.interp1d(fcal2,qcal2)
115/231: icorr2 = icali2(freqs)
115/232: icorr2 -= icorr2.max()
115/233: icorr2 = 10**(icorr2/20)
115/234: icorr2 = clip(icorr2,0.45,1.0)
115/235: qcorr2 = qcali2(freqs)
115/236: qcorr1 -= qcorr1.max()
115/237: qcorr1 = qcali1(freqs)
115/238: qcorr1 -= qcorr1.max()
115/239: qcorr1 = 10**(qcorr1/20)
115/240: qcorr1 = clip(qcorr1,0.45,1.0)
115/241: qcorr2 = qcali2(freqs)
115/242: qcorr2 -= qcorr2.max()
115/243: qcorr2 = 10**(qcorr2/20)
115/244: qcorr2 = clip(qcorr2,0.45,1.0)
115/245: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
115/246:
for phi in radians(linspace(-10,10,11)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/247: ch2.synth_lo.SynthHDDevice.getHelp()
115/248: ch2.synth_lo.setFrequency(750e6)
115/249: ch2.synth_lo.SynthHDDevice.getHelp()
115/250:
for phi in radians(linspace(-10,10,11)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/251:
for phi in radians(linspace(-10,10,11)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
115/252: ch2.input_atten.att
115/253: ch2.input_atten.att=0
115/254: ch1.input_atten.att=0
115/255: ch6.input_atten.att
115/256: ch5.input_atten.att
115/257: ch4.input_atten.att
115/258: ch3.input_atten.att
115/259: ch2.input_atten.att
115/260: ch1.input_atten.att
115/261: ls -lrt
115/262: rm /home/muscat/ch2_phase_test_-0.1*
115/263:
for phi in radians(linspace(-10,10,11)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/385: m2=zeros((11,len(freqs)))*nan
116/386:
for j in range(11):
    try:
        m1[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,11)[j])))
        print j
    except:
        pass
116/387: figure()
116/388: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-10,10])
116/389:
for j in range(11):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,11)[j])))
        print j
    except:
        pass
116/390: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-10,10])
116/391:
for j in range(1+12*4):
    try:
        m1[j] = load('ch1_phase_test2_%0.3fradians.npy'%(radians(linspace(-6,6,1+4*12)[j])))
        print j
    except:
        pass
115/264:
for phi in radians(linspace(-12,12,25)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/392: m2=zeros((25,len(freqs)))*nan
116/393:
for j in range(25):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-12,12,25)[j])))
        print j
    except:
        pass
116/394: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-10,10])
116/395: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-12,12])
115/265:
for phi in radians(linspace(-15,15,61)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/396: m2=zeros((61,len(freqs)))*nan
116/397:
for j in range(25):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-15,15,61)[j])))
        print j
    except:
        pass
116/398: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-12,12])
116/399:
for j in range(25):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-15,15,61)[j])))
        print j
    except:
        pass
116/400:
for j in range(61):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-15,15,61)[j])))
        print j
    except:
        pass
116/401:
for j in range(61):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-15,15,61)[j])))
        print j
    except:
        pass
116/402: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-15,15])
116/403: cla()
116/404: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-15,15])
116/405: title('ch 2')
116/406: figure()
116/407: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-6,6])
116/408: imshow(ndimage.gaussian_filter(m1,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-6,6])
116/409: title('ch 1')
116/410: cla()
116/411: imshow(ndimage.gaussian_filter(m,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-45,45])
116/412: title('ch 6')
116/413:
for j in range(61):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-15,15,61)[j])))
        print j
    except:
        pass
116/414: figure(10)
116/415: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-15,15])
116/416:
for j in range(61):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-15,15,61)[j])))
        print j
    except:
        pass
116/417: imshow(ndimage.gaussian_filter(m2,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-15,15])
116/418: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-15,15])
115/266: figure()
115/267: plot(freqs,qcorr1)
116/419: axvline(237.5e6)
116/420: axvline(-237.5e6)
115/268:
for phi in radians(linspace(-20,20,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/421: m2=zeros((81,len(freqs)))*nan
116/422:
for j in range(81):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-20,20,81)[j])))
        print j
    except:
        pass
116/423: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-20,20])
116/424: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20])
116/425:
for j in range(81):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-20,20,81)[j])))
        print j
    except:
        pass
116/426: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20])
116/427: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20],vmax=50)
116/428: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20],vmin=10,vmax=50)
116/429:
for j in range(81):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-20,20,81)[j])))
        print j
    except:
        pass
116/430: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20],vmin=10,vmax=50)
116/431: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20],vmin=30,vmax=50)
116/432:
for j in range(81):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-20,20,81)[j])))
        print j
    except:
        pass
116/433: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),20,-20],vmin=30,vmax=50)
115/269:
for phi in radians(linspace(-22.5,22.5,91)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/434: figure(1)
116/435: imshow(ndimage.gaussian_filter1d(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/436: imshow(ndimage.gaussian_filter1d(m1,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/437: imshow(ndimage.gaussian_filter1d(m1,3),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/438: imshow(ndimage.gaussian_filter(m1,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/439: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/440: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=25,vmax=50)
116/441: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/442: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=35,vmax=50)
116/443: imshow(ndimage.gaussian_filter(m1,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),6,-6],vmin=30,vmax=50)
116/444: title('ch 1')
116/445: figure(2)
116/446: m2=zeros((91,len(freqs)))*nan
116/447:
for j in range(81):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-22.5,22.5,91)[j])))
        print j
    except:
        pass
116/448: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),22.5,-22.5],vmin=30,vmax=50)
116/449: m2=zeros((91,len(freqs)))*nan
116/450:
for j in range(91):
    try:
        m2[j] = load('ch2_phase_test_%0.3fradians.npy'%(radians(linspace(-22.5,22.5,91)[j])))
        print j
    except:
        pass
116/451: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),22.5,-22.5],vmin=30,vmax=50)
116/452: title('ch 2')
116/453: imshow(ndimage.gaussian_filter1d(m2,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),22.5,-22.5],vmin=25,vmax=50)
115/270: fcal3,qcal3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_q.npy')
115/271: fcal3,ical3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_i.npy')
115/272: icali3=interpolate.interp1d(fcal3,ical3)
115/273: qcali3=interpolate.interp1d(fcal3,qcal3)
115/274: icorr3 = icali3(freqs)
115/275: icorr3 -= icorr3.max()
115/276: icorr3 = 10**(icorr3/20)
115/277: icorr3 = clip(icorr3,0.45,1.0)
115/278: qcorr3 = qcali3(freqs)
115/279: qcorr3 -= qcorr3.max()
115/280: qcorr3 = 10**(qcorr3/20)
115/281: qcorr3 = clip(qcorr3,0.45,1.0)
115/282: z3=ch3.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr3+1j*qcorr3)
115/283:
for phi in radians(linspace(-10,10,11)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr3*(max(abs(z3[0])))/32767 + 1j*qcorr3*(max(abs(z3[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/454: m3=zeros((11,len(freqs)))*nan
116/455:
for j in range(11):
    try:
        m3[j] = load('ch3_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,11)[j])))
        print j
    except:
        pass
116/456: figure(3)
116/457: imshow(ndimage.gaussian_filter1d(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
115/284:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr3*(max(abs(z3[0])))/32767 + 1j*qcorr3*(max(abs(z3[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/458: m3=zeros((21,len(freqs)))*nan
116/459:
for j in range(21):
    try:
        m3[j] = load('ch3_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
116/460: imshow(ndimage.gaussian_filter1d(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/461: imshow(ndimage.gaussian_filter1d(m3,03),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/462: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/463: imshow(ndimage.gaussian_filter(m3,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
115/285:
for phi in radians(linspace(-10,10,41)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr3*(max(abs(z3[0])))/32767 + 1j*qcorr3*(max(abs(z3[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/464: m3=zeros((41,len(freqs)))*nan
116/465:
for j in range(41):
    try:
        m3[j] = load('ch3_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,41)[j])))
        print j
    except:
        pass
116/466: imshow(ndimage.gaussian_filter(m3,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/467: cla()
116/468: imshow(ndimage.gaussian_filter(m3,1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/469: m3=zeros((41,len(freqs)))*nan
116/470:
for j in range(41):
    try:
        m3[j] = load('ch3_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,41)[j])))
        print j
    except:
        pass
116/471: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/472:
for j in range(41):
    try:
        m3[j] = load('ch3_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,41)[j])))
        print j
    except:
        pass
116/473: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
118/1: import os
118/2: import sys
118/3: import spectrum_analyser
118/4: s=spectrum_analyser.SpectrumAnalyser()
118/5: from numpy import *; from matplotlib.pyplot import *; ion()
118/6: from scipy import interpolate
118/7: import pcp
119/1: import pcp
120/1: import pcp
120/2: pcp.SYNTH_LIST
120/3: pcp.synthesizer.SYNTH_HW_DICT
120/4: pcp.synthesizer.SYNTH_HW_DICT['windfreaktech_synthhd']
120/5: w=pcp.synthesizer.SYNTH_HW_DICT['windfreaktech_synthhd']
120/6: w.getHelp()
120/7: name = ['phantom','clones','sith','hope','empire','jedi']
120/8: ch1 = pcp.mux_channel.muxChannel(name[0])
120/9: ch2 = pcp.mux_channel.muxChannel(name[1])
120/10: ch3 = pcp.mux_channel.muxChannel(name[2])
120/11: ch4
120/12: ch4 = pcp.mux_channel.muxChannel(name[3])
120/13: ch5 = pcp.mux_channel.muxChannel(name[4])
120/14: ch6 = pcp.mux_channel.muxChannel(name[5])
120/15:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
120/16:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
120/17: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
120/18: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
120/19: from scipy import interpolate
120/20: from numpy import *; from matplotlib.pyplot import *; ion()
120/21: import os,sys,spectrum_analyser
120/22: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
120/23:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
120/24:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
120/25:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.synth_lo.setPLLPowerOn(0)
    ch.synth_lo.setPLLPowerOn(1)
120/26: %hist
120/27: %hist?
120/28: %history?
120/29: %history ~
120/30: %history ~1
120/31: %history ~2
120/32: %history ~2/*
120/33: %history?
120/34: %history ''~2/*''
120/35: %history '~2'
120/36: %history?
120/37: %history?
120/38: %history 1
120/39: %history ~1/1 - 1
120/40: %history ~2/1 - 1
120/41: %history ~3/1 - 1
120/42: %history?
120/43: %history ~3/1-~2/1
120/44: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
120/45: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
120/46: icali3=interpolate.interp1d(fcal3,ical3)
120/47: fcal3,ical3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_i.npy')
120/48: fcal3,qcal3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_q.npy')
120/49: icali3=interpolate.interp1d(fcal3,ical3)
120/50: qcali3=interpolate.interp1d(fcal3,qcal3)
120/51: icorr3 = icali3(freqs)
120/52: icorr3 -= icorr3.max()
120/53: icorr3 = 10**(icorr3/20)
120/54: icorr3 = clip(icorr3,0.45,1.0)
120/55: icorr3 = icali3(freqs); icorr3 -= icorr3.max(); icorr3 = 10**(icorr3/20); icorr3 = clip(icorr3,0.45,1.0)
120/56: qcorr3 = qcali3(freqs); qcorr3 -= qcorr3.max(); qcorr3 = 10**(qcorr3/20); qcorr3 = clip(qcorr3,0.45,1.0)
120/57: z3=ch3.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr3+1j*qcorr3)
120/58: ls
120/59: ls ~/
116/474: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
121/1: %history -f ipython_history
121/2: %history -f ipython_history_280819
122/1: %history -f ipython_history
123/1: %history -g -f ipython_history
120/60: s
120/61: import spectrum_analyser
120/62: s=spectrum_analyser.SpectrumAnalyser()
120/63:
for phi in radians(linspace(-10,10,41)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr3*(max(abs(z3[0])))/32767 + 1j*qcorr3*(max(abs(z3[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/475:
for j in range(41):
    try:
        m3[j] = load('ch3_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,41)[j])))
        print j
    except:
        pass
116/476: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
120/64:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr4*(max(abs(z4[0])))/32767 + 1j*qcorr4*(max(abs(z4[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
120/65: fcal4,qcal4 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch4_q.npy')
120/66: fcal4,ical4 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch4_i.npy')
120/67: icali4=interpolate.interp1d(fcal4,ical4)
120/68: qcali4=interpolate.interp1d(fcal4,qcal4)
120/69: icorr4 = icali4(freqs); icorr4 -= icorr4.max(); icorr4 = 10**(icorr4/20); icorr4 = clip(icorr4,0.45,1.0)
120/70: qcorr4 = qcali4(freqs); qcorr4 -= qcorr4.max(); qcorr4 = 10**(qcorr4/20); qcorr4 = clip(qcorr4,0.45,1.0)
120/71: z4=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr4+1j*qcorr4)
120/72:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr4*(max(abs(z4[0])))/32767 + 1j*qcorr4*(max(abs(z4[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/477: m4=zeros((21,len(freqs)))*nan
116/478:
for j in range(41):
    try:
        m4[j] = load('ch4_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
116/479: figure(4)
116/480: imshow(ndimage.gaussian_filter(m4,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
116/481: imshow(ndimage.gaussian_filter(m4,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
120/73: fcal5,ical5 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_i.npy')
120/74: fcal5,qcal5 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_q.npy')
120/75: icali5=interpolate.interp1d(fcal5,ical5)
120/76: qcali5=interpolate.interp1d(fcal5,qcal5)
120/77: icorr5 = icali5(freqs); icorr5 -= icorr5.max(); icorr5 = 10**(icorr5/20); icorr5 = clip(icorr5,0.45,1.0)
120/78: qcorr5 = qcali5(freqs); qcorr5 -= qcorr5.max(); qcorr5 = 10**(qcorr5/20); qcorr5 = clip(qcorr5,0.45,1.0)
120/79: z5=ch5.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr5+1j*qcorr5)
120/80: ch5.input_atten.att
120/81:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch5_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr5*(max(abs(z5[0])))/32767 + 1j*qcorr5*(max(abs(z5[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch5_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
116/482: title('ch 4')
116/483: xlim(-250e6,250e6)
116/484: title('ch 3')
116/485: m5=zeros((21,len(freqs)))*nan
116/486:
for j in range(21):
    try:
        m5[j] = load('ch5_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
116/487: figure(5)
116/488: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
116/489: title('ch 5')
116/490: m=zeros((91,len(freqs)))*nan
116/491:
for j in range(91):
    try:
        m[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j])))
        print j
    except:
        pass
116/492: figure(6)
116/493: cla()
116/494: m6=zeros((91,len(freqs)))*nan
116/495:
for j in range(91):
    try:
        m6[j] = load('ch6_phase_test2_%0.3fradians.npy'%(radians(linspace(-45,45,91)[j])))
        print j
    except:
        pass
116/496: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),-45,45])
116/497: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),45,-45])
116/498: cla()
116/499: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),45,-45])
116/500:
for j in range(21):
    try:
        m5[j] = load('ch5_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
116/501: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
120/82:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
120/83: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/84: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/85: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/86: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/87: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/88: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/89: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/90: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/91: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
120/92: ch3.roach_iface.initialise_fpga(force_reupload=True)
120/93: ch6.initialise_hardware()
120/94: ch6.synth_lo.SynthHDDevice.getHelp()
124/1: import pcp
125/1: import pcp
125/2: ch6.initialise_hardware()
125/3: ch6 = pcp.mux_channel.muxChannel(name[5])
125/4: name = ['phantom','clones','sith','hope','empire','jedi']
125/5: ch6 = pcp.mux_channel.muxChannel(name[5])
125/6: ch3 = pcp.mux_channel.muxChannel(name[2])
125/7: ch3.roach_iface.initialise_fpga(force_reupload=True)
125/8: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
125/9: ch3.roach_iface.initialise_fpga(force_reupload=True)
125/10: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
125/11: from numpy import *; from matplotlib.pyplot import *; ion()
125/12: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
125/13: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
125/14: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
125/15: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
125/16: ch6.synth_lo
125/17: ch6.initialise_hardware()
125/18: ch6.input_atten.att = 0
125/19: ch6.synth_lo.frequency = 750e6
125/20: ch6.initialise_hardware()
125/21: ch6 = pcp.mux_channel.muxChannel(name[5])
125/22: ch6.initialise_hardware()
126/1: import pcp
127/1: import pcp
128/1: import pcp
129/1: import pcp
130/1: import pcp
131/1: import pcp
131/2: import pcp
132/1: import pcp
132/2: name = ['phantom','clones','sith','hope','empire','jedi']
132/3: from numpy import *; from matplotlib.pyplot import *; ion()
132/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
132/5: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
132/6: ch3 = pcp.mux_channel.muxChannel(name[2])
132/7: ch6 = pcp.mux_channel.muxChannel(name[5])
132/8: ch3.roach_iface.initialise_fpga(force_reupload=True)
132/9: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
132/10: ch6.initialise_hardware()
132/11: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
132/12: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT
132/13: ch6.synth_lo.setPLLPowerOn(0)
132/14: ch6.synth_lo.setPLLPowerOn(1)
132/15: ch6.synth_clk.setPLLPowerOn(0)
132/16: ch6.synth_clk.setPLLPowerOn(1)
132/17: ch3.roach_iface.initialise_fpga(force_reupload=True)
132/18: ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
132/19: ch6.synth_lo.frequency = 750e6
133/1: import pcp
134/1: import pcp
135/1: import pcp
136/1: import pcp
137/1: import pcp
137/2: ch1 = pcp.mux_channel.muxChannel(name[0])
137/3: name = ['phantom','clones','sith','hope','empire','jedi']
137/4: ch1 = pcp.mux_channel.muxChannel(name[0])
137/5: ch2 = pcp.mux_channel.muxChannel(name[1])
137/6: ch3 = pcp.mux_channel.muxChannel(name[2])
137/7: ch4 = pcp.mux_channel.muxChannel(name[3])
137/8: ch5 = pcp.mux_channel.muxChannel(name[4])
137/9: ch6 = pcp.mux_channel.muxChannel(name[5])
137/10: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('929')
137/11: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
137/12: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1052')
137/13: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
137/14: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
137/15: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
137/16: ch3.initialise_hardware()
137/17: ch3.input_atten.att = 0
137/18: ch3.synth_lo.setPLLPowerOn(0)
137/19: ch3.synth_lo.setPLLPowerOn(1)
137/20: ch3.synth_clk.setPLLPowerOn(0)
137/21: ch3.synth_clk.setPLLPowerOn(1)
137/22:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
137/23:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.initialise_hardware()
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
137/24:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.roach_iface.initialise_fpga(force_reupload=True)
137/25: from numpy import *; from matplotlib.pyplot import *; ion()
137/26: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
137/27: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
137/28:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
137/29: ch3
137/30: ch6.roa
137/31: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
137/32: ch6.roach_iface.initialise_fpga(force_reupload=True)
137/33: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
138/1: import pcp
138/2: ch1 = pcp.mux_channel.muxChannel(name[0])
138/3: name = ['phantom','clones','sith','hope','empire','jedi']
138/4: ch1 = pcp.mux_channel.muxChannel(name[0])
138/5: ch2 = pcp.mux_channel.muxChannel(name[1])
138/6: ch3 = pcp.mux_channel.muxChannel(name[2])
138/7: ch4 = pcp.mux_channel.muxChannel(name[3])
138/8: ch5 = pcp.mux_channel.muxChannel(name[4])
138/9: ch6 = pcp.mux_channel.muxChannel(name[5])
138/10: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
138/11: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
138/12: from numpy import *; from matplotlib.pyplot import *; ion()
138/13: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
138/14:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.roach_iface.initialise_fpga(force_reupload=True)
138/15: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
138/16: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
138/17: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
138/18: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1052')
138/19: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
138/20: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('929')
138/21:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.roach_iface.initialise_fpga(force_reupload=True)
138/22:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
138/23:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.initialise_hardware()
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
138/24: ch5.roach_iface.initialise_fpga(force_reupload=True)
138/25: ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
139/1: import pcp
139/2: ls
139/3: cd
140/1: import pcp
141/1: import pcp
142/1: import pcp
142/2: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
142/3: name = ['phantom','clones','sith','hope','empire','jedi']
142/4: ch6 = pcp.mux_channel.muxChannel(name[5])
142/5: ch6.initialise_hardware()
142/6: ch6.input_atten.att = 0
142/7: ch6.synth_lo.frequency = 750e6
142/8: from numpy import *; from matplotlib.pyplot import *; ion()
142/9: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
142/10: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
142/11: ch6.roach_iface.initialise_fpga(force_reupload=True)
142/12: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
143/1: import pcp
143/2: name = ['phantom','clones','sith','hope','empire','jedi']
143/3: ch6 = pcp.mux_channel.muxChannel(name[5])
143/4: from numpy import *; from matplotlib.pyplot import *; ion()
143/5: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
143/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
143/7: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
143/8: ch6.initialise_hardware()
143/9: ch6.synth_lo.frequency = 750e6
143/10: ch6.input_atten.att
143/11: ch6.input_atten.att = 0
143/12: ch6.
143/13: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
143/14: ch6.synth_lo.frequency = 750e6
143/15: ch6.roach_iface.initialise_fpga(force_reupload=True)
143/16: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
143/17: ch6.synth_lo.getHelp()
143/18: ch6.synth_clk.getHelp()
143/19: ch6.synth_lo.getPower()
143/20: ch6.synth_lo.setPower(14.5)
143/21: ch6.synth_lo.getPower()
143/22: ch6.synth_lo.setPower(15)
143/23: ch6.synth_lo.getPower()
143/24: ch6.synth_lo.setPower(14)
143/25: ch6.synth_lo.setPower(15)
143/26: ch6.synth_lo.setPower(15.2)
143/27: ch6.synth_lo.setPower(15.3)
143/28: ch6.synth_lo.setPower(14)
143/29: ch6.synth_lo.setFrequency(700e6)
143/30: ch6.synth_lo.setFrequency(650e6)
143/31: ch6.synth_lo.setFrequency(700e6)
143/32: ch6.synth_lo.setFrequency(800e6)
143/33: ch6.synth_lo.setFrequency(900e6)
143/34: ch6.synth_lo.setFrequency(750e6)
143/35: ch6.synth_lo.setFrequency(752e6)
143/36: ch6.synth_lo.setFrequency(750e6)
144/1: import pcp
144/2: ch6 = pcp.mux_channel.muxChannel(name[5])
144/3: name = ['phantom','clones','sith','hope','empire','jedi']
144/4: from numpy import *; from matplotlib.pyplot import *; ion()
144/5: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
144/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
144/7: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
144/8: ch6 = pcp.mux_channel.muxChannel(name[5])
144/9: ch6.roach_iface.initialise_fpga(force_reupload=True)
144/10: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
144/11: ch6.synth_lo.getPower()
144/12: ch6.initialise_hardware()
144/13: ch6.synth_lo.getHelp()
144/14: ch6.synth_lo.SynthHDDevice.getHelp()
144/15: ch6.input_atten.att = 0
144/16: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
144/17: ch6.synth_lo.getPower()
144/18: ch6.synth_lo.getPower(15)
144/19: ch6.synth_lo.setPower(15)
144/20: ch6.synth_lo.setPower(16)
144/21: ch6.synth_lo.getPower(15)
144/22: ch6.synth_lo.getPower()
144/23: ch6.synth_lo.setPower(17)
144/24: ch6.synth_lo.setFrequency(800e6)
144/25: ch6.synth_lo.setFrequency(750e6)
144/26: ch6.synth_lo.setFrequency(751e6)
144/27: ch6.synth_lo.setFrequency(750e6)
144/28: ch6.synth_lo.setPower(14)
144/29: ch6.synth_lo.setPower(15)
144/30: ch6.synth_lo.setPower(15.5)
144/31: ch6.synth_lo.setFrequency(500e6)
144/32: ch6.synth_lo.setFrequency(300e6)
144/33: ch6.synth_lo.setFrequency(750e6)
144/34: ch6.synth_lo.getHelp()
144/35: ch6.synth_lo.SynthHDDevice.getHelp()
144/36: ch6.synth_lo.setPower(16.0)
144/37: ch6.synth_lo.setPower(15.75)
144/38: ch6.synth_lo.SynthHDDevice.getHelp()
144/39: ch6.synth_lo.SynthHDDevice.getHelp()
144/40: ch6.initialise_hardware()
144/41: reload(pcp)
145/1: import pcp
145/2: from numpy import *; from matplotlib.pyplot import *; ion()
145/3: name
145/4: name = ['phantom','clones','sith','hope','empire','jedi']
145/5: ch6 = pcp.mux_channel.muxChannel(name[5])
145/6: ch6.initialise_hardware()
145/7: ch6.input_atten.att = 0
145/8: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
145/9: ch6.roach_iface.initialise_fpga(force_reupload=True)
145/10: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
145/11: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
145/12: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
145/13: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
145/14: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
145/15: ch6.synth_lo.frequency
145/16: ch6.synth_lo.frequency = 750e6
145/17: freqs
145/18: clear
145/19: ch6.input_atten.att =0
145/20: fcal6,qcal6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
145/21: icali6=interpolate.interp1d(fcal6,ical6)
145/22: from scipy import interpolate
145/23: icali6=interpolate.interp1d(fcal6,ical6)
145/24: fcal6,ical6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
145/25: icali6=interpolate.interp1d(fcal6,ical6)
145/26: qcali6=interpolate.interp1d(fcal6,qcal6)
145/27: icorr6 = icali6(freqs); icorr6 -= icorr6.max(); icorr6 = 10**(icorr6/20); icorr6 = clip(icorr6,0.45,1.0)
145/28: qcorr6 = qcali6(freqs); qcorr6 -= qcorr6.max(); qcorr6 = 10**(qcorr6/20); qcorr6 = clip(qcorr6,0.45,1.0)
145/29: z6=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr6+1j*qcorr6)
145/30:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
145/31: import od
145/32: import os
145/33: import spectrum_analyser
145/34: s=spectrum_analyser.SpectrumAnalyser()
145/35: import sys
145/36: figure(6)
145/37:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
145/38: m6=zeros((21,len(freqs)))*nan
145/39:
for j in range(21):
    try:
        m6[j] = load('ch6-2186_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
145/40: figure(6)
145/41: figure()
145/42: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
145/43: from scipy import ndimage
145/44: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
145/45: m6=zeros((21,len(freqs)))*nan
145/46:
for j in range(21):
    try:
        m6[j] = load('ch6-2186_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
145/47:
for j in range(21):
    try:
        m6[j] = load('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
145/48: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
145/49: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
145/50: reload(pcp)
145/51: ch6.input_atten.att = 0
146/1: import pcp
147/1: import pcp
148/1: import pcp
149/1: import pcp
149/2: name = ['phantom','clones','sith','hope','empire','jedi']
149/3: from numpy import *; from matplotlib.pyplot import *; ion()
149/4: from scipy import ndimage
149/5: from scipy import interpolate
149/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
149/7: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
149/8: ch6 = pcp.mux_channel.muxChannel(name[5])
149/9: ch6.initialise_hardware()
149/10: ch6.input_atten.att = 0
149/11: ch6.synth_lo.frequency = 750e6
149/12: ch6.roach_iface.initialise_fpga(force_reupload=True)
149/13: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1054')
149/14: ch6.synth_lo.SynthHDDevice.getHelp()
149/15: ch6.synth_lo.setPLLPowerOn(0)
149/16: ch6.synth_lo.setPLLPowerOn(1)
149/17: ch6.synth_lo.SynthHDDevice.getHelp()
149/18: ch6.roach_iface.initialise_fpga(force_reupload=True)
149/19: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
149/20: import spectrum_analyser
149/21: import sys
149/22: import os
149/23: s=spectrum_analyser.SpectrumAnalyser()
149/24: figure(7)
149/25:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6-2186_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
149/26:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch5-2131_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch5-2131_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
149/27: fcal6,ical6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
149/28: fcal6,qcal6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
149/29: icali6=interpolate.interp1d(fcal6,ical6)
149/30: qcali6=interpolate.interp1d(fcal6,qcal6)
149/31: icorr6 = icali6(freqs); icorr6 -= icorr6.max(); icorr6 = 10**(icorr6/20); icorr6 = clip(icorr6,0.45,1.0)
149/32: qcorr6 = qcali6(freqs); qcorr6 -= qcorr6.max(); qcorr6 = 10**(qcorr6/20); qcorr6 = clip(qcorr6,0.45,1.0)
149/33: z6=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr6+1j*qcorr6)
149/34: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767)
149/35:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch5-2131_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch5-2131_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
149/36: m5=zeros((21,len(freqs)))*nan
149/37:
for j in range(21):
    try:
        m5[j] = load('ch5-2131_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
149/38:
for j in range(21):
    try:
        m5[j] = load('/home/muscat/ch5-2131_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
149/39: figure(8)
149/40: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
150/1: from scipy import interpolate
150/2: from numpy import *; from matplotlib.pyplot import *; ion()
150/3: from scipy import ndimage
150/4: m5=zeros((21,len(freqs)))*nan
150/5: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
150/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
150/7: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
150/8: m5=zeros((21,len(freqs)))*nan
150/9:
for j in range(21):
    try:
        m5[j] = load('/home/muscat/ch5-2131_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
150/10: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
150/11: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
151/1: import pcp
152/1: import pcp
153/1: import pcp
153/2: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
153/3: ch6 = pcp.mux_channel.muxChannel(name[5])
153/4: name = ['phantom','clones','sith','hope','empire','jedi']
153/5: from scipy import ndimage
153/6: from numpy import *; from matplotlib.pyplot import *; ion()
153/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
153/8: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
153/9: ch6 = pcp.mux_channel.muxChannel(name[5])
153/10: ch6.initialise_hardware()
153/11: ch6.input_atten.att = 0
153/12: ch6.synth_lo.frequency = 750e6
153/13: ch6.roach_iface.initialise_fpga(force_reupload=True)
153/14: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/15: fcal6,qcal6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
153/16: fcal6,ical6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
153/17: icorr6 = icali6(freqs); icorr6 -= icorr6.max(); icorr6 = 10**(icorr6/20); icorr6 = clip(icorr6,0.45,1.0)
153/18: icali6=interpolate.interp1d(fcal6,ical6)
153/19: from scipy import ndimage
153/20: from scipy import interpolate
153/21: icali6=interpolate.interp1d(fcal6,ical6)
153/22: qcali6=interpolate.interp1d(fcal6,qcal6)
153/23: icorr6 = icali6(freqs); icorr6 -= icorr6.max(); icorr6 = 10**(icorr6/20); icorr6 = clip(icorr6,0.45,1.0)
153/24: qcorr6 = qcali6(freqs); qcorr6 -= qcorr6.max(); qcorr6 = 10**(qcorr6/20); qcorr6 = clip(qcorr6,0.45,1.0)
153/25: z6=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr6+1j*qcorr6)
153/26:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1101_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1011_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/27: import os
153/28: import sy
153/29: import sys
153/30:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1101_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1011_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/31: import spectrum_analyser
153/32: s=spectrum_analyser.SpectrumAnalyser()
153/33:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1101_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1011_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/34: !rm /home/muscat/ch4-110*
153/35:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1101_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1011_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/36: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/37: ch6.synth_lo.getPower()
153/38: figure(9)
153/39:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/40:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/41: !rm /home/muscat/ch4-2156*
153/42:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/43: m44=zeros((21,len(freqs)))*nan
153/44:
for j in range(21):
    try:
        m44[j] = load('/home/muscat/ch4-2156_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
153/45: figure()
153/46: imshow(ndimage.gaussian_filter(m44,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
153/47: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/48: wi,wq=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases)
153/49: max(wi)
153/50: min(wi)
153/51: min(wq)
153/52: max(wq)
153/53: figure()
153/54: plot(wi)
153/55: 2**21
153/56: 2**21/256e6
153/57: 1./(2**21/256e6)
153/58: 1./(2**21/512e6)
153/59: ch6.synth_lo.SynthHDDevice.getHelp()
153/60: ch6.synth_lo.setTemperatureCompensationSetting(0)
153/61: ch6.synth_lo.setFrequency(750e6+250)
153/62: ch6.roach_iface.write_freqs_to_qdr(freqs[333],amps[333],phases[333],iq_correction=None)
153/63: ch6.roach_iface.write_freqs_to_qdr(freqs[333:334],amps[333:334],phases[333:334],iq_correction=None)
153/64: freqs[333:334]
153/65: freqs[333:334]+750e6
153/66: freqs[1000-333:1000-334]+750e6
153/67: freqs[1000-334:1000-333]+750e6
153/68: freqs[1000-333:1000-332]+750e6
153/69: freqs[1000-332:1000-331]+750e6
153/70: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/71: (freqs[333:334])
153/72: ch6.roach_iface.write_freqs_to_qdr(freqs[333:334],amps[333:334],phases[333:334],iq_correction=None)
153/73: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/74: ch6.roach_iface.write_freqs_to_qdr(freqs[444:445],amps[444:445],phases[444:445],iq_correction=None)
153/75: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/76: ch6.roach_iface.write_freqs_to_qdr(freqs[490:491],amps[490:491],phases[490:491],iq_correction=None)
153/77: ch6.synth_lo.setFrequency(750e6)
153/78: freqs[333:334]+750e6
153/79: ch6.roach_iface.write_freqs_to_qdr(freqs[333:334],amps[333:334],phases[333:334],iq_correction=None)
153/80: -freqs[333:334]+750e6
153/81: ch6.synth_clk.setPower(5)
153/82: ch6.synth_clk.setPower(0)
153/83: ch6.synth_lo.getPower()
153/84: ch6.synth_lo.setPower(15.75)
153/85: ch6.synth_lo.setPower(10.75)
153/86: ch6.synth_lo.setPower(5.75)
153/87: ch6.synth_lo.setPower(0.75)
153/88: ch6.synth_lo.setPower(15.75)
153/89: ch6.synth_lo.SynthHDDevice.getHelp()
153/90: ch6.synth_lo.SynthHDDevice.getHelp()
153/91: ch6.synth_clk.setPLLPowerOn(0)
153/92: ch6.synth_clk.setPLLPowerOn(1)
153/93: ch6.synth_lo.setPLLPowerOn(0)
153/94: ch6.synth_lo.setPLLPowerOn(1)
153/95: ch6.synth_lo.SynthHDDevice.getHelp()
153/96: ch6.synth_lo.setFrequency(750e6+250)
153/97: ch6.synth_lo.setFrequency(750e6)
153/98: ch6.synth_lo.SynthHDDevice.getHelp()
153/99: ch6.synth_lo.SynthHDDevice.getHelp()
153/100: ch6.synth_lo.setPLLPowerOn(0)
153/101: ch6.synth_lo.setPLLPowerOn(1)
153/102: ch6.synth_lo.SynthHDDevice.getHelp()
153/103: ch6.synth_clk.setPLLPowerOn(0)
153/104: ch6.synth_clk.setPLLPowerOn(1)
153/105: ch6.synth_lo.SynthHDDevice.getHelp()
153/106: ch6.roach_iface.write_freqs_to_qdr(freqs[333:334],amps[333:334],phases[333:334],iq_correction=None)
153/107: ch6.synth_lo.SynthHDDevice.setReferenceSelect(1)
153/108: ch6.synth_lo.SynthHDDevice.getHelp()
153/109: ch6.synth_lo.SynthHDDevice.getHelp()
153/110: ch6.synth_clk.setPLLPowerOn(0)
153/111: ch6.synth_clk.setPLLPowerOn(1)
153/112: ch6.synth_lo.setPLLPowerOn(0)
153/113: ch6.synth_lo.setPLLPowerOn(1)
153/114: ch6.synth_lo.SynthHDDevice.getHelp()
153/115: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/116: ch6.initialise_hardware()
153/117: ch6.input_atten.att = 0
153/118: ch6.synth_lo.SynthHDDevice.getHelp()
153/119: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/120: s.sweep(750e6,755e6,0.01e6)
153/121: ch6.synth_lo.SynthHDDevice.setReferenceSelect(0)
153/122: ch6.synth_lo.SynthHDDevice.setPLLReferenceFrequency(10e6)
153/123: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/124: ch6.roach_iface.write_freqs_to_qdr(freqs[333:334],amps[333:334],phases[333:334],iq_correction=None)
153/125: -freqs[333:334]+750e6
153/126: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/127: ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
153/128: figure()
153/129:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1806_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1806_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
153/130: m444=zeros((21,len(freqs)))*nan
153/131:
for j in range(21):
    try:
        m444[j] = load('/home/muscat/ch4-1806_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
153/132: figure()
153/133: imshow(ndimage.gaussian_filter(m444,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
154/1: f,z= load('rfcal_23082019/iqcal/iqcal_ch1_i.npy')
154/2: from numpy import *; from matplotlib.pyplot import *; ion()
154/3: f,z= load('rfcal_23082019/iqcal/iqcal_ch1_i.npy')
154/4: plot(f,z)
154/5:
for i in ['i','q']:
    for j in range(1,7):
        f,z= load('rfcal_23082019/iqcal/iqcal_ch%d_%s.npy'%(j,i))
        plot(f,z)
155/1: import windfreaksynth_v2
155/2: w=windfreaksynth_v2.SynthHDSource('/dev/ttyACM0')
155/3: w=windfreaksynth_v2.SynthHDSource?
155/4: w=windfreaksynth_v2.SynthHDDevice?
155/5: w=windfreaksynth_v2.SynthHDDevice('/dev/ttyACM2')
155/6: w=windfreaksynth_v2.SynthHDDevice('/dev/ttyACM2')
155/7: w=windfreaksynth_v2.SynthHDDevice('/dev/ttyACM3')
155/8: w=windfreaksynth_v2.SynthHDDevice?
155/9: w=windfreaksynth_v2.SynthHDDevice('1051')
155/10: w.getHelp()
155/11: w.getModelType()
155/12: w.getVersionFW()
155/13: w.getVersionHW()
155/14: w=windfreaksynth_v2.SynthHDDevice('1052')
155/15: w.getVersionHW()
155/16: w=windfreaksynth_v2.SynthHDDevice('1053')
155/17: w.getVersionHW()
155/18: w=windfreaksynth_v2.SynthHDDevice('1054')
155/19: w.getVersionHW()
155/20: w=windfreaksynth_v2.SynthHDDevice('1056')
155/21: w.getVersionHW()
155/22: w=windfreaksynth_v2.SynthHDDevice('929')
155/23: w.getVersionHW()
155/24: w.getVersionFW()
155/25: w=windfreaksynth_v2.SynthHDDevice('1056')
155/26: w.getVersionFW()
155/27: w=windfreaksynth_v2.SynthHDDevice('1051')
155/28: w.getVersionFW()
156/1: import pcp
157/1: import pcp
157/2: name = ['phantom','clones','sith','hope','empire','jedi']
157/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
157/4: from numpy import *; from matplotlib.pyplot import *; ion()
157/5: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
157/6: ch1 = pcp.mux_channel.muxChannel(name[0])
157/7: ch2 = pcp.mux_channel.muxChannel(name[1])
157/8: ch3 = pcp.mux_channel.muxChannel(name[2])
157/9: ch4 = pcp.mux_channel.muxChannel(name[3])
157/10: ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None)
157/11: ch6
157/12: ch6 = pcp.mux_channel.muxChannel(name[5])
157/13:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.initialise_hardware()
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
157/14: ch5 = pcp.mux_channel.muxChannel(name[4])
157/15:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.initialise_hardware()
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
157/16:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.synth_lo.setPLLPowerOn(0)
    ch.synth_lo.setPLLPowerOn(1)
157/17:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.synth_lo.setPLLPowerOn(0)
    ch.synth_lo.setPLLPowerOn(1)
157/18:
for ch in [ch1,ch2,ch3,ch4,ch5,ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
157/19:
for ch in [ch6, ch1,ch2,ch3,ch4,ch5]:
    ch.synth_lo.setPLLPowerOn(0)
    ch.synth_lo.setPLLPowerOn(1)
157/20:
for ch in [ch4]:
    ch.synth_clk.setPLLPowerOn(0)
    ch.synth_clk.setPLLPowerOn(1)
157/21: ch4.synth_lo.getHelp()
157/22: ch4.synth_lo.SynthHDDevice.getHelp()
157/23: import spectrum_analyser
157/24: s=spectrum_analyser.SpectrumAnalyser()
157/25: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/26: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/27: figure()
157/28: plot(uf,us,label='ch1')
157/29: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/30: plot(uf,us,label='ch2')
157/31: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/32: plot(uf,us,label='ch3')
157/33: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/34:
for ch in [ch4]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
157/35: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/36: plot(uf,us,label='ch4')
157/37: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/38: plot(uf,us,label='ch5')
157/39: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/40: ch6.synth_lo.SynthHDDevice.getHelp()
157/41:
for ch in [ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
157/42: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
157/43: ch6.synth_lo.SynthHDDevice.getHelp()
157/44: ch3.synth_lo.SynthHDDevice.getHelp()
157/45: reload(pcp)
157/46: ch6 = pcp.mux_channel.muxChannel(name[5])
157/47: name = ['phantom','clones','sith','hope','empire','jedi']
157/48: ch6 = pcp.mux_channel.muxChannel(name[5])
157/49: ch6 = pcp.mux_channel.muxChannel(name[5])
158/1: import pcp
158/2: from numpy import *; from matplotlib.pyplot import *; ion()
158/3: import spectrum_analyser
158/4: name = ['phantom','clones','sith','hope','empire','jedi']
158/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
158/6: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
158/7: ch6 = pcp.mux_channel.muxChannel(name[5])
158/8:
for ch in [ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
158/9: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
158/10: s=spectrum_analyser.SpectrumAnalyser()
158/11: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
158/12: plot(uf,us,label='ch5')
158/13: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
158/14: plot(uf,us,label='ch5')
158/15: plot(uf,clf()us,label='ch5')
158/16: clf()
158/17: plot(uf+55e6,us,label='ch5')
158/18:
for phi in radians(linspace(-10,10,41)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/19: import os
158/20:
for phi in radians(linspace(-10,10,41)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/21: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
158/22: fcal3,ical3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_i.npy')
158/23: fcal3,qcal3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_q.npy')
158/24: icorr3 = icali3(freqs); icorr3 -= icorr3.max(); icorr3 = 10**(icorr3/20); icorr3 = clip(icorr3,0.45,1.0)
158/25: icali3=interpolate.interp1d(fcal3,ical3)
158/26: from scipy import interpolate
158/27: icali3=interpolate.interp1d(fcal3,ical3)
158/28: qcali3=interpolate.interp1d(fcal3,qcal3)
158/29: icorr3 = icali3(freqs); icorr3 -= icorr3.max(); icorr3 = 10**(icorr3/20); icorr3 = clip(icorr3,0.45,1.0)
158/30: qcorr3 = qcali3(freqs); qcorr3 -= qcorr3.max(); qcorr3 = 10**(qcorr3/20); qcorr3 = clip(qcorr3,0.45,1.0)
158/31:
for phi in radians(linspace(-10,10,41)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr3*(max(abs(z3[0])))/32767 + 1j*qcorr3*(max(abs(z3[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/32: ch3 = pcp.mux_channel.muxChannel(name[2])
158/33: ch3.initialise_hardware()
158/34: ch3.synth_lo.frequency = 750e6
158/35:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
158/36: z3=ch3.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr3+1j*qcorr3)
158/37:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch3.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr3*(max(abs(z3[0])))/32767 + 1j*qcorr3*(max(abs(z3[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/38: ch3.synth_lo.SynthHDDevice.getHelp()
158/39: figure()
158/40:
for j in range(81):
    try:
        m3[j] = load('/home/muscat/ch3-2131_03082019_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
158/41: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/42: from scipy import ndimage
158/43: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/44: m3
158/45: m3=zeros((81,len(freqs)))*nan
158/46:
for j in range(81):
    try:
        m3[j] = load('/home/muscat/ch3-2131_03082019_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
158/47: m3
158/48: ls /home/muscat/ch3*
158/49:
for j in range(81):
    try:
        m3[j] = load('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,21)[j])))
        print j
    except:
        pass
158/50: m3=zeros((81,len(freqs)))*nan
158/51:
for j in range(81):
    try:
        m3[j] = load('/home/muscat/ch3-2131_030819_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,81)[j])))
        print j
    except:
        pass
158/52: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/53: figure('ch3_030819')
158/54: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/55: fcal4,ical4 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch4_i.npy')
158/56: fcal4,qcal4 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch4_q.npy')
158/57: icali4=interpolate.interp1d(fcal4,ical4)
158/58: qcali4=interpolate.interp1d(qcal4,qcal4)
158/59: icorr4 = icali4(freqs); icorr4 -= icorr4.max(); icorr4 = 10**(icorr4/20); icorr4 = clip(icorr4,0.45,1.0)
158/60: qcorr4 = qcali4(freqs); qcorr4 -= qcorr4.max(); qcorr4 = 10**(qcorr4/20); qcorr4 = clip(qcorr4,0.45,1.0)
158/61: icorr4 = icali4(freqs); icorr4 -= icorr4.max(); icorr4 = 10**(icorr4/20); icorr4 = clip(icorr4,0.45,1.0)
158/62: qcali4=interpolate.interp1d(qcal4,qcal4)
158/63: qcali4=interpolate.interp1d(fcal4,qcal4)
158/64: icorr4 = icali4(freqs); icorr4 -= icorr4.max(); icorr4 = 10**(icorr4/20); icorr4 = clip(icorr4,0.45,1.0)
158/65: z4=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr4+1j*qcorr4)
158/66: ch4 = pcp.mux_channel.muxChannel(name[3])
158/67:
for ch in [ch4]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
158/68: z4=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr4+1j*qcorr4)
158/69: icorr4 = icali4(freqs); icorr4 -= icorr4.max(); icorr4 = 10**(icorr4/20); icorr4 = clip(icorr4,0.45,1.0)
158/70: qcorr4 = qcali4(freqs); qcorr4 -= qcorr4.max(); qcorr4 = 10**(qcorr4/20); qcorr4 = clip(qcorr4,0.45,1.0)
158/71: z4=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr4+1j*qcorr4)
158/72:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1806_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr4*(max(abs(z4[0])))/32767 + 1j*qcorr4*(max(abs(z4[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1806_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/73: figure('ch3_030819')
158/74: imshow(ndimage.gaussian_filter(m3,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/75: figure('ch4_040819')
158/76: m4=zeros((81,len(freqs)))*nan
158/77:
for j in range(81):
    try:
        m4[j] = load('/home/muscat/ch4-1806_040819_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,81)[j])))
        print j
    except:
        pass
158/78: imshow(ndimage.gaussian_filter(m4,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/79:
for ch in [ch4]:
 
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
158/80: figure()
158/81: imshow(ndimage.gaussian_filter(m4,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10])
158/82: imshow(ndimage.gaussian_filter(m4,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=60)
158/83: imshow(m4,aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
158/84: figure('ch4_040819_2')
158/85: z4=ch4.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr4+1j*qcorr4)
158/86:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1806_040819_2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr4*(max(abs(z4[0])))/32767 + 1j*qcorr4*(max(abs(z4[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1806_040819_2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/87: rm '/home/muscat/ch4-1806_040819_2_phase_test_-0.175radians.npy'
158/88:
for phi in radians(linspace(-10,10,21)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1806_040819_2_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr4*(max(abs(z4[0])))/32767 + 1j*qcorr4*(max(abs(z4[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1806_040819_2_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/89:
for phi in radians(linspace(-0.1,0.1,3)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch4-1806_040819_3_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch4.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr4*(max(abs(z4[0])))/32767 + 1j*qcorr4*(max(abs(z4[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch4-1806_040819_3_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
158/90: fcal5,qcal5 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_q.npy')
158/91: fcal5,ical5 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_i.npy')
158/92: icali5=interpolate.interp1d(fcal5,ical5)
158/93: qcali5=interpolate.interp1d(fcal5,qcal5)
158/94: icorr5 = icali5(freqs); icorr5 -= icorr5.max(); icorr5 = 10**(icorr5/20); icorr5 = clip(icorr5,0.45,1.0)
158/95: qcorr5 = qcali5(freqs); qcorr5 -= qcorr5.max(); qcorr5 = 10**(qcorr5/20); qcorr5 = clip(qcorr5,0.45,1.0)
158/96: z5=ch5.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr5+1j*qcorr5)
158/97: ch5 = pcp.mux_channel.muxChannel(name[4])
158/98: name = ['phantom','clones','sith','hope','empire','jedi']
158/99: ch5 = pcp.mux_channel.muxChannel(name[4])
158/100: fcal6,qcal6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
158/101: fcal6,ical6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
158/102: qcali6=interpolate.interp1d(fcal6,qcal6)
158/103: icali6=interpolate.interp1d(fcal6,ical6)
158/104: qcorr6 = qcali6(freqs); qcorr6 -= qcorr6.max(); qcorr6 = 10**(qcorr6/20); qcorr6 = clip(qcorr6,0.45,1.0)
158/105: icorr6 = icali6(freqs); icorr6 -= icorr6.max(); icorr6 = 10**(icorr6/20); icorr6 = clip(icorr6,0.45,1.0)
158/106: z6=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr6+1j*qcorr6)
158/107: figure('ch6_040819')
158/108:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch6-2186_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6-2186_040819_phase_test_%0.3fradians.npy'%(phi),peaks-pea)
159/1: import pcp
159/2: name = ['phantom','clones','sith','hope','empire','jedi']
159/3: ch5 = pcp.mux_channel.muxChannel(name[4])
159/4: ch6 = pcp.mux_channel.muxChannel(name[5])
159/5: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
159/6: from scipy import ndimage
159/7: from scipy import interpolate
159/8: from numpy import *; from matplotlib.pyplot import *; ion()
159/9: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
159/10: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
159/11: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
159/12: fcal5,ical5 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_i.npy')
159/13: fcal5,qcal5 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch5_q.npy')
159/14: icali5=interpolate.interp1d(fcal5,ical5)
159/15: qcali5=interpolate.interp1d(fcal5,qcal5)
159/16: icorr5 = icali5(freqs); icorr5 -= icorr5.max(); icorr5 = 10**(icorr5/20); icorr5 = clip(icorr5,0.45,1.0)
159/17: qcorr5 = qcali5(freqs); qcorr5 -= qcorr5.max(); qcorr5 = 10**(qcorr5/20); qcorr5 = clip(qcorr5,0.45,1.0)
159/18: z5=ch5.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr5+1j*qcorr5)
159/19:
for ch in [ch5]:
 
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
159/20: ch5.initialise_hardware()
159/21:
for ch in [ch5]:
 
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
159/22: z5=ch5.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr5+1j*qcorr5)
159/23: figure('ch5_040819')
159/24: figure('ch5_040819_prev')
159/25:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr5*(max(abs(z5[0])))/32767 + 1j*qcorr5*(max(abs(z5[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(phi),peaks-pea)
159/26: import os
159/27:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr5*(max(abs(z5[0])))/32767 + 1j*qcorr5*(max(abs(z5[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(phi),peaks-pea)
159/28: import spectrum_analyser
159/29: s=spectrum_analyser.SpectrumAnalyser()
159/30:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch5.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr5*(max(abs(z5[0])))/32767 + 1j*qcorr5*(max(abs(z5[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
159/31: figure('ch5_040819')
159/32: m5=zeros((81,len(freqs)))*nan
159/33:
for j in range(81):
    try:
        m5[j] = load('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,81)[j])))
        print j
    except:
        pass
159/34: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=60)
159/35: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=60)
159/36: figure('ch5_040819')
159/37: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=60)
159/38:
for j in range(81):
    try:
        m5[j] = load('/home/muscat/ch5-1101_040819_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,81)[j])))
        print j
    except:
        pass
159/39: figure('ch5')
159/40: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=60)
159/41: imshow(ndimage.gaussian_filter(m5,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
159/42: ch6 = pcp.mux_channel.muxChannel(name[5])
159/43: ch6.initialise_hardware()
159/44:
for ch in [ch6]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
159/45: fcal6,ical6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_i.npy')
159/46: fcal6,qcal6 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch6_q.npy')
159/47: icali6=interpolate.interp1d(fcal6,ical6)
159/48: qcali6=interpolate.interp1d(fcal6,qcal6)
159/49: icorr6 = icali6(freqs); icorr6 -= icorr6.max(); icorr6 = 10**(icorr6/20); icorr6 = clip(icorr6,0.45,1.0)
159/50: qcorr6 = qcali6(freqs); qcorr6 -= qcorr6.max(); qcorr6 = 10**(qcorr6/20); qcorr6 = clip(qcorr6,0.45,1.0)
159/51: z6=ch6.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr6+1j*qcorr6)
159/52: figure()
159/53:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch6-2186_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch6.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr6*(max(abs(z6[0])))/32767 + 1j*qcorr6*(max(abs(z6[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch6-2186_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
159/54: m6=zeros((21,len(freqs)))*nan
159/55: m6=zeros((81,len(freqs)))*nan
159/56:
for j in range(81):
    try:
        m6[j] = load('/home/muscat/ch6-2186_040819_phase_test_%0.3fradians.npy'%(radians(linspace(-10,10,81)[j])))
        print j
    except:
        pass
159/57: figure('ch6')
159/58: imshow(ndimage.gaussian_filter(m6,0.1),aspect='auto',interpolation='none',extent=[freqs.min(),freqs.max(),10,-10],vmin=25,vmax=50)
159/59: fcal2,ical2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
159/60: fcal2,qcal2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
159/61: icali2=interpolate.interp1d(fcal2,ical2)
159/62: qcali2=interpolate.interp1d(fcal2,qcal2)
159/63: icorr2 = icali2(freqs); icorr2 -= icorr2.max(); icorr2 = 10**(icorr2/20); icorr2 = clip(icorr2,0.45,1.0)
159/64: qcorr2 = qcali2(freqs); qcorr2 -= qcorr2.max(); qcorr2 = 10**(qcorr2/20); qcorr2 = clip(qcorr2,0.45,1.0)
159/65:
for ch in [ch2]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
159/66: ch2 = pcp.mux_channel.muxChannel(name[1])
159/67: ch2.initialise_hardware()
159/68: ch2.initialise_hardware()
159/69:
for ch in [ch2]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
159/70: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
159/71:
figure('ch2_prev')
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
159/72: rm '/home/muscat/ch2-2130_040819*'
159/73: rm /home/muscat/ch2-2130_040819*
159/74:
figure('ch2_prev')
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
160/1: cla()
160/2: from numpy import *; from matplotlib.pyplot import *; ion()
160/3: cla()
160/4: close('all')
160/5: close()
160/6: close('ch2_prev')
160/7: rm /home/muscat/ch2-2130_040819*
160/8: fcal2,qcal2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
160/9: fcal2,ical2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
160/10: icali2=interpolate.interp1d(fcal2,ical2)
160/11: from scipy import interpolate
160/12: icali2=interpolate.interp1d(fcal2,ical2)
160/13: qcali2=interpolate.interp1d(fcal2,qcal2)
160/14: icorr2 = icali2(freqs); icorr2 -= icorr2.max(); icorr2 = 10**(icorr2/20); icorr2 = clip(icorr2,0.45,1.0)
160/15: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
160/16: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
160/17: freqs,amps,phases = genfromtxt(freqs_file,unpack=1)
160/18: icorr2 = icali2(freqs); icorr2 -= icorr2.max(); icorr2 = 10**(icorr2/20); icorr2 = clip(icorr2,0.45,1.0)
160/19: qcorr2 = qcali2(freqs); qcorr2 -= qcorr2.max(); qcorr2 = 10**(qcorr2/20); qcorr2 = clip(qcorr2,0.45,1.0)
160/20: ch2 = pcp.mux_channel.muxChannel(name[1])
160/21: import pcp
160/22: ch2 = pcp.mux_channel.muxChannel(name[1])
160/23: name = ['phantom','clones','sith','hope','empire','jedi']
160/24: ch2 = pcp.mux_channel.muxChannel(name[1])
160/25: ch2.initialise_hardware()
160/26:
for ch in [ch2]:
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
160/27: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
160/28:
figure('ch2')
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
160/29: import os
160/30: from scipy import ndimage
160/31: import sys
160/32:
figure('ch2')
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
160/33: import spectrum_analyser
160/34: s=spectrum_analyser.SpectrumAnalyser()
160/35:
figure('ch2')
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs[j]+750e6-10e3)&(uf<freqs[j]+750e6+10e3))]) for j in range(len(freqs))])
    peaks_n=array([max(us[where((uf-750e6>-freqs[j]-10e3)&(uf-750e6<-freqs[j]+10e3))]) for j in range(len(freqs))]) 
    plot(freqs,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch2-2130_040819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
160/36: /home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_25
160/37: shutdown -h now
160/38: shutdown -h -n
161/1: import pcp
161/2: from scipy import interpolate
161/3: from numpy import *; from matplotlib.pyplot import *; ion()
161/4: ch3 = pcp.mux_channel.muxChannel(name[3])
161/5: name = ['phantom','clones','sith','hope','empire','jedi']
161/6: ch3 = pcp.mux_channel.muxChannel(name[3])
162/1: from numpy import *; from matplotlib.pyplot import *; ion()
162/2: import pcp
162/3: name = ['phantom','clones','sith','hope','empire','jedi']
162/4: ch3 = pcp.mux_channel.muxChannel(name[3])
162/5: ch3 = pcp.mux_channel.muxChannel(name[])
162/6: ch3 = pcp.mux_channel.muxChannel(name[2])
163/1: import pcp
163/2: name = ['phantom','clones','sith','hope','empire','jedi']
163/3: ch3 = pcp.mux_channel.muxChannel(name[2])
163/4: from numpy import *; from matplotlib.pyplot import *; ion()
163/5: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1)
163/6: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1)
163/7:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
163/8: freqs
163/9: lo = 784e6
163/10: freqs = freqs - lo
163/11:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
163/12: len amps
163/13: autocall
163/14: len freqs
163/15: len amps
163/16: len phases
163/17: ptp freqs
163/18: freqs[isnan(freqs)]
163/19: freqs
163/20: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
163/21: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
163/22: freqs = freqs - lo
163/23:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=750e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
163/24: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=500e3,sweep_step=5e3)
163/25: import pcp.visualisation
163/26: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/27: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/28: ch3.input_atten.att=10
163/29: ch3.output_atten.att=0
163/30: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
163/31: ch3.output_atten.att=10
163/32: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(3)]),axis=2),axis=0)
163/33: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=500e3,sweep_step=5e3)
163/34: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/35: ch3.input_atten.att=20
163/36: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=1000e3,sweep_step=5e3)
163/37: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/38: ch3.synth_lo.getFrequency()
163/39: lo
163/40: ch3.synth_lo.setFrequency(784e6)
163/41: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
163/42: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=1000e3,sweep_step=5e3)
163/43: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/44: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
163/45: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/46: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(3)]),axis=2),axis=0)
163/47: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
163/48: from pcp.lib import lib_dirfiles
163/49: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
163/50: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
163/51: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
163/52: save('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/found_kids.npy',kids)
163/53: save('found_kids.npy',kids)
163/54: save('/home/muscat/found_kids.npy',kids)
163/55: pwd
163/56: import change_toneslist_freqs
163/57: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'')
163/58: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
163/59: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('~/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
163/60: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
163/61: change_toneslist_freqs?
163/62: change_toneslist_freqs.change_freqs?
163/63: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
163/64: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
163/65: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
163/66: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/67: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
163/68: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
163/69: ch3.start_stream()
163/70: ch3.stop_stream()
164/1: import xy_recv
164/2: xy_recv.double
164/3: xy_recv.xyz_receiver??
164/4: xy_recv.xyz_receiver()
165/1: import xy_recv
165/2: xy_recv.xyz_receiver()
165/3: clear
165/4: xy_recv.xyz_receiver()
165/5: xy_recv.xyz_receiver?
165/6: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time())
165/7: import time
165/8: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time())
165/9: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time(),printing=False)
166/1: import xy_recv
166/2: import time
166/3: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time(),printing=False)
167/1: import xy_recv
167/2: import time
167/3: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time(),printing=False)
167/4: vim xy_
168/1: import time
168/2: import xy_recv
168/3: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time(),printing=False)
168/4: xy_recv.xyz_receiver('/home/muscat/xy_%d)'%time.time())
169/1: name = ['phantom','clones','sith','hope','empire','jedi']
169/2: ch3 = pcp.mux_channel.muxChannel(name[2])
169/3: import pcp
170/1: import pcp
170/2: name = ['phantom','clones','sith','hope','empire','jedi']
170/3: ch3 = pcp.mux_channel.muxChannel(name[2])
170/4: lo = 784e6
170/5: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
170/6: from pcp.lib import lib_dirfiles
170/7: from numpy import *; from matplotlib.pyplot import *; ion()
170/8: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
170/9: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
170/10: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
170/11: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(3)]),axis=2),axis=0)
170/12: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
170/13: ch3.initialise_hardware()
170/14: ch3.input_atten.att=20
170/15: ch3.output_atten=0
170/16: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
170/17: import pcp.visualisation
170/18: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
170/19: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
170/20: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
170/21: figure()
171/1: from numpy import *; from matplotlib.pyplot import *; ion()
171/2: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
171/3: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
171/4: import pcp
171/5: ch3 = pcp.mux_channel.muxChannel(name[2])
171/6: name = ['phantom','clones','sith','hope','empire','jedi']
171/7: ch3 = pcp.mux_channel.muxChannel(name[2])
171/8: ch3.initialise_hardware()
171/9: ch3.input_atten.att=20
171/10: ch3.output_atten.att=0
171/11: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
171/12: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
171/13: import pcp.visualisation
171/14: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
171/15: !killall firefox
173/1: name = ['phantom','clones','sith','hope','empire','jedi']
173/2: from numpy import *; from matplotlib.pyplot import *; ion()
173/3: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement.txt',unpack=1,skip_header=1)
173/4: ch3 = pcp.mux_channel.muxChannel(name[2])
173/5: import pcp
173/6: ch3 = pcp.mux_channel.muxChannel(name[2])
173/7: ch3.initialise_hardware()
173/8: ch3.input_atten.att=20
173/9: ch3.output_atten.att=0
173/10: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
173/11: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
173/12: import pcp.visualisation
173/13: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
173/14: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
173/15: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
173/16: ch3.input_atten.att=10
173/17: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(3)]),axis=2),axis=0)
173/18: ch3.output_atten.att
173/19: ch3.output_atten.att=10
173/20: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(3)]),axis=2),axis=0)
173/21: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
173/22: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
173/23: ch3.current_sweep_dirfile.name
173/24: ch3.start_stream()
173/25: ch3.current_dirfile
173/26: ch3.current_dirfile.name
173/27: ch3.stop_stream()
173/28: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
173/29: from pcp.lib import lib_dirfiles
173/30: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
173/31: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
173/32: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
173/33: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
173/34: import change_toneslist_freqs
173/35: #change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
173/36: save('/home/muscat/found_kids.npy',kids)
173/37: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
173/38: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
173/39: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(3)]),axis=2),axis=0)
173/40: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
173/41: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
173/42: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
173/43: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
173/44: ch3.start_stream()
173/45: ch3.synth_lo.SynthHDDevice.getHelp()
173/46: ch3.stop_stream()
174/1: import xy_recv
174/2: !rm xy_1567633*
174/3: xy_recv.xyz_receiver()
176/1: import xy_recv
177/1: import pcp
177/2: name = ['phantom','clones','sith','hope','empire','jedi']
177/3: from pcp.lib import lib_dirfiles
177/4: from numpy import *; from matplotlib.pyplot import *; ion()
177/5: ch3 = pcp.mux_channel.muxChannel(name[2])
177/6: ch3.initialise_hardware()
177/7: ch3.input_atten.att=10
177/8: ch3.output_atten.att=10
177/9: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
177/10: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
177/11: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/12: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/13: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/14: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
177/15: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
177/16: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
177/17: save('/home/muscat/found_kids.npy',kids)
177/18: import change_toneslist_freqs
177/19: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
177/20: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/21: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/22: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/23: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
177/24: ch3.start_stream()
178/1: import xy_recv
179/1: import xy_recv
179/2: xy_recv.xyz_receiver()
177/25: ch3.input_atten.att
177/26: ch3.output_atten.att
177/27: import time
177/28: t0=time.time()
177/29:
while True:
    if time.time()-t0 < 60*60*3:
        time.sleep(1)
    else:
        ch3.stop_stream()
        break
179/3: ls -l /home/sam/xy_recv.txt
179/4: ls -lh /home/sam/xy_recv.txt
179/5: !du -h /data1/muscat/sith/20190905_000539
163/71: ch3.start_stream()
163/72: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
163/73: ch3.stop_stream()
163/74: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
163/75: reload(pcp)
163/76: ch3 = pcp.mux_channel.muxChannel(name[2])
163/77: name = ['phantom','clones','sith','hope','empire','jedi']
163/78: ch3 = pcp.mux_channel.muxChannel(name[2])
163/79: ch3 = pcp.mux_channel.muxChannel(name[2])
177/30: ch3.start_stream()
177/31: ch3.stop_stream()
177/32: import time
177/33: ch3.start_stream(); print "Waiting for 600 s", time.sleep(600), ch3.stop_stream()
177/34: ch3.start_stream(); print "Waiting for 600 s", time.sleep(600), ch3.stop_stream()
177/35: ch3.start_stream(); print "Waiting for 600 s", time.sleep(600), ch3.stop_stream()
177/36: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/37: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/38: import pcp.visualisation
177/39: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/40: pwd
177/41: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=1000e3,sweep_step=5e3)
177/42: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/43: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/44: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
177/45: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
177/46: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
177/47: save('/home/muscat/found_kids.npy',kids)
177/48: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
177/49: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/50: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/51: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/52: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/53: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
177/54: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
177/55: save('/home/muscat/found_kids.npy',kids)
177/56: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
177/57: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/58: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/59: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/60: for i in range(3):ch3.start_stream(); print "Waiting for 600 s", time.sleep(600), ch3.stop_stream()
177/61: ch1 = pcp.mux_channel.muxChannel(name[0])
177/62: ch1.initialise_hardware()
177/63: ch1.input_atten.att = 10
177/64: ch1.output_atten.att = 10
177/65: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('929')
177/66: ch1.synth_lo.SynthHDDevice.getHelp()
177/67:
for ch in [ch1]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/68: ch1.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch1.toneslist.load_tonelist(); ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/69: ch1.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=1000e3,sweep_step=5e3)
177/70: ch1.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch1.toneslist.load_tonelist(); ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/71: ch1.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=1000e3,sweep_step=5e3)
177/72: pcp.visualisation.plot_sweep_html(ch1.current_sweep_dirfile.name)
177/73: ch3.input_atten.att
177/74: ch3.output_atten.att
177/75: ch1.output_atten.att
177/76: ch1.input_atten.att
177/77: ch1.input_atten.att =10
177/78: ch1.output_atten.att =10
177/79: ch1.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=1000e3,sweep_step=5e3)
177/80: pcp.visualisation.plot_sweep_html(ch1.current_sweep_dirfile.name)
177/81: ch1.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/82: pcp.visualisation.plot_sweep_html(ch1.current_sweep_dirfile.name)
177/83: for i in range(1):ch1.start_stream(); print "Waiting for 600 s", time.sleep(600), ch1.stop_stream()
177/84: pcp.visualisation.plot_sweep_html('/data1/muscat/sith/20190905_000539/')
177/85: ch2 = pcp.mux_channel.muxChannel(name[1])
177/86: ch2.initialise_hardware()
177/87: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1051')
177/88:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/89: ch2.input_atten.att =10
177/90: ch2.output_atten.att = 10
177/91: ch2.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch2.toneslist.load_tonelist(); ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/92: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/93: pcp.visualisation.plot_sweep_html(ch2.current_sweep_dirfile.name)
177/94: ch2.synth_lo.frequency
177/95: ch2.synth_clk.frequency
177/96: ch2.synth_lo.SynthHDDevice.getHelp()
177/97: ch2.synth_lo.setPLLPowerOn(0)
177/98: ch2.synth_lo.setPLLPowerOn(1)
177/99: ch2.synth_lo.SynthHDDevice.getHelp()
177/100: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/101: pcp.visualisation.plot_sweep_html(ch2.current_sweep_dirfile.name)
177/102: for i in range(1):ch2.start_stream(); print "Waiting for 600 s", time.sleep(600), ch2.stop_stream()
177/103: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/104: ch4 = pcp.mux_channel.muxChannel(name[3])
177/105: ch4.initialise_hardware()
177/106: ch4.input_atten.att = 10
177/107: ch4.output_atten.att = 10
177/108: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1053')
177/109: ch4.synth_lo.SynthHDDevice.getHelp()
177/110:
for ch in [ch4]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/111: ch4.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch4.toneslist.load_tonelist(); ch4.toneslist.phases=phases; ch4.toneslist.amp=amps; ch4.toneslist.lo_freq = 784e6; ch4.toneslist._update_frequencies(); ch4.roach_iface.write_freqs_to_qdr(ch4.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/112: ch4.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/113: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/114: ch4.input_atten.att
177/115: ch4.input_atten.att = 10
177/116: ch4.output_atten.att
177/117: ch4.output_atten.att = 10
177/118: ch4.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/119: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/120: for i in range(1):ch4.start_stream(); print "Waiting for 600 s", time.sleep(600), ch4.stop_stream()
177/121: pcp.visualisation.plot_sweep_html('/data1/muscat/sith/20190905_000539/')
177/122: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/123: ch5 = pcp.mux_channel.muxChannel(name[4])
177/124: ch5.initialise_hardware()
177/125:
for ch in [ch5]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/126: ch5.output_atten.att
177/127: ch5.output_atten.att = 10
177/128: ch5.input_atten.att = 10
177/129: ch5.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch5.toneslist.load_tonelist(); ch5.toneslist.phases=phases; ch5.toneslist.amp=amps; ch5.toneslist.lo_freq = 784e6; ch5.toneslist._update_frequencies(); ch5.roach_iface.write_freqs_to_qdr(ch5.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/130: ch5.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/131: pcp.visualisation.plot_sweep_html(ch5.current_sweep_dirfile.name)
177/132: for i in range(1):ch5.start_stream(); print "Waiting for 600 s", time.sleep(600), ch5.stop_stream()
177/133: ch6 = pcp.mux_channel.muxChannel(name[5])
177/134: ch6.initialise_hardware()
177/135: ch5.output_atten.att = 10
177/136: ch6.input_atten.att = 10
177/137: ch6.output_atten.att = 10
177/138:
for ch in [ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/139: ch6.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch6.toneslist.load_tonelist(); ch6.toneslist.phases=phases; ch6.toneslist.amp=amps; ch6.toneslist.lo_freq = 784e6; ch6.toneslist._update_frequencies(); ch6.roach_iface.write_freqs_to_qdr(ch6.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/140: ch6.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/141: pcp.visualisation.plot_sweep_html(ch6.current_sweep_dirfile.name)
177/142: ch6.input_atten.att
177/143: ch6.input_atten.att = 10
177/144: ch6.output_atten.att
177/145: ch6.output_atten.att = 10
177/146: ch6.synth_lo.SynthHDDevice.getHelp()
177/147: ch6.synth_clk.getPLLPowerOn(0)
177/148: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1055')
177/149: pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values('1056')
177/150: ch6.synth_lo.SynthHDDevice.getHelp()
177/151: ch5.synth_lo.SynthHDDevice.getHelp()
177/152: ch4.synth_lo.SynthHDDevice.getHelp()
177/153: ch3.synth_lo.SynthHDDevice.getHelp()
177/154: ch2.synth_lo.SynthHDDevice.getHelp()
177/155: ch1.synth_lo.SynthHDDevice.getHelp()
177/156: ch6.synth_lo.SynthHDDevice.getHelp()
177/157: syn_dev = pcp.synthesizer.windfreaksynth_v2.SynthHDDevice('1056')
177/158: syn = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(synd_dev)
177/159: syn = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev)
177/160: syn = pcp.synthesizer.windfreaksynth_v2.SynthHDSource(syn_dev,0)
177/161: syn.setPLLPowerOn(0)
177/162: syn.setPLLPowerOn(1)
177/163: syn_dev.getHelp()
177/164:
for ch in [ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/165: ch6.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch6.toneslist.load_tonelist(); ch6.toneslist.phases=phases; ch6.toneslist.amp=amps; ch6.toneslist.lo_freq = 784e6; ch6.toneslist._update_frequencies(); ch6.roach_iface.write_freqs_to_qdr(ch6.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/166: ch6.input_atten.att = 10
177/167: ch6.output_atten.att = 10
177/168: ch6.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/169: pcp.visualisation.plot_sweep_html(ch6.current_sweep_dirfile.name)
177/170: pcp.visualisation.plot_sweep_html(ch6.current_sweep_dirfile.name)
177/171: ch6.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/172: pcp.visualisation.plot_sweep_html(ch6.current_sweep_dirfile.name)
177/173: for i in range(1):ch6.start_stream(); print "Waiting for 600 s", time.sleep(600), ch6.stop_stream()
177/174: for
177/175: for i
177/176:
t00 = time.time()
while True:
    t11 = time.time()
    if (t11-t00) > (60*30):
        break
    else:
        ch6.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/177: fcal1,ical1 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch1_i.npy')
177/178: fcal1,qcal1 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch1_q.npy')
177/179: icali1=interpolate.interp1d(fcal1,ical1)
177/180: from scipy import interpolate
177/181: from numpy import *; from matplotlib.pyplot import *; ion()
177/182: icali1=interpolate.interp1d(fcal1,ical1)
177/183: qcali1=interpolate.interp1d(fcal1,qcal1)
177/184: icorr1 = icali1(freqs); icorr1 -= icorr1.max(); icorr1 = 10**(icorr1/20); icorr1 = clip(icorr1,0.45,1.0)
177/185: freqs_ph_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
177/186: freqs_ch1,amps_ch1,phases_ch1 = genfromtxt(freqs_ph_file,unpack=1)
177/187: icorr1 = icali1(freqs_ch1); icorr1 -= icorr1.max(); icorr1 = 10**(icorr1/20); icorr1 = clip(icorr1,0.45,1.0)
177/188: qcorr1 = qcali1(freqs_ch1); qcorr1 -= qcorr1.max(); qcorr1 = 10**(qcorr1/20); qcorr1 = clip(qcorr1,0.45,1.0)
177/189: ch1.synth_lo.frequency
177/190: ch1.synth_lo.frequency = 750e6
177/191: ch1.synth_lo.frequency
177/192: ch1.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
177/193: ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1)
177/194: z1=ch1.roach_iface.gen_waveform_from_freqs(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1+1j*qcorr1)
177/195: import spectrum_analyser
177/196: s=spectrum_analyser.SpectrumAnalyser()
177/197:
figure()
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(freqs_ch1,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/198:
figure()
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(freqs_ch1,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/199:
figure()
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(freqs_ch1,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/200:
figure()
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(freqs_ch1,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/201: import spectrum_analyser
177/202: s=spectrum_analyser.SpectrumAnalyser()
177/203:
figure()
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(freqs_ch1,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/204:
figure()
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(freqs_ch1,peaks-peaks_n,'o',label='%.3frad'%phi)
    draw()
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/205: uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
177/206:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/207: import os
177/208:
for phi in radians(linspace(-10,10,81)):
    print '********',phi,'********'
    if os.path.exists('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi)):
        continue
    ch1.roach_iface.write_freqs_to_qdr(freqs_ch1,amps_ch1,phases_ch1,iq_correction=icorr1*(max(abs(z1[0])))/32767 + 1j*qcorr1*(max(abs(z1[1])))/32767, phase_delay_radians=phi)
    uf,us = s.sweep(750e6-260e6,750e6+260e6,0.01e6)
    peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    pause(0.1)    
    save('/home/muscat/ch1-1251_050819_phase_test_%0.3fradians.npy'%(phi),peaks-peaks_n)
177/209: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/210: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/211: ch3.input_atten.att
177/212: ch3.output_atten.att
177/213: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/214: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/215: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/216: amps
177/217: phases
177/218: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/219: ch4.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/220: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/221: pwd
179/6: xy_recv.xyz_receiver('deleteme')
179/7: rm deleteme
177/222: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/223: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/224: !google-chrome
177/225: ]
177/226: ch3.stop_stream()
177/227: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.05e3)
177/228: pcp.visualisation.plot_sweep_html(ch4.current_sweep_dirfile.name)
177/229: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/230: figure()
177/231: !echo $DISPLAY
177/232: figure()
177/233: from numpy import *; from matplotlib.pyplot import *; ion()
177/234: figure()
177/235: figure()
177/236: figure()
182/1: import pcp.visualisation
177/237: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
177/238: ch3.current_sweep_dirfile.name
182/2: pcp.visualisation.plot_sweep_html('/data1/muscat/sith/20190905_213940_sweep')
182/3: figure()
177/239: ch3.input_atten.att
177/240: ch3._initialise_atten_in()
177/241: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/242: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
177/243: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
177/244: save('/home/muscat/found_kids.npy',kids)
177/245: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
177/246: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
177/247: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.1e3)
177/248: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
179/8: xy_recv.xyz_receiver()
177/249: ch3.stch
177/250: ch3.start_stream()
177/251: 300/60.
177/252: t0=time.time()
177/253:
while True:
    if time.time()-t0 < 60*40*5:
        time.sleep(1)
    else:
        ch3.stop_stream()
        break
177/254: ch3.start_stream()
177/255: !kst2
177/256: !killall kst2
177/257: !kst2
177/258: !killall kst2
177/259: !kst2
177/260: !killall kst2
177/261: 512e6/2**21
177/262: 512e6/2**22
177/263: ch3.synth_lo.getFrequency()
177/264: ch3.synth_lo.setFrequency(784000000+200000)
177/265: ch3.synth_lo.setFrequency(784000000)
177/266: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases)
177/267: ptp(i),ptp(q)
177/268: ch3.stop_stream()
177/269: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.1e3)
183/1: import xy_recv
183/2: xy_recv.xyz_receiver()
177/270: ch3.start_stream()
177/271: ch3.stop_stream()
177/272: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/273: figure()
177/274: !echo $DISPLAY
183/3: !echo $DISPLAY
177/275: !export DISPLAY=:0
177/276: figure()
177/277: import os
177/278: os.environ['DISPLAY']
177/279: os.environ['DISPLAY']=':0'
177/280: figure()
177/281: td=ch3.current_dirfile
177/282:
for kidnum in range(len(freqs)):
    df = pcp.visualisation.get_df(td.getdata('K%03d_I'%kidnum),td.getdata('K%03d_Q'%kidnum),sd['sweep.K%03d'%kidnum].real,sd['sweep.K%03d'%kidnum].imag, pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].real),pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].imag),int(len(rf[:,kidnum])/2))
177/283: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
177/284: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
177/285:
for kidnum in range(len(freqs)):
    df = pcp.visualisation.get_df(td.getdata('K%03d_I'%kidnum),td.getdata('K%03d_Q'%kidnum),sd['sweep.K%03d'%kidnum].real,sd['sweep.K%03d'%kidnum].imag, pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].real),pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].imag),int(len(rf[:,kidnum])/2))
177/286:
for kidnum in range(len(freqs)):
    df = pcp.visualisation.get_df(td.getdata('K%03d_I'%kidnum),td.getdata('K%03d_Q'%kidnum),sd['sweep.K%03d'%kidnum].real,sd['sweep.K%03d'%kidnum].imag, pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].real),pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].imag),int(len(rf[:,kidnum])/2))
    plot(df)
177/287: show()
177/288:
for kidnum in range(len(freqs)):
    df = pcp.visualisation.get_df(td.getdata('K%03d_I'%kidnum),td.getdata('K%03d_Q'%kidnum),sd['sweep.K%03d'%kidnum].real,sd['sweep.K%03d'%kidnum].imag, pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].real),pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].imag),int(len(rf[:,kidnum])/2))
    psd(df,NFFT=2**12,Fs=488)
177/289: pcp.visualisation.get_df?
177/290: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
177/291: ch3.stop_stream()
184/1: import pcp
184/2: from numpy import *; from matplotlib.pyplot import *; ion()
184/3: name = ['phantom','clones','sith','hope','empire','jedi']
184/4: ch3 = pcp.mux_channel.muxChannel(name[2])
184/5: lo = 784e6
184/6:
#for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
184/7: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
184/8: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
184/9:
for ch in [ch6]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.synth_lo.frequency=784e6
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
184/10:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
184/11: amps
184/12: phases
184/13: clear
184/14: amps
184/15: freqs
184/16: freqs
185/1: import pcp
185/2: from numpy import *; from matplotlib.pyplot import *; ion()
185/3: name = ['phantom','clones','sith','hope','empire','jedi']
185/4: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
185/5: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
185/6: ch3 = pcp.mux_channel.muxChannel(name[2])
185/7:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
    ch.roach_iface.write_freqs_to_qdr(freqs,amps,phases)
185/8: lo = 784e6
185/9: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
185/10: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/11: import pcp.visualisation
185/12: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
185/13: figure()
185/14: plot(ones_like(freqs),ch3.toneslist.bb_freqs,'x')
185/15: plot(ones_like(freqs),abs(ch3.toneslist.bb_freqs),'o')
185/16: plot(ones_like(freqs),ch3.toneslist.bb_freqs,'x')
185/17: plot(ones_like(freqs),ch3.toneslist.bb_freqs,'x')
185/18: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/19: from pcp.lib import lib_dirfiles
185/20: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/21: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/22: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
185/23: save('/home/muscat/found_kids.npy',kids)
185/24: import change_toneslist_freqs
185/25: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
185/26: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
185/27: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/28:
for kidnum in range(len(freqs)):
    plot(sd['sweep.freqs'],abs(sd['sweep.K%03d'%kidnum]))
185/29: sd.keys
185/30: sd.keys()
185/31:
for kidnum in range(len(freqs)):
    plot(rf[kidnum],abs(sd['sweep.K%03d'%kidnum]))
185/32:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(sd['sweep.K%03d'%kidnum]))
185/33: close('all')
185/34:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])))
185/35:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='r')
185/36: close('all')
185/37:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='r')
185/38: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/39: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/40: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/41:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='g')
185/42: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
185/43: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/44: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/45: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/46:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='g')
185/47:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='b')
185/48: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j].real)**2+gradient(sd['sweep.K%03d'%j].imag)**2),j].real for j in range(len(rf[0]))])
185/49: save('/home/muscat/found_kids.npy',kids)
185/50: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
185/51: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
185/52: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/53: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/54: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/55: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
185/56: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/57:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='g')
185/58: [axvline(k) for k in range(len(ch3.toneslist.bb_freqs+lo))]
185/59: [axvline(k+lo) for k in range(len(ch3.toneslist.bb_freqs))]
185/60: [axvline(k+lo) for k in ch3.toneslist.bb_freqs)]
185/61: [axvline(k+lo) for k in ch3.toneslist.bb_freqs]
185/62: figure()
185/63:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real+1j*sd['sweep.K%03d'%kidnum].imag)),color='g')
185/64: [axvline(k+lo) for k in ch3.toneslist.bb_freqs]
185/65: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/66:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='g')
185/67:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='r')
185/68: kids = array([rf[nanargmax(gradient(sd['sweep.K%03d'%j])),j].real for j in range(len(rf[0]))])
185/69: [axvline(k,color='r') for k in kids]
185/70: kids = array([rf[nanargmax(abs(gradient(sd['sweep.K%03d'%j]))),j].real for j in range(len(rf[0]))])
185/71: [axvline(k,color='r') for k in kids]
185/72: save('/home/muscat/found_kids.npy',kids)
185/73: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
185/74: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
185/75: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/76: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/77: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/78:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='g')
185/79: kids = array([rf[nanargmax(abs(gradient(sd['sweep.K%03d'%j]))),j].real for j in range(len(rf[0]))])
185/80: [axvline(k,color='g') for k in kids]
185/81: figure()
185/82:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],max(abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag))),'o',color='g')
185/83:
for kidnum in range(len(freqs)):
    plot(kids[kidnum],max(abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag))),'o',color='g')
185/84: fcal3,qcal3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_q.npy')
185/85: fcal3,ical3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_i.npy')
185/86: icali3=interpolate.interp1d(fcal3,ical3)
185/87: from scipy import interpolate
185/88: icali3=interpolate.interp1d(fcal3,ical3)
185/89: qcali3=interpolate.interp1d(fcal3,qcal3)
185/90: icorr3 = icali3(freqs); icorr3 -= icorr3.max(); icorr3 = 10**(icorr3/20); icorr3 = clip(icorr3,0.45,1.0)
185/91: freqs
185/92: icorr3 = icali3(ch3.toneslist.bb_freqs); icorr3 -= icorr3.max(); icorr3 = 10**(icorr3/20); icorr3 = clip(icorr3,0.45,1.0)
185/93: qcorr3 = qcali3(ch3.toneslist.bb_freqs); qcorr3 -= qcorr3.max(); qcorr3 = 10**(qcorr3/20); qcorr3 = clip(qcorr3,0.45,1.0)
185/94: icorr3[0]
185/95: icorr3[1]
185/96: icorr3[250]
185/97: icorr3[120]
185/98: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3))
185/99: ptp(i),ptp(q)
185/100: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(1./icorr3+1j/qcorr3))
185/101: ptp(i),ptp(q)
185/102: clf()
185/103:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='g')
185/104: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3))
185/105: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/106: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/107: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/108: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/109: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/110:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='b')
185/111:
for kidnum in range(len(freqs)):
    plot(kids[kidnum],max(abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag))),'o',color='b')
185/112: ch3.input_atten.att
185/113: ch3.input_atten.att=13
185/114: ch3.output_atten.att=7
185/115: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/116: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/117: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/118: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/119:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='r')
185/120:
for kidnum in range(len(freqs)):
    plot(kids[kidnum],max(abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag))),'o',color='r')
185/121: ch3.output_atten.att
185/122: ch3.output_atten.att=10
185/123: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/124: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/125: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/126:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='r')
185/127: ch3.output_atten.att=7
185/128: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/129: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+qcorr3))
185/130: amax(abs(i))*2,amax(abs(q))*2
185/131: abs(i)
185/132: icorr3[120]
185/133: nonzero(isnan(icorr3))
185/134: nonzero(isnan(qcorr3))
185/135: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3))
185/136: amax(abs(i))*2,amax(abs(q))*2
185/137: 65535/18761.5991460781
185/138: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.5)
185/139: amax(abs(i))*2,amax(abs(q))*2
185/140: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.4)
185/141: amax(abs(i))*2,amax(abs(q))*2
185/142: i,q=ch3.roach_iface.gen_waveform_from_freqs(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.3)
185/143: amax(abs(i))*2,amax(abs(q))*2
185/144: 20*log10(3.3)
185/145: ch3.input_atten.att=23.5
185/146: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.3)
185/147: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/148: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/149: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/150:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='orange')
185/151: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/152: ch3.synth_lo.getFrequency()
185/153: ch3.synth_lo.setFrequency(784000000+100000)
185/154: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/155: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/156: amax(abs(i))*2,amax(abs(q))*2
185/157: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
185/158: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2,amin((i))*2,amin((q))*2
185/159:
for kidnum in range(len(freqs)):
    plot(kids[kidnum],max(abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag))),'o',color='orange')
185/160: kids = array([rf[nanargmax(abs(gradient(sd['sweep.K%03d'%j]))),j].real for j in range(len(rf[0]))])
185/161: save('/home/muscat/found_kids.npy',kids)
185/162: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
185/163: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.3)
185/164: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/165: ch3.synth_lo.getFrequency()
185/166: ch3.synth_lo.setFrequency(784000000)
185/167: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/168: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/169: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/170: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/171:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='k')
185/172:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='orange')
185/173: [axvline(k,color='orange') for k in kids]
185/174: ch3.start_stream(); print "Waiting for 60 s", time.sleep(60), ch3.stop_stream()
185/175: figure()
185/176: td=ch3.current_dirfile
185/177: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/178:
for kidnum in range(len(freqs)):
    df = pcp.visualisation.get_df(td.getdata('K%03d_I'%kidnum),td.getdata('K%03d_Q'%kidnum),sd['sweep.K%03d'%kidnum].real,sd['sweep.K%03d'%kidnum].imag, pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].real),pcp.visualisation.get_dxdf(rf[:,kidnum],sd['sweep.K%03d'%kidnum].imag),int(len(rf[:,kidnum])/2))
    psd(df,NFFT=len(df),Fs=488)
185/179: df[0]
185/180: td.getdata('K%03d_I'%kidnum)[0]
185/181: td.getdata('K%03d_Q'%kidnum),sd['sweep.K%03d'%kidnum][0]
185/182: td.getdata('K%03d_Q'%kidnum)[0]
185/183: sd['sweep.K%03d'%kidnum].real[0]
185/184: sd['sweep.K%03d'%kidnum].imag[0]
185/185: rf[:,kidnum][0]
185/186: [axvline( rf[:,k][int(len(rf[:,k])/2)]   ,color='orange') for k in range(len(kids)) ]
185/187: sd['sweep.K%03d'%kidnum].real[201]
185/188: td.getdata('K%03d_I'%kidnum)[201]
185/189: td.getdata('K%03d_Q'%kidnum)[201]
185/190: sd['sweep.K%03d'%kidnum].imag[201]
185/191: sd['sweep.K%03d'%kidnum].imag[200]
185/192: ch3.start_stream()
185/193: ch3.synth_lo.setFrequency(784000000+100000)
185/194: ch3.synth_lo.setFrequency(784000000+200000)
185/195: ch3.stop_stream()
185/196:
t00 = time.time()
while True:
    t11 = time.time()
    if (t11-t00) > (60*25):
        break
    else:
        ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/197: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/198: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/199: rf[:,kidnum][0]
185/200: figure()
185/201:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='orange')
185/202: ch3.input_atten.att
185/203: ch3.input_atten.att=24.0
185/204: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/205: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/206: rf[:,kidnum][0]
185/207: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/208:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='red')
185/209: ch3.input_atten.att=25.0
185/210: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/211: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/212: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/213:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='green')
185/214: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/215: ch3.output_atten.att
185/216: ch3.output_atten.att=5
185/217: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/218: ch3.output_atten.att=6
185/219: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/220: ch3.synth_lo.setFrequency(784000000+200000)
185/221: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/222: ch3.output_atten.att=5
185/223: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/224: ch3.output_atten.att=4
185/225: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/226: ch3.synth_lo.setFrequency(784000000)
185/227: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
185/228: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/229: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/230: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/231:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='blue')
185/232: kids = array([rf[nanargmax(abs(gradient(sd['sweep.K%03d'%j]))),j].real for j in range(len(rf[0]))])
185/233: save('/home/muscat/found_kids.npy',kids)
185/234: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
185/235: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.3)
185/236: figure()
185/237: pcp.visualisation.plot_sweep_html(ch3.current_sweep_dirfile.name)
186/1: import xy_recv
185/238: ch3.roach_iface.active_pps()
185/239: ch3.start_stream()
186/2: xy_recv.xyz_receiver()
185/240: ch3.start_stream()
185/241: ch3.stop_stream()
185/242: clf()
185/243:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='blue')
185/244: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
185/245: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
185/246: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
185/247:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='red')
185/248: ch3.start_stream()
186/3: xy_recv.xyz_receiver()
185/249: ch3.stop_stream()
185/250: import os
185/251: pwd
185/252: !mkdir /home/muscat/zmaps
185/253: 'cp -r /home/sam/xy_recv.txt %s /home/muscat/zmap/z+000'%(ch3.current_dirfile.name)
185/254: !mkdir /home/muscat/zmap/z+000
185/255: 'cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+000'%(ch3.current_dirfile.name)
185/256: !mkdir /home/muscat/zmaps/z+000
185/257: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+000'%(ch3.current_dirfile.name))
185/258: ls /home/muscat/zmaps/z+000
185/259: !ls '/home/muscat/zmaps/z+000/20190906_174357'
185/260: ch3.start_stream()
186/4: xy_recv.xyz_receiver()
185/261: ch3.stop_stream()
185/262: ch3.stop_stream()
185/263: !mkdir /home/muscat/zmaps/z+051
185/264: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+051'%(ch3.current_dirfile.name))
186/5: ch3.start_stream()
185/265: ch3.start_stream()
186/6: xy_recv.xyz_receiver()
185/266: ch3.start_stream()
185/267: !mkdir /home/muscat/zmaps/z+051_2
185/268: !mkdir /home/muscat/zmaps/z+051_1
185/269: !rmdir /home/muscat/zmaps/z+051_2
185/270: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+051_1'%(ch3.current_dirfile.name))
185/271: ch3.stop_stream()
185/272: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+051_1'%(ch3.current_dirfile.name))
185/273: ch3.stop_stream()
185/274: ch3.start_stream()
187/1: from scipy import interpolate
187/2: from pcp.lib import lib_dirfiles
188/1: import pcp
188/2: from pcp.lib import lib_dirfiles
188/3: name = ['phantom','clones','sith','hope','empire','jedi']
188/4: ch3 = pcp.mux_channel.muxChannel(name[2])
188/5: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
188/6: from numpy import *; from matplotlib.pyplot import *; ion()
188/7: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
188/8:
for ch in [ch3]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
188/9: lo = 784e6
188/10: ch.synth_lo.setFrequency(lo)
188/11: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
188/12: kname,freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
188/13: fcal3,ical3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_i.npy')
188/14: fcal3,qcal3 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch3_q.npy')
188/15: icali3=interpolate.interp1d(fcal3,ical3)
188/16: from scipy import interpolate
188/17: icali3=interpolate.interp1d(fcal3,ical3)
188/18: qcali3=interpolate.interp1d(fcal3,qcal3)
188/19: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=None)
188/20: icorr3 = icali3(ch3.toneslist.bb_freqs); icorr3 -= icorr3.max(); icorr3 = 10**(icorr3/20); icorr3 = clip(icorr3,0.45,1.0)
188/21: qcorr3 = qcali3(ch3.toneslist.bb_freqs); qcorr3 -= qcorr3.max(); qcorr3 = 10**(qcorr3/20); qcorr3 = clip(qcorr3,0.45,1.0)
188/22: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.3)
188/23: ch3.input_atten.att=25.0
188/24: ch3.output_atten.att=4
188/25: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
188/26: ch3.roach_iface.active_pps()
188/27: ch3.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
188/28: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
188/29: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
188/30: figure()
188/31:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='k')
188/32: clf()
188/33:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='red')
188/34: kids = array([rf[nanargmax(abs(gradient(sd['sweep.K%03d'%j]))),j].real for j in range(len(rf[0]))])
188/35: save('/home/muscat/found_kids.npy',kids)
188/36: import change_toneslist_freqs
188/37: change_toneslist_freqs.change_freqs('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',load('/home/muscat/found_kids.npy'),'/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt')
188/38: [axvline( rf[:,k][int(len(rf[:,k])/2)]   ,color='orange') for k in range(len(kids)) ]
188/39: ch3.toneslist.tonelistfile = '/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt';ch3.toneslist.load_tonelist(); ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,amps,phases,iq_correction=(icorr3+1j*qcorr3)/3.3)
188/40: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
188/41: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
188/42:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],abs(gradient(sd['sweep.K%03d'%kidnum].real)+1j*gradient(sd['sweep.K%03d'%kidnum].imag)),color='red')
188/43: [axvline( rf[:,k][int(len(rf[:,k])/2)]   ,color='orange') for k in range(len(kids)) ]
188/44: cla()
188/45: clf()
188/46: ch3.start_stream()
186/7: xy_recv.xyz_receiver()
188/47: ch3.stop_stream()
188/48: import os
188/49: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+051'%(ch3.current_dirfile.name))
188/50: ch3.start_stream()
186/8: xy_recv.xyz_receiver()
188/51: ch3.stop_stream()
188/52: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z-051'%(ch3.current_dirfile.name))
186/9: xy_recv.xyz_receiver()
188/53: ch3.start_stream()
188/54: ch3.stop_stream()
188/55: os.system('cp -r /home/sam/xy_recv.txt %s /home/muscat/zmaps/z+000'%(ch3.current_dirfile.name))
189/1: load('ch1_lo750_corrected.npy')
189/2: load('ch1_lo750_corrected.npy')
189/3: ls
189/4: from numpy import *; from matplotlib.pyplot import *; ion()
189/5: load('ch1_lo750_uncorrected.npy')
189/6: f,m=load('ch1_lo750_uncorrected.npy')
189/7: plot f,m
189/8: %autocall
189/9: plot f,m
189/10: f,m=load('ch1_lo750ncorrected.npy')
189/11: f,m=load('ch1_lo750_corrected.npy')
189/12: plot f,m
190/1: from numpy import *; from matplotlib.pyplot import *; ion()
190/2: freqs_ph_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
190/3: fr,am,ph =  genfromtxt(freqs_ph_file,unpack=True)
190/4: len fr
190/5: %autoca
190/6: %autocall
190/7: len fr
190/8: figure()
190/9: plot fr, am
190/10: lo_freqs=(750e6,775e6,800e6)
190/11:
for ch in arange(6)+1:
    for lo in lo_freqs:
        f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        rf= fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]-10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='ch%d_lo%d_uncorrected'%(ch,lo/1e6))
190/12: rf[j]-10000
190/13: (rf[j]-10000)/1e6
190/14: fr[0]
190/15: f[0]
190/16: m[(f>rf[j]-10000)&(f<rf[j]-10000)]
190/17:
for ch in arange(6)+1:
    for lo in lo_freqs:
        f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        rf= fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='ch%d_lo%d_uncorrected'%(ch,lo/1e6))
190/18: ls
190/19: ls ~/
190/20: ls /home/muscat/rfcal_23082019/phase_test/
190/21:
for ch in (1,3,4,5,6):
    for lo in lo_freqs:
        f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        rf= fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='ch%d_lo%d_uncorrected'%(ch,lo/1e6))
190/22: cla()
190/23: ls
190/24:
for ch in (1,3,4,5,6):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        except: continue
        rf= fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='ch%d_lo%d_uncorrected'%(ch,lo/1e6))
190/25: legend()
190/26: cla()
190/27: subplot(211)
190/28:
for ch in (1,3,4,5,6):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        except: continue
        rf= fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='ch%d_lo%d_uncorrected'%(ch,lo/1e6))
190/29: subplot(212)
190/30:
for ch in (1,3,4,5,6):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='ch%d_lo%d_corrected'%(ch,lo/1e6))
190/31: subplot(211)
190/32:
for ch in (1,3,4,5,6):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        except: continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='images_ch%d_lo%d_uncorrected'%(ch,lo/1e6))
190/33: subplot(212)
190/34:
for ch in (1,3,4,5,6):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/35: legend()
190/36: subplot(211)
190/37: legend()
190/38: figure()
190/39:
for ch in (1,3,4,5,6):
    for lo in (750e6,):
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/40: clf()
190/41:
for ch in (1,):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/42:
for ch in (1,):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/43: clf()
190/44:
for ch in (1,):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(rf,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/45:
for ch in (1,):
    for lo in lo_freqs:
        try: f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(rf,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/46: clf()
190/47: subplot(6,1,1)
190/48: clf()
190/49:
for ch in (1,2,3,4,5,6):
    subplot(6,1,ch)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[])
            continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(rf,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/50: clf()
190/51:
for ch in (1,2,3,4,5,6):
    subplot(6,1,ch)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[])
            continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(rf,tones,'o',label='tones_ch%d_lo%d_corrected'%(ch,lo/1e6))
190/52: clf()
190/53:
for ch in (1,2,3,4,5,6):
    subplot(6,1,ch)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(rf,tones,'o',label='tones_ch%d_lo%d_corrected'%(ch,lo/1e6))
    xlim(400e6,1100e6)
190/54: clf()
190/55:
for ch in (1,2,3,4,5,6):
    subplot(6,1,ch)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(rf,tones,'o',label='tones_ch%d_lo%d_corrected'%(ch,lo/1e6))
    xlim(450e6,1100e6)
190/56:
for ch in (1,2,3,4,5,6):
    subplot(6,1,ch)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr+lo,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
    xlim(450e6,1100e6)
    legend(ncol=2)
190/57: clf()
190/58:
for ch in (1,2,3,4,5,6):
    subplot(6,2,ch*2-1)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr+lo,tones,'o',label='tones_ch%d_lo%d_uncorrected'%(ch,lo/1e6))
    xlim(400e6,1100e6)
190/59:
for ch in (1,2,3,4,5,6):
    subplot(6,2,ch*2-1)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_uncorrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr+lo,tones,'o',label='images_ch%d_lo%d_uncorrected'%(ch,lo/1e6))
    xlim(400e6,1100e6)
    ylim(-80,-20)
    legend()
190/60:
for ch in (1,2,3,4,5,6):
    subplot(6,2,ch*2)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= 1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr+lo,tones,'o',label='tones_ch%d_lo%d_corrected'%(ch,lo/1e6))
    xlim(400e6,1100e6)
190/61:
for ch in (1,2,3,4,5,6):
    subplot(6,2,ch*2)
    for lo in lo_freqs:
        try: 
            f,m = load('ch%d_lo%d_corrected.npy'%(ch,lo/1e6))
        except: 
            plot([],[],'o')
            continue
        rf= -1*fr+lo
        tones = array([amax(m[(f>rf[j]-10000)&(f<rf[j]+10000)]) for j in range(len(rf))])
        plot(fr+lo,tones,'o',label='images_ch%d_lo%d_corrected'%(ch,lo/1e6))
    xlim(400e6,1100e6)
    ylim(-80,-20)
    legend()
190/62: tight_layout()
192/1: freqs,amps,phases,iqi,iqq,phi = genfromtxt('/home/sam/data/md-e-a/225mk_rubber_cement_20190903/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',unpack=1,skip_header=1)
194/1: from numpy import *; from matplotlib.pyplot import *; ion()
194/2: f,z = load('ch1_lo750_uncorrected.npy')
194/3: load('ch1_lo750_uncorrected.npy')
194/4: ls -l
195/1: from numpy import *; from matplotlib.pyplot import *; ion()
195/2: f,m load('ch1_lo750_uncorrected.npy')
195/3: f,m =load('ch1_lo750_uncorrected.npy')
195/4: plot f,m
195/5: plot(f,m)
195/6: f,m =load('ch6_lo750_uncorrected.npy')
195/7: clf()
195/8: plot(f,m)
196/1: import pcp
196/2: name = ['phantom','clones','sith','hope','empire','jedi']
196/3: from numpy import *; from matplotlib.pyplot import *; ion()
196/4: ch1 = pcp.mux_channel.muxChannel(name[0])
196/5: ch2 = pcp.mux_channel.muxChannel(name[1])
196/6: ch3 = pcp.mux_channel.muxChannel(name[2])
196/7: ch4 = pcp.mux_channel.muxChannel(name[3])
196/8: ch5 = pcp.mux_channel.muxChannel(name[4])
196/9: ch6 = pcp.mux_channel.muxChannel(name[5])
196/10: lo
196/11: lo = 784e6
196/12:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
196/13: ch.synth_lo.SynthHDDevice.getHelp()
196/14: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
196/15: fr,am,ph =  genfromtxt(freqs_ph_file,unpack=True)
196/16: fr,am,ph =  genfromtxt(freqs_file,unpack=True)
196/17: ch2.roach_iface.write_freqs_to_qdr(fr,am,ph)
196/18: s=spectrum_analyser.SpectrumAnalyser()
196/19: import spectrum_analyser
196/20: s=spectrum_analyser.SpectrumAnalyser()
196/21: s=spectrum_analyser.SpectrumAnalyser()
196/22: s=spectrum_analyser.SpectrumAnalyser()
196/23: s=spectrum_analyser.SpectrumAnalyser()
196/24: s=spectrum_analyser.SpectrumAnalyser()
196/25: s=spectrum_analyser.SpectrumAnalyser()
196/26: !ping 10.73.4.221
196/27: s=spectrum_analyser.SpectrumAnalyser()
196/28: spectrum_analyser.IP_ADDR
196/29: !ping 10.73.4.221
196/30: s=spectrum_analyser.SpectrumAnalyser()
196/31: uf,us = s.sweep(lo-260e6,lo+260e6,0.1e6)
196/32: figure()
196/33: autocall
196/34: plot uf us
196/35: plot uf,us
196/36: s.resolution_bandwidth
196/37: s.resolution_bandwidth()
196/38: s.resolution_bandwidth(1e4)
196/39: plot uf,us
196/40: uf,us = s.sweep(lo-260e6,lo+260e6,0.1e6)
196/41: plot uf,us
196/42: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
196/43: cla()
196/44: plot uf,us
196/45: s.resolution_bandwidth_auto(1)
196/46: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
196/47: plot uf,us
196/48: s.resolution_bandwidth()
196/49: s.resolution_bandwidth(3e4)
196/50: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
196/51: plot uf,us
196/52: ch2.input_atten.att=0
196/53: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
196/54: plot uf,us
196/55: clf()
196/56: plot uf,us
196/57: i,q=ch2.roach_iface.gen_waveform_from_freqs(fr,am,ph)
196/58: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
196/59:
peaks=array([max(us[where((uf>freqs_ch1[j]+750e6-10e3)&(uf<freqs_ch1[j]+750e6+10e3))]) for j in range(len(freqs_ch1))])

peaks_n=array([max(us[where((uf-750e6>-freqs_ch1[j]-10e3)&(uf-750e6<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))])
196/60: freqs_ch1 = fr
196/61:
peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])

peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))])
196/62: figure()
196/63: plot peaks,'x'
196/64: plot peaks_n
196/65: plot(peaks_n-peaks,'o')
196/66: fcal2,qcal2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
196/67: fcal2,ical2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
196/68: from scipy import interpolate
196/69: freqs = fr
196/70: icorr2 = icali2(freqs); icorr2 -= icorr2.max(); icorr2 = 10**(icorr2/20); icorr2 = clip(icorr2,0.45,1.0)
196/71: icali2=interpolate.interp1d(fcal2,ical2)
196/72: qcali2=interpolate.interp1d(fcal2,qcal2)
196/73: icorr2 = icali2(freqs); icorr2 -= icorr2.max(); icorr2 = 10**(icorr2/20); icorr2 = clip(icorr2,0.45,1.0)
196/74: qcorr2 = qcali2(freqs); qcorr2 -= qcorr2.max(); qcorr2 = 10**(qcorr2/20); qcorr2 = clip(qcorr2,0.45,1.0)
196/75: i,q=ch2.roach_iface.gen_waveform_from_freqs(fr,am,ph,iq_correction=icorr2+1j*qcorr2)
196/76: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
196/77: i,q=ch2.roach_iface.gen_waveform_from_freqs(fr,am,ph,iq_correction=(icorr2+1j*qcorr2)*(77000./2**16))
196/78: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
196/79: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
196/80: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
196/81: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
196/82: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767)
196/83: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
196/84:
peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])

peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))])
196/85: plot(peaks_n-peaks,'o')
196/86: i,q=ch2.roach_iface.gen_waveform_from_freqs(fr,am,ph,iq_correction=icorr2*(max(abs(z2[0])))/32767 + 1j*qcorr2*(max(abs(z2[1])))/32767)
196/87: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
196/88: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767)
196/89: i,q=ch2.roach_iface.gen_waveform_from_freqs(fr,am,ph,iq_correction=(icorr2+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767 )
196/90: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
196/91: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6),
196/92: uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
196/93:
peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])

peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))])
196/94: plot(peaks_n-peaks,'o')
196/95: icorr2[0]
196/96: 10**(0.1/10)
196/97: 10**(0.2/10)
196/98: vadjust= linspace(0.01,0.25,15)
196/99: vadjust
196/100: vadjust= linspace(0.01,0.25,16)
196/101: vadjust
196/102: vadjust= linspace(0.01,0.25,25)
196/103: vadjust
196/104: vadjust= linspace(0.00,0.25,6)
196/105: vadjust
196/106: 10**(0.2/20)
196/107: 10**(linspace(-0.3,0.3,7)/20)
196/108: 10**(linspace(-0.3,0.3,13)/20)
196/109: 10**(linspace(-0.3,0.3,13)/20)
196/110: vadjust=10**(linspace(-0.3,0.3,13)/20)
196/111:
for i,v in enumerate(vadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=((icorr2*v)+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767*2)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('i_adjust_%f.npy',array(uf,us))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,'o')
196/112:
for i,v in enumerate(vadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=((icorr2*v)+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767*2)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('/home/muscat/i_adjust_%f.npy',array(uf,us))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,'o')
196/113:
for i,v in enumerate(vadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=((icorr2*v)+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767*2)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('/home/muscat/i_adjust_%f.npy',array([uf,us]))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,'o')
196/114: !rm /home/muscat/i_adjust_%f.npy
196/115:
for i,v in enumerate(vadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=((icorr2*v)+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767*2)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('/home/muscat/i_adjust_%f.npy'%v,array([uf,us]))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,'o')
196/116: clf()
196/117:
for i,v in enumerate(vadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=((icorr2*v)+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767*2)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('/home/muscat/i_adjust_%f.npy'%v,array([uf,us]))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,'o',label=str(v))
    draw(); pause(0.1)
196/118: vadjust=10**(linspace(-2,2,5)/20)
196/119: clf()
196/120:
for i,v in enumerate(vadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=((icorr2*v)+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767*2)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('/home/muscat/i_adjust_%f.npy'%v,array([uf,us]))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,label=str(v))
    draw(); pause(0.1)
196/121: phiadjust = radians(linspace(-10,10,5))
196/122: ch2.roach_iface.write_freqs_to_qdr?
196/123: ch2.roach_iface.write_freqs_to_qdr??
196/124:
for i,v in enumerate(phiadjust):
    ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=None,phase_delay_radians=v)
    uf,us=s.uf,us = s.sweep(lo-260e6,lo+260e6,0.01e6)
    save('/home/muscat/phi_adjust_%f.npy'%v,array([uf,us]))
    peaks=array([max(us[where((uf>freqs_ch1[j]+lo-10e3)&(uf<freqs_ch1[j]+lo+10e3))]) for j in range(len(freqs_ch1))])
    peaks_n=array([max(us[where((uf-lo>-freqs_ch1[j]-10e3)&(uf-lo<-freqs_ch1[j]+10e3))]) for j in range(len(freqs_ch1))]) 
    plot(peaks_n-peaks,label=str(v))
    draw(); pause(0.1)
196/125: ls
196/126: ls ~/
196/127: vadj={}
196/128: vadj['freq']=uf
196/129:
for i,v in enumerate(vadjust):
    f,s = load('/home/muscat/i_adjust_%f.npy'%v)
    vadj[i]=m
196/130:
for i,v in enumerate(vadjust):
    f,s = load('/home/muscat/i_adjust_%f.npy'%v)
    vadj[i]=s
196/131: vadj['adjustment']=vadjust
196/132: figure()
196/133: plot(vadj['freq'],vadj[0])
196/134: [plot(vadj['freq'],vadj[k]) for j in range(len(vadj))]
196/135: [plot(vadj['freq'],vadj[j]) for j in range(len(vadj))]
196/136: vadjust=10**(linspace(-0.3,0.3,13)/20)
196/137: vadjust=10**(linspace(-2,2,5)/20)
196/138: vadjust = sorted(concatenate([10**(linspace(-0.3,0.3,13)/20),10**(linspace(-2,2,5)/20)]))
196/139: vadj={}
196/140: vadjust-=array(vadjust)
196/141: vadjust
196/142: vadjust = array(sorted(concatenate([10**(linspace(-0.3,0.3,13)/20),10**(linspace(-2,2,5)/20)])))
196/143: vadjust
196/144: vadj['adjustment']=vadjust
196/145: vadj['freq']=uf
196/146:
for i,v in enumerate(vadjust):
    f,s = load('/home/muscat/i_adjust_%f.npy'%v)
    vadj[i]=s
196/147: [plot(vadj['freq'],vadj[j]) for j in range(len(vadj))]
196/148: [plot(vadj['freq'],vadj[j]) for j in range(len(vadjust))]
196/149: clf()
196/150: [plot(vadj['freq'],vadj[j]) for j in range(len(vadjust))]
196/151: 1.0339-0.75
196/152: 1.0339-0.784
196/153: lo
196/154: ch2.output_atten=0
196/155: ch2._initialise_atten_out()
196/156: ch2.output_atten.att=0
196/157: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
196/158: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
196/159: ch2.output_atten.att=10
196/160: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
196/161: ch2.output_atten.att=20
196/162: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
196/163: ch2.start_stream?
196/164: ch2.start_stream(stream_time=10)
196/165: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
196/166: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
197/1: import pcp
197/2: name = ['phantom','clones','sith','hope','empire','jedi']
197/3: ch2 = pcp.mux_channel.muxChannel(name[1])
197/4: lo = 784e6
197/5:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
197/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
197/7: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
197/8: from scipy import interpolate
197/9: from numpy import *; from matplotlib.pyplot import *; ion()
197/10: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
197/11: fcal2,ical2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
197/12: fcal2,qcal2 = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
197/13: icali2=interpolate.interp1d(fcal2,ical2)
197/14: qcali2=interpolate.interp1d(fcal2,qcal2)
197/15: icorr2 = icali2(freqs); icorr2 -= icorr2.max(); icorr2 = 10**(icorr2/20); icorr2 = clip(icorr2,0.45,1.0)
197/16: qcorr2 = qcali2(freqs); qcorr2 -= qcorr2.max(); qcorr2 = 10**(qcorr2/20); qcorr2 = clip(qcorr2,0.45,1.0)
197/17: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
197/18: i,q=z2
197/19: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
197/20: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767)
197/21: z2c=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(max(abs(z2[0]+1j*z2[1])))/32767)
197/22: i,q=z2c
197/23: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
197/24: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=None)
197/25: i,q=z2c
197/26: i,q=z2
197/27: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
197/28: z2=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=icorr2+1j*qcorr2)
197/29: z2c=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/30: i,q=z2c
197/31: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
197/32: ch2.roach_iface.write_freqs_to_qdr(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/33: z2c=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32768)
197/34: i,q=z2c
197/35: amax(abs(i))*2,amax(abs(q))*2,amax((i))*2,amax((q))*2
197/36: z2c=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/37: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
197/38: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
197/39: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
197/40: from pcp.lib import lib_dirfiles
197/41: sd,meta=lib_dirfiles.read_sweep_dirfile(ch3.current_sweep_dirfile)
197/42: sd,meta=lib_dirfiles.read_sweep_dirfile(ch2.current_sweep_dirfile)
197/43: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
197/44:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='k')
197/45: ch2.toneslist.tonelistfile = freqs_file;ch2.toneslist.load_tonelist(); ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/46: freqs_file
197/47: file=open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist','w')
197/48: file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
197/49: iqi=((icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767).real
197/50: iqi=((icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767).real
197/51: iqq=((icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767).imag
197/52: iqp=zeros(len(iqi))
197/53:
for f,a,p,i,q,phi in zip(freqs,amps,phases,iqi,iqq,iqp):
    file.write('%f\t%f\t%f\t%f\t%f\t%f\t\n'%(f,a,p,i,q,phi))
197/54: file.close()
197/55: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/56: file=open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist','w')
197/57: file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
197/58:
for f,a,p,i,q,phi in zip(freqs,amps,phases,iqi,iqq,iqp):
    file.write('%f\t%f\t%f\t%f\t%f\t%f\n'%(f,a,p,i,q,phi))
197/59: file.close()
197/60: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/61: len freqs
197/62: autocall
197/63: len freqs
197/64: len amps
197/65: len phases
197/66: len iqi
197/67:
len icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/3
    ...: 2767
197/68: len icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767
197/69: len(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/70: len((icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/71: len ch2.toneslist.bb_freqs
197/72: ch2.toneslist.bb_freqs
197/73: freqs
197/74: ch2.rf
197/75: ch2.toneslist.rf_freqs
197/76: file=open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist','w')
197/77: file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
197/78:
for f,a,p,i,q,phi in zip(freqs,amps,phases,iqi,iqq,iqp):
    file.write('%f\t%f\t%f\t%f\t%f\t%f\n'%(f+lo,a,p,i,q,phi))
197/79: lo
197/80: file.close()
197/81: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/82: ch2.toneslist.amp
197/83: ch2.toneslist.amps
197/84: amps
197/85: ch2.toneslist._bandwidth
197/86: ch2.toneslist._bandwidth = 512e6
197/87: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/88: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=0.5e3)
197/89: sd,meta=lib_dirfiles.read_sweep_dirfile(ch2.current_sweep_dirfile)
197/90: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
197/91:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%03d'%kidnum])),color='k')
197/92: sd.keys
197/93: sd.keys()
197/94:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%04d'%kidnum])),color='k')
197/95: clf()
197/96:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%04d'%kidnum])),color='k')
197/97: clf()
197/98: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
197/99: sd,meta=lib_dirfiles.read_sweep_dirfile(ch2.current_sweep_dirfile)
197/100: rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
197/101:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%04d'%kidnum])),color='k')
197/102: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=None)
197/103: sd,meta=lib_dirfiles.read_sweep_dirfile(ch2.current_sweep_dirfile); rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
197/104:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%04d'%kidnum])),color='r')
197/105: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
197/106: sd,meta=lib_dirfiles.read_sweep_dirfile(ch2.current_sweep_dirfile); rf = sd['sweep.bb_freqs']+array(len(sd['sweep.bb_freqs'])*[sd['sweep.lo_freqs']]).T
197/107:
for kidnum in range(len(freqs)):
    plot(rf[:,kidnum],20*log10(abs(sd['sweep.K%04d'%kidnum])),color='orange')
197/108: ch2.start_stream(stream_time=10)
197/109: td=ch3.current_dirfile
197/110: td=ch2.current_dirfile
197/111:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%03d_I'%kidnum); q=td.getdata('K%03d_Q'%kidnum); a=abs(i+1j*q), p=angle(i+1j*q)
    psd(i,NFFT=len(i),Fs=488)
197/112:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%03d_I'%kidnum); q=td.getdata('K%03d_Q'%kidnum); a=np.abs(i+1j*q), p=angle(i+1j*q)
    psd(i,NFFT=len(i),Fs=488)
197/113: i=td.getdata('K%03d_I'%kidnum)
197/114:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q), p=angle(i+1j*q)
    psd(i,NFFT=len(i),Fs=488)
197/115: kidnum=0
197/116: i=td.getdata('K%04d_I'%kidnum)
197/117: i
197/118:  q=td.getdata('K%04d_Q'%kidnum)
197/119: a=np.abs(i+1j*q)
197/120:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    psd(i,NFFT=len(i),Fs=488)
197/121: clf()
197/122:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    psd(i,NFFT=len(i),Fs=488)
197/123:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    px,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    plot(freqs[kidnum],mean(px[pf>200]),'o',color='r')
197/124: clf()
197/125:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    px,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    plot(freqs[kidnum],mean(px[pf>200]),'o',color='r')
197/126:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(211);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(212);    plot(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
197/127:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    plot(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    plot(freqs[kidnum],mean(pp[pf>200])/mean(a),'o',color='r')
197/128: clf()
197/129:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    plot(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    plot(freqs[kidnum],mean(pp[pf>200])/mean(a),'o',color='r')
197/130: clf()
197/131:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])/mean(a),'o',color='r')
197/132: clf()
197/133:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])/mean(a)**2,'o',color='r')
197/134:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color='r')
197/135: figure()
197/136:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color='r')
197/137: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
197/138: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
197/139: reload(pcp.datalogger)
197/140: pcp.datalog_mp
197/141: reload(pcp.datalog_mp)
197/142: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
199/1: import pcp
199/2: name = ['phantom','clones','sith','hope','empire','jedi']
199/3: ch2 = pcp.mux_channel.muxChannel(name[1])
199/4: lo = 784e6
199/5:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
199/6: i,q=ch2.roach_iface.getADC()
199/7: i,q=ch2.roach_iface.read_ADC??
199/8: i,q=ch2.roach_iface.read_ADC()
199/9: figure()
199/10: from pcp.lib import lib_dirfiles
199/11: from numpy import *; from matplotlib.pyplot import *; ion()
199/12: figure()
199/13: plot(i)
199/14: plot(q)
199/15: ch2.roach_iface.write_freqs_to_qdr([1e6],[1],[0])
199/16: ch2.roach_iface.write_freqs_to_qdr(array([1e6]),array([1]),array([0]))
199/17: i,q=ch2.roach_iface.read_ADC()
199/18: plot i
199/19: plot9i)
199/20: plot(i)
199/21: plot(q)
199/22: ch2.roach_iface.read_ADC??
199/23: n=2**11
199/24:
def readADC(self,n=2**11):
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 0 }, self.firmware_reg_list )

        # Read I and Q signals from ADC
        adc = (_np.fromstring(read_from_fpga_register(self.fpga, { 'adc_snap_bram_reg': (n/2)*8 }, self.firmware_reg_list)['adc_snap_bram_reg'] ,dtype='>i2')).astype('float')

        adc /= 2.0**15
        # ADC full scale is 2.2 V
        #adc *= 0.909091
        #I = np.hstack(zip(adc[0::4],adc[1::4]))
        #Q = np.hstack(zip(adc[2::4],adc[3::4]))
        I = _np.dstack((adc[0::4],adc[1::4])).ravel()
        Q = _np.dstack((adc[2::4],adc[3::4])).ravel()
        return I,Q
199/25: i,q = readADC(ch2.roach_iface.fpga)
199/26:
def readADC(self,n=2**11):
        from pcp.lib.lib_fpga import *
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 0 }, self.firmware_reg_list )

        # Read I and Q signals from ADC
        adc = (_np.fromstring(read_from_fpga_register(self.fpga, { 'adc_snap_bram_reg': (n/2)*8 }, self.firmware_reg_list)['adc_snap_bram_reg'] ,dtype='>i2')).astype('float')

        adc /= 2.0**15
        # ADC full scale is 2.2 V
        #adc *= 0.909091
        #I = np.hstack(zip(adc[0::4],adc[1::4]))
        #Q = np.hstack(zip(adc[2::4],adc[3::4]))
        I = _np.dstack((adc[0::4],adc[1::4])).ravel()
        Q = _np.dstack((adc[2::4],adc[3::4])).ravel()
        return I,Q
199/27:
def readADC(self,n=2**11):
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 0 }, self.firmware_reg_list )

        # Read I and Q signals from ADC
        adc = (_np.fromstring(read_from_fpga_register(self.fpga, { 'adc_snap_bram_reg': (n/2)*8 }, self.firmware_reg_list)['adc_snap_bram_reg'] ,dtype='>i2')).astype('float')

        adc /= 2.0**15
        # ADC full scale is 2.2 V
        #adc *= 0.909091
        #I = np.hstack(zip(adc[0::4],adc[1::4]))
        #Q = np.hstack(zip(adc[2::4],adc[3::4]))
        I = _np.dstack((adc[0::4],adc[1::4])).ravel()
        Q = _np.dstack((adc[2::4],adc[3::4])).ravel()
        return I,Q
199/28: from pcp.lib.lib_fpga import *
199/29: i,q=readADC(ch2.roach_iface)
199/30: _np = np
199/31:
def readADC(self,n=2**11):
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_ctrl_reg': 0 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 1 }, self.firmware_reg_list )
        write_to_fpga_register(self.fpga, { 'adc_snap_trig_reg': 0 }, self.firmware_reg_list )

        # Read I and Q signals from ADC
        adc = (_np.fromstring(read_from_fpga_register(self.fpga, { 'adc_snap_bram_reg': (n/2)*8 }, self.firmware_reg_list)['adc_snap_bram_reg'] ,dtype='>i2')).astype('float')

        adc /= 2.0**15
        # ADC full scale is 2.2 V
        #adc *= 0.909091
        #I = np.hstack(zip(adc[0::4],adc[1::4]))
        #Q = np.hstack(zip(adc[2::4],adc[3::4]))
        I = _np.dstack((adc[0::4],adc[1::4])).ravel()
        Q = _np.dstack((adc[2::4],adc[3::4])).ravel()
        return I,Q
199/32: i,q = readADC(ch2.roach_iface.fpga)
199/33: i,q = readADC(ch2.roach_iface)
199/34: ploti)
199/35: plot(i)
199/36: ch2.sweep_lo?
199/37: ch2.sweep_lo??
199/38: ch2.sweep_lo??
199/39: ch2.sweep_lo?
200/1: import pcp
200/2: name = ['phantom','clones','sith','hope','empire','jedi']
200/3: ch2 = pcp.mux_channel.muxChannel(name[1])
200/4: ch2.initialise_hardware()
201/1: ch2.initialise_hardware()
201/2: import pcp
201/3: name = ['phantom','clones','sith','hope','empire','jedi']
201/4: ch2 = pcp.mux_channel.muxChannel(name[1])
201/5: ch2.initialise_hardware()
201/6: ch2.input_atten.att
201/7: ch2.input_atten.att=60
201/8: ch2.input_atten.att61
201/9: ch2.input_atten.att=61
201/10: :q
202/1: import pcp
203/1: import pcp
203/2: :q
204/1: import pcp
204/2: name = ['phantom','clones','sith','hope','empire','jedi']
204/3: ch2 = pcp.mux_channel.muxChannel(name[1])
204/4: !locate .fpg
204/5: !locate .fpg |grep sam
205/1: import pcp
206/1: import pcp
206/2: import pcp
208/1: import pcp
208/2: name = ['phantom','clones','sith','hope','empire','jedi']
208/3: ch2 = pcp.mux_channel.muxChannel(name[1])
208/4: pcp.configuration.filesys_config['firmwaredir']
208/5: pwd
208/6: pwd
208/7: cd ..
209/1: import pcp
209/2: name = ['phantom','clones','sith','hope','empire','jedi']
209/3: ch2 = pcp.mux_channel.muxChannel(name[1])
209/4: ch2.initialise_hardware()
209/5: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
209/6: freqs_file
209/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
209/8: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
209/9: from numpy import *; from matplotlib.pyplot import *; ion()
209/10: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
209/11: lo = 784e6
209/12:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
209/13: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=None)
209/14: ch2.freqs
209/15: freqs
209/16: len freqs
209/17: autocall
209/18: len freqs
209/19: len ch2.toneslist.bb_freqs
209/20: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=(icorr2+1j*qcorr2)*(amax([abs(z2[0]),abs(z2[1])]))/32767)
209/21: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=None)
209/22: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist' ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=None)
209/23: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,iq_correction=None)
209/24: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
209/25: ch2.sweep
209/26: ch2.sweep.plot_sweep()
209/27: show()
209/28: ch2.sweep.plot_sweep??
209/29: ch2.start_stream(stream_time=10)
209/30: pwd
209/31: ]
209/32: !git push
209/33: !git config user.name
209/34: name = ['phantom','clones','sith','hope','empire','jedi']
209/35: ch2 = pcp.mux_channel.muxChannel(name[1])
210/1: import pcp
211/1: import pcp
212/1: import pcp
212/2: name = ['phantom','clones','sith','hope','empire','jedi']
212/3: ch2 = pcp.mux_channel.muxChannel(name[1])
212/4:
for ch in [ch2]:
   
    pcp.synthesizer.windfreaksynth_v2.set_MUSCAT_default_values(str(pcp.configuration.hardware_config['synth_config']['synth_%s_lo'%(ch.roachid)]['serial']))
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
212/5:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    ch.synth_lo.frequency=lo
212/6: lo = 784e6
212/7: ch.synth_lo.frequency=lo
212/8: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
212/9: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
212/10: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
212/11: from numpy import *; from matplotlib.pyplot import *; ion()
212/12: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
212/13: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
213/1: import pcp
213/2: name = ['phantom','clones','sith','hope','empire','jedi']
213/3: ch2 = pcp.mux_channel.muxChannel(name[1])
213/4:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
213/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
213/6: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
213/7: from numpy import *; from matplotlib.pyplot import *; ion()
213/8: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
213/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
213/10: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
213/11: ch2.sweep?
213/12: ch2.sweep.plot_sweep??
213/13: ch2.sweep.calparams
213/14: ch2.sweep.data?
213/15: ch2.sweep.data.shape
213/16: ch2.sweep.dirfile
213/17: ch2.sweep.dirfile.name
213/18: ch2.sweep.get_data?
213/19: ch2.sweep.get_data??
213/20: ch2.sweep.data.shape
213/21: ch2.sweep.data[0][0]
213/22:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])))
213/23: os.environ['DISPLAY']
213/24: import os
213/25: os.environ['DISPLAY']
213/26: os.environ['DISPLAY']=':0'
214/1: from numpy import *; from matplotlib.pyplot import *; ion()
214/2: import pcp
214/3: name = ['phantom','clones','sith','hope','empire','jedi']
214/4: ch2 = pcp.mux_channel.muxChannel(name[1])
214/5:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
214/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
214/7: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
214/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
214/9: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
215/1: from numpy import *; from matplotlib.pyplot import *; ion()
215/2: plot([1,2,3],'o')
215/3: import pcp
215/4: name = ['phantom','clones','sith','hope','empire','jedi']
215/5: ch2 = pcp.mux_channel.muxChannel(name[1])
215/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
215/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
215/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
215/9: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
215/10: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
215/11: ch2.sweep_lo(startidx=10,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
215/12: len freqs
215/13: autocall
215/14: len freq
215/15: len freqs
215/16: ch2.sweep.rf_freqs[0]
215/17: ch2.sweep.rf_freqs[1]
215/18: ch2.sweep.rf_freqs[2]
215/19: ch2.sweep.rf_freqs[1000]
215/20: ch2.sweep.rf_freqs[999]
215/21: ch2.sweep.data[999]
215/22: clf()
215/23: abs(ch2.sweep.data[0])
215/24: 20*log10(abs(ch2.sweep.data[0]))
215/25: plot(20*log10(abs(ch2.sweep.data[0])))
215/26: plot(ch2.sweep.rf_freqs[0],20*log10(abs(ch2.sweep.data[0])))
215/27: clf()
215/28: plot(ch2.sweep.rf_freqs[0],20*log10(abs(ch2.sweep.data[0])))
215/29: [plot(ch2.sweep.rf_freqs[j],20*log10(abs(ch2.sweep.data[j]))) for j in range(1000)]
215/30: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
215/31: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases)
215/32: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases)
215/33: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
215/34: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps)
215/35: reload(pcp.lib)
215/36: reload(pcp.lib.lib_fpga)
215/37: reload(pcp.mux_channel)
216/1: from numpy import *; from matplotlib.pyplot import *; ion()
216/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
216/3: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
216/4: import pcp
216/5: ch2 = pcp.mux_channel.muxChannel(name[1])
216/6: name = ['phantom','clones','sith','hope','empire','jedi']
216/7: ch2 = pcp.mux_channel.muxChannel(name[1])
216/8:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
216/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
216/10: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases)
216/11: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
217/1: from numpy import *; from matplotlib.pyplot import *; ion()
217/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
217/3: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
217/4: name = ['phantom','clones','sith','hope','empire','jedi']
217/5: import pcp
217/6: ch2 = pcp.mux_channel.muxChannel(name[1])
217/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
217/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
217/9: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
217/10: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
217/11: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
217/12: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
217/13: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases=None)
217/14: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases)
217/15: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases)
217/16: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,autoFullScale=False)
217/17: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,autoFullScale=False)
217/18: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,autoFullScale=False)
217/19: figure()
217/20: plot(i[:1000])
217/21: plot(q[:1000])
217/22: plot(abs(i[:1000]+1j*q[:1000]))
217/23: figure()
217/24: plot(i[:1000],q[:1000])
217/25: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
217/26: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
217/27: close('all')
217/28: figure()
217/29:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])))
217/30: clf()
217/31:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
217/32: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
217/33: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
217/34:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='r')
217/35: -16776704.0/-32768
218/1: ipython
218/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
218/3: from numpy import *; from matplotlib.pyplot import *; ion()
218/4: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
218/5: name = ['phantom','clones','sith','hope','empire','jedi']
218/6: ch2 = pcp.mux_channel.muxChannel(name[1])
218/7: import pcp
218/8:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
218/9: ch2 = pcp.mux_channel.muxChannel(name[1])
218/10:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
218/11: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
218/12: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
219/1: import pcp
219/2: from numpy import *; from matplotlib.pyplot import *; ion()
219/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
219/4: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
219/5: name = ['phantom','clones','sith','hope','empire','jedi']
219/6: ch2 = pcp.mux_channel.muxChannel(name[1])
219/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
219/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
219/9: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
220/1: figure()
220/2: from numpy import *; from matplotlib.pyplot import *; ion()
220/3: figure()
220/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
220/5: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
220/6: import pcp
220/7: name = ['phantom','clones','sith','hope','empire','jedi']
220/8: plot([1,2,3],'o')
220/9: clf()
220/10: ch2 = pcp.mux_channel.muxChannel(name[1])
220/11:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
220/12: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases)
220/13: plot([1,2,3],'o')
220/14: clf()
220/15: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
220/16: plot([1,2,3],'o')
220/17: clf()
220/18:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='r')
220/19: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
221/1: from numpy import *; from matplotlib.pyplot import *; ion()
221/2: plot([1,2,3],'o')
221/3: clf()
221/4: name = ['phantom','clones','sith','hope','empire','jedi']
221/5: import pcp
221/6: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
221/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
221/8: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
221/9: ch2 = pcp.mux_channel.muxChannel(name[1])
221/10:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
221/11: ch2.sweep.data[0]
221/12: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
221/13:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
221/14: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
221/15: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
221/16:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
222/1: from numpy import *; from matplotlib.pyplot import *; ion()
222/2: figure()
222/3: plot([1,2,3],'o')
222/4: clf()
222/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
222/6: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
222/7: import pcp
222/8: ch2 = pcp.mux_channel.muxChannel(name[1])
222/9: name = ['phantom','clones','sith','hope','empire','jedi']
222/10: ch2 = pcp.mux_channel.muxChannel(name[1])
222/11:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
222/12: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=True)
222/13: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
222/14:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
222/15: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
222/16: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
222/17:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
222/18: len(gca().lines)
222/19: gca().lines=gca().lines[:1000]
222/20: draw()
222/21:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='r')
222/22: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,autoFullScale=False)
222/23:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='r')
222/24: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,autoFullScale=False,dds_iq_offset=0.1)
222/25: figure()
222/26: i,q=ch2.roach_iface.gen_waveform_from_freqs([1e6],[1],[0],autoFullScale=False,dds_iq_offset=0.1)
222/27: i,q=ch2.roach_iface.gen_waveform_from_freqs([1e6],array([1]),array([0]),autoFullScale=False,dds_iq_offset=0.0)
222/28: plot(i)
222/29: i,q=ch2.roach_iface.gen_waveform_from_freqs([1e6],array([1]),array([0]),autoFullScale=False,dds_iq_offset=10)
222/30: plot(i)
222/31: i,q=ch2.roach_iface.gen_waveform_from_freqs([1e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_offset=0)
222/32: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_offset=0)
222/33: clf()
222/34: plot(i)
222/35: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_offset=10)
222/36: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=0.9,dds_iq_offset=10)
222/37: plot(i)
222/38: cla()
222/39: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=0.9,dds_iq_offset=0)
222/40: plot(i)
222/41: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=0.9+0j,dds_iq_offset=0+0j)
222/42: plot(i)
222/43: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=1+1j,dds_iq_offset=0+0j)
222/44: plot(i)
222/45: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=0.5+0.5j,dds_iq_offset=0+0j)
222/46: plot(i)
222/47: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=0.5+1j,dds_iq_offset=0+0j)
222/48: plot(i)
222/49: plot(q)
222/50: clf()
222/51: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=1+1j,dds_iq_offset=0+0j)
222/52: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
222/53: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=array([0.9+1j]),dds_iq_offset=0+0j)
222/54: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
222/55: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j)
222/56: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
222/57: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j)
222/58: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
222/59: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j,dac_iq_gain=array([1.+1j]))
222/60: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
222/61: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j,dac_iq_gain=array([1.+0j]))
222/62: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
222/63: plot(i[:1000])
222/64: plot(q[:1000])
222/65: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j,dac_iq_gain=array([1.+0j]),dac_iq_phase=array([radians(45)]))
222/66: plot(i[:1000])
222/67: plot(q[:1000])
222/68: radians(45)
222/69: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=array([radians(45)]))
222/70: clf()
222/71: plot(i[:1000])
222/72: plot[q:1000])
222/73: plot(q[:1000])
222/74: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=array([radians(0)]))
222/75: plot(i[:1000])
222/76: plot(q[:1000])
222/77: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=array([0.+1j]),dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
222/78: clf()
222/79: plot(i[:1000])
222/80: plot(q[:1000])
223/1: from numpy import *; from matplotlib.pyplot import *; ion()
223/2: name = ['phantom','clones','sith','hope','empire','jedi']
223/3: import pcp
223/4: ch2 = pcp.mux_channel.muxChannel(name[1])
223/5:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
223/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
223/7: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
223/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
223/9: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
224/1: from numpy import *; from matplotlib.pyplot import *; ion()
224/2: figure()
224/3: plot([1,2,3],'o')
224/4: clf()
224/5: name = ['phantom','clones','sith','hope','empire','jedi']
224/6: import pcp
224/7: ch2 = pcp.mux_channel.muxChannel(name[1])
224/8:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
224/9: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
224/10: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
224/11: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
224/12: plot([1,2,3],'o')
224/13: clf()
224/14: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
224/15:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
224/16: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/17: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
224/18: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=array(zeros(1000)+1j*ones(1000)),dac_iq_phase=None)
224/19: zeros(10)+1j*ones(10)
224/20: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=zeros(1000)+1j*ones(1000),dac_iq_phase=None)
224/21: len freqs
224/22: len(freqs)
224/23: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=ones(1000),dac_iq_phase=None)
224/24: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/25: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
224/26: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=(0+1j),dac_iq_phase=None)
224/27: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
224/28: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=(0.9+0.9j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/29: figure()
224/30: plot(i[:1000])
224/31: plot(q[:1000])
224/32: clf()
224/33: plot(i[:1000],q[:1000])
224/34: gca().set_aspect('equal')
224/35: plot(i[:4000],q[:4000])
224/36: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/37: plot(i[:4000],q[:4000])
224/38: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.123e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/39: plot(i[:4000],q[:4000])
224/40: clf()
224/41: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.5e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/42: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.25e6],array([1]),array([0]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/43: plot(i[:4000],q[:4000])
224/44: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.25e6],array([1]),array([radians(45)]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/45: plot(i[:4000],q[:4000])
224/46: cla()
224/47: plot(i[:4000])
224/48: plot(q[:4000])
224/49: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.375e6],array([1]),array([radians(90)]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/50: plot(i[:4000])
224/51: plot(q[:4000])
224/52: clf()
224/53: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.01e6],array([1]),array([radians(90)]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/54: plot(i[:4000],q[:4000])
224/55: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.01e6],array([1]),array([radians(90)]),which='dds_lut',autoFullScale=False,dds_iq_gain=0.9*(1+1j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/56: plot(i[:4000],q[:4000])
224/57: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.01e6],array([1]),array([radians(90)]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+0.5j),dds_iq_offset=0+0j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/58: plot(i[:4000],q[:4000])
224/59: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.01e6],array([1]),array([radians(90)]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+0.5j),dds_iq_offset=0+100000j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/60: plot(i[:4000],q[:4000])
224/61: i,q=ch2.roach_iface.gen_waveform_from_freqs([0.01e6],array([1]),array([radians(90)]),which='dds_lut',autoFullScale=False,dds_iq_gain=(1+0.5j),dds_iq_offset=0+10000j,dac_iq_gain=(1+1j),dac_iq_phase=None)
224/62: plot(i[:4000],q[:4000])
224/63: i,q=ch2.roach_iface.gen_waveform_from_freqs(1e6],array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/64: i,q=ch2.roach_iface.gen_waveform_from_freqs(array([1e6]),array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/65: clf()
224/66: plot(i[:4000],q[:4000])
224/67: clf()
224/68: plot(i[:1000],q[:1000])
224/69: clf()
224/70: plot(i[:1000],q[:100])
224/71: plot(i[:100],q[:100])
224/72: gca().set_aspect('equal')
224/73: clf()
224/74: i,q=ch2.roach_iface.gen_waveform_from_freqs(array([1e6]),array([1]),array([pi/2]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/75: plot(i[:100],q[:100])
224/76: i,q=ch2.roach_iface.gen_waveform_from_freqs(array([1e6]),array([1]),array([pi]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/77: plot(i[:100],q[:100])
224/78: i,q=ch2.roach_iface.gen_waveform_from_freqs(array([1e6]),array([1]),array([3*pi/2]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/79: plot(i[:100],q[:100])
224/80: i,q=ch2.roach_iface.gen_waveform_from_freqs(array([1e6]),array([1]),array([4*pi/2]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=None)
224/81: plot(i[:100],q[:100])
224/82: i,q=ch2.roach_iface.gen_waveform_from_freqs(array([1e6]),array([1]),array([0]),which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(10))
224/83: plot(i[:100],q[:100])
224/84: plot(i[:400],q[:400])
224/85: clf()
224/86: plot(i[:400],q[:400])
224/87: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
224/88: clf()
224/89:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
224/90: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
224/91: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
224/92: gca().lines=gca().lines[:1000]
224/93: draw()
224/94: gca().lines=gca().lines[]
224/95: gca().lines=gca().lines=[]
224/96: draw()
224/97:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
224/98:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
224/99: ch2 = pcp.mux_channel.muxChannel(name[1])
224/100: ch2 = pcp.mux_channel.muxChannel(name[1])
224/101: ch2 = pcp.mux_channel.muxChannel(name[1])
224/102: ch2 = pcp.mux_channel.muxChannel(name[1])
225/1: from numpy import *; from matplotlib.pyplot import *; ion()
225/2: name = ['phantom','clones','sith','hope','empire','jedi']
225/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
225/4: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
225/5: import pcp
225/6: ch2 = pcp.mux_channel.muxChannel(name[1])
225/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
225/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False)
225/9: figure()
225/10: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
225/11:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='k')
225/12: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(3))
225/13: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
225/14:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='r')
225/15: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(-3))
225/16: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
225/17:
for k in range(1000):
    plot(ch2.sweep.rf_freqs[k],20*log10(abs(ch2.sweep.data[k])),color='b')
225/18: ch2.input_atten.att
226/1: import pcp
226/2: from numpy import *; from matplotlib.pyplot import *; ion()
226/3: pcp.scripts.initialise_roaches??
226/4: name = ['phantom','clones','sith','hope','empire','jedi']
226/5: ch2 = pcp.mux_channel.muxChannel(name[1])
226/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
226/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'
226/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
226/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0))
226/10: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases,which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(0))
226/11: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/12: phases2=uniform(0,2*pi,1000)
226/13: phases2=random.uniform(0,2*pi,1000)
226/14: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(0))
226/15: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/16: phases2=random.uniform(0,2*pi,1000)
226/17: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(0))
226/18: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/19: phases2=random.uniform(0,2*pi,1000)
226/20: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(0))
226/21: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/22: phases2=random.uniform(0,2*pi,1000)
226/23: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(0))
226/24: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/25: phases2=random.uniform(0,2*pi,1000)
226/26: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dds_iq_gain=None,dds_iq_offset=0+0j,dac_iq_gain=None,dac_iq_phase=radians(0))
226/27: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/28: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dac_iq_gain=0.01*ones(1000)+1j*ones(1000),dac_iq_phase=radians(0))
226/29: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/30: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dac_iq_gain=ones(1000)+1j*ones(1000),dac_iq_phase=radians(0))
226/31: i,q=ch2.roach_iface.gen_waveform_from_freqs(freqs,amps,phases2,which='dac_lut',autoFullScale=False,dac_iq_gain=ones(1000)+1j*ones(1000),dac_iq_phase=radians(0)*ones(1000))
226/32: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/33: ch2.start_stream(stream_time=10)
226/34:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color='r')
226/35: td=ch2.current_dirfile
226/36: figure()
226/37:
for kidnum in range(len(freqs)):
    
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color='r')
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color='r')
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color='r')
226/38: diff freqs
226/39: diff(freqs)
226/40: figure()
226/41: plot(diff(freqs))
226/42: freqs+=random.uniform(-100000,100000,1000)
226/43: ch2.toneslist._update_frequencies??
226/44: ch2.toneslist.bb_freqs
226/45: ch2.toneslist.rf_freqs
226/46: freqs[0]
226/47: ch2.toneslist.bb_freqs?
226/48: ch2.toneslist._bb_freqs?
226/49: ch2.toneslist.bb_freqs = freqs
226/50: ch2.toneslist._update_frequencies()
226/51: ch2.toneslist.bb_freqs
226/52: ch2.toneslist.bb_freqs[0]
226/53: freqs[0]
226/54: ch2.toneslist.rf_freqs=freqs+lo
226/55: ch2.toneslist._update_frequencies()
226/56: ch2.toneslist.bb_freqs[0]
226/57: ch2.toneslist.rf_freqs[0] - lo
226/58: ch2.toneslist._bb_freqs
226/59: ch2.toneslist._bb_freqs[0]
226/60: ch2.toneslist._bb_freqs = freqs
226/61: ch2.toneslist._update_frequencies()
226/62: ch2.toneslist.bb_freqs[0]
226/63: ch2.toneslist._bb_freqs[0]
226/64: freqs[0]
226/65: import change_toneslist_freqs
226/66: !locate change_toneslist
226/67: pwd
226/68: !cp /home/sam/multitone110919/multitone/change_toneslist_freqs.py ./
226/69: import change_toneslist_freqs
226/70: change_toneslist_freqs.change_freqs('',freqs,'')
226/71: #ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/72: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/73: reload(change_toneslist_freqs)
226/74: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/75: reload(change_toneslist_freqs)
226/76: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/77: reload(change_toneslist_freqs)
226/78: reload(change_toneslist_freqs)
226/79: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/80: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/81: reload(change_toneslist_freqs)
226/82: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/83: t=genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist')
226/84: t=genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',unpack=1,skip_header=1)
226/85: t[0][0]
226/86: t[0][1]
226/87: len t
226/88: len(t)
226/89: len(t[0])
226/90: t=genfromtxt('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',unpack=0,skip_header=1)
226/91: len(t[0])
226/92: reload(change_toneslist_freqs)
226/93: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/94: reload(change_toneslist_freqs)
226/95: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/96: reload(change_toneslist_freqs)
226/97: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/98: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/99: change_toneslist_freqs.change_freqs('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist',freqs+lo,'/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist')
226/100: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/101: ch2.toneslist.bb_freqs[0]
226/102: freqs[0]
226/103: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/104: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps*0.99; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/105: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps*0.95; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/106: -33049.7/-32768
226/107: 1./(-33049.7/-32768)
226/108: amps*=0.99
226/109: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000))
226/110: ch2.start_stream(stream_time=10)
226/111: td=ch2.current_dirfile
226/112:
for kidnum in range(len(freqs)):
    col='b'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/113:
for kidnum in range(len(freqs)):
    col='b'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/114: ch2.input_atten.att
226/115: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
226/116: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
226/117: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(5)]),axis=2),axis=0)
226/118: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
226/119: ch2.input_atten.att=6
226/120: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
226/121: ch2.start_stream(stream_time=10)
226/122: td=ch2.current_dirfile
226/123:
for kidnum in range(len(freqs)):
    col='g'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/124: ch2.input_atten.att=12
226/125: ch2.start_stream(stream_time=10)
226/126:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/127: td=ch2.current_dirfile
226/128:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/129: ch2.input_atten.att=18
226/130: ch2.input_atten.att=12
226/131: ch2.output_atten.att
226/132: ch2.output_atten.att=0
226/133: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
226/134: ch2.start_stream(stream_time=10)
226/135: td=ch2.current_dirfile
226/136:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/137: i,q=ch2.roach_iface.gen_waveform_from_freqs(ch2.toneslist.bb_freqs,amps,phases,which='dac_lut',autoFullScale=False,dac_iq_gain=ones(1000)+1j*ones(1000),dac_iq_phase=radians(0)*ones(1000))
226/138: ptp(i),ptp(q),min(i),min(q),max(i),max(q),mean(i),mean(q)
226/139: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(linspace(-10,10,1000)))
226/140: ch2.start_stream(stream_time=10)
226/141: td=ch2.current_dirfile
226/142:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
226/143: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dds_iq_phase=radians(linspace(-10,10,1000)))
227/1: from numpy import *; from matplotlib.pyplot import *; ion()
227/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
227/3: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
227/4: lo = 784e6
227/5: freqs+=random.uniform(-100000,100000,1000)
227/6: amps*=0.99
227/7: import pcp
227/8: name = ['phantom','clones','sith','hope','empire','jedi']
227/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dds_iq_phase=radians(linspace(-10,10,1000)))
227/10: ch2 = pcp.mux_channel.muxChannel(name[1])
227/11:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
227/12: ch2.input_atten.att=12
227/13: ch2.output_atten.att=0
227/14: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dds_iq_phase=radians(linspace(-10,10,1000)))
228/1: from numpy import *; from matplotlib.pyplot import *; ion()
228/2: import pcp
228/3: name = ['phantom','clones','sith','hope','empire','jedi']
228/4: ch2 = pcp.mux_channel.muxChannel(name[1])
228/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
228/6: freqs+=random.uniform(-100000,100000,1000); amps*=0.99
228/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=0
    ch.output_atten.att=10
    lo=784e6
    ch.synth_lo.frequency=lo
228/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dds_iq_phase=radians(linspace(-10,10,1000)))
228/9: ch2.start_stream(stream_time=10)
228/10:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
228/11: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dds_iq_phase=radians(linspace(-10,10,1000)))
228/12: ch2.start_stream(stream_time=10)
228/13: figure()
228/14: td=ch2.current_dirfile
228/15:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/16: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dds_iq_phase=radians(linspace(-45,45,1000)))
228/17: ch2.start_stream(stream_time=10)
228/18: td=ch2.current_dirfile
228/19:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/20: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=radians(linspace(-45,45,1000)))
228/21: ch2.start_stream(stream_time=10)
228/22: td=ch2.current_dirfile
228/23:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/24: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
228/25: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz_spaced.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=zeros(1000)+1j*ones(1000))
228/26: ch2.start_stream(stream_time=10)
228/27:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/28: td=ch2.current_dirfile
228/29:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(311);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(312);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(313);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/30: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
228/31:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412);    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413);    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414);    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/32: clf()
228/33:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/34: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
228/35: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000))
228/36: ch2.start_stream(stream_time=10)
228/37: td=ch2.current_dirfile
228/38:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/39: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
228/40: ch2.output_atten.att=6
228/41: ch2.start_stream??
228/42: ch2.start_stream(stream_time=10,dont_ask=True)
228/43: td=ch2.current_dirfile
228/44:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/45: clf()
228/46:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/47: ch2.input_atten.att=18
228/48: ch2.output_atten.att
228/49: ch2.output_atten.att=0
228/50: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
228/51: ch2.start_stream(stream_time=10,dont_ask=True)
228/52:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/53: td=ch2.current_dirfile
228/54:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/55: FPGA_SAMPLE_FREQ = 256e6
228/56: freqs
228/57: residuals = ch2.roach_iface.select_bins(freqs)
228/58: figure()
228/59: plot(freqs,residuals)
228/60: clf()
228/61:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    #subplot(411);    plot(residuals[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(residuals[kidnum],mean(pa[pf>200]),'o',color=col)
    #subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    #subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/62: clf()
228/63:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    #subplot(411);    plot(residuals[kidnum],mean(abs(i+1j*q)),'o',color=col)
    plot(residuals[kidnum],mean(pa[pf>200]),'o',color=col)
    #subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    #subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/64: figure()
228/65: plot(pf,pa)
228/66: ch2.roach_iface.read_mixer_snaps??
228/67: ch2.roach_iface.read_mixer_snaps(0)
228/68: ch2.roach_iface.read_mixer_snaps(0,fir=False)
228/69: ch2.roach_iface.read_mixer_snaps??
228/70: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
228/71: len mixer_in
228/72: autocall
228/73: len mixer_in
228/74: len mixer_out
228/75: len mixer_out[0]
228/76: len mixer_in[0]
228/77: clf()
228/78: plot mixer_in
228/79: plot mixer_out
228/80: ch2.roach_iface.read_chan_snaps??
228/81:
            I_in = mixer_in[0::8]
            Q_in = mixer_in[1::8]
            I_dds_in = mixer_in[2::8]
            Q_dds_in = mixer_in[3::8]
            I_out = mixer_out[0::4]
            Q_out = mixer_out[1::4]
228/82: cla()
228/83: plot I_in
228/84: plot I_dds_in
228/85: mean(I_dds_in)
228/86: mean(I_in)
228/87: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
228/88:
            I_in = mixer_in[0::8]
            Q_in = mixer_in[1::8]
            I_dds_in = mixer_in[2::8]
            Q_dds_in = mixer_in[3::8]
            I_out = mixer_out[0::4]
            Q_out = mixer_out[1::4]
228/89: mean(I_in)
228/90: figure()
228/91: psd(I_dds_in,NFFT=len(I_dds_in))
228/92: psd(I_in,NFFT=len(I_in))
228/93: max(residuals)
228/94: min(residuals)
228/95: fft_shift = 2**5 if len(freqs) >= 400 else 2**9
228/96: fft_shoft
228/97: fft_shift
228/98: type(fft_shift)
228/99: 2**9
228/100: len freqs
228/101: ch2.roach_iface.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time = 0. )
228/102: ch2.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time = 0. )
228/103: pcp.mux_channel.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/104: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/105: ch2.start_stream(stream_time=10,dont_ask=True)
228/106: close('all')
228/107: td=ch2.current_dirfile
228/108:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/109: fft_shift = 2**6
228/110: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/111: pcp.lib.lib_fpga.read_from_fpga_register?
228/112: pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, ["fft_shift_reg"],ch2.roach_iface.firmware_reg_list)
228/113: pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {"fft_shift_reg":0},ch2.roach_iface.firmware_reg_list)
228/114: pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {"fft_shift_reg":2**5},ch2.roach_iface.firmware_reg_list)
228/115: pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {"fft_shift_reg":16},ch2.roach_iface.firmware_reg_list)
228/116: _np.fromstring(pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {'fft_shift_reg':1}, ch2.roach_iface.firmware_reg_list)['fft_shift_reg'],dtype = '>H')
228/117: np.fromstring(pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {'fft_shift_reg':1}, ch2.roach_iface.firmware_reg_list)['fft_shift_reg'],dtype = '>H')
228/118: np.fromstring(pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {'fft_shift_reg':1}, ch2.roach_iface.firmware_reg_list)['fft_shift_reg'],dtype = '>i')
228/119: np.fromstring(pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {'fft_shift_reg':4}, ch2.roach_iface.firmware_reg_list)['fft_shift_reg'],dtype = '>i')
228/120: np.fromstring(pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {'fft_shift_reg':4}, ch2.roach_iface.firmware_reg_list)['fft_shift_reg'],dtype = '>H')
228/121: fft_shift
228/122: ch2.start_stream(stream_time=10,dont_ask=True)
228/123: td=ch2.current_dirfile
228/124:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/125: np.fromstring(pcp.lib.lib_fpga.read_from_fpga_register(ch2.roach_iface.fpga, {'fft_shift_reg':4}, ch2.roach_iface.firmware_reg_list)['fft_shift_reg'],dtype = '>H')
228/126: fft_shift = 2**7
228/127: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/128: ch2.start_stream(stream_time=10,dont_ask=True)
228/129: td=ch2.current_dirfile
228/130:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/131: fft_shift = 2**8
228/132: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/133: ch2.start_stream(stream_time=10,dont_ask=True)
228/134: td=ch2.current_dirfile
228/135:
for kidnum in range(len(freqs)):
    col='lime'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/136: fft_shift = 2**9
228/137: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/138: td=ch2.current_dirfile
228/139: ch2.start_stream(stream_time=10,dont_ask=True)
228/140: td=ch2.current_dirfile
228/141:
for kidnum in range(len(freqs)):
    col='green'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/142: fft_shift = 2**10
228/143: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/144: ch2.start_stream(stream_time=10,dont_ask=True)
228/145: td=ch2.current_dirfile
228/146:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/147: fft_shift = 2**11
228/148: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/149: ch2.start_stream(stream_time=10,dont_ask=True)
228/150: td=ch2.current_dirfile
228/151:
for kidnum in range(len(freqs)):
    col='cyan'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/152: fft_shift = 2**4
228/153: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/154: ch2.start_stream(stream_time=10,dont_ask=True)
228/155: td=ch2.current_dirfile
228/156:
for kidnum in range(len(freqs)):
    col='purple'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/157: fft_shift = 2**3
228/158: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/159: ch2.start_stream(stream_time=10,dont_ask=True)
228/160: td=ch2.current_dirfile
228/161:
for kidnum in range(len(freqs)):
    col='violet'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/162: figure()
228/163: hist(i)
228/164: hist(q)
228/165: cla()
228/166: hist(diff(sorted(i)))
228/167: hist(diff(sorted(i)),range=(0,100),bins=100)
228/168: cla()
228/169: hist(diff(sorted(i)),range=(0,100),bins=100)
228/170: fft_shift = 2**2
228/171: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/172: ch2.start_stream(stream_time=10,dont_ask=True)
228/173:
for kidnum in range(len(freqs)):
    col='magenta'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/174: td=ch2.current_dirfile
228/175:
for kidnum in range(len(freqs)):
    col='magenta'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/176:
for kidnum in range(len(freqs)):
    col='magenta'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/177: figure()
228/178: hist(diff(sorted(i)),range=(0,100),bins=100)
228/179: kidnum=333
228/180: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/181: hist(diff(sorted(i)),range=(0,100),bins=100)
228/182: figure()
228/183: hist(i)
228/184: kidnum=0
228/185: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/186: hist(i)
228/187: fft_shift = 2**1
228/188: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/189: ch2.start_stream(stream_time=10,dont_ask=True)
228/190: td=ch2.current_dirfile
228/191:
for kidnum in range(len(freqs)):
    col='magenta'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/192: figure()
228/193: hist(diff(sorted(i)),range=(0,100),bins=100)
228/194: fft_shift = 2**0
228/195: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/196: ch2.start_stream(stream_time=10,dont_ask=True)
228/197: td=ch2.current_dirfile
228/198:
for kidnum in range(len(freqs)):
    col='cyan'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
228/199: 2**1
228/200: 2**0
228/201: xlim(-256e6,256e6)
228/202: figure()
228/203: hist(diff(sorted(i)),range=(0,100),bins=100)
228/204: fft_shift = 2**9
228/205: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/206: ch2.start_stream(stream_time=10,dont_ask=True)
228/207: kidnum=999
228/208: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/209: td=ch2.current_dirfile
228/210: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/211: hist(diff(sorted(i)),range=(0,100),bins=100)
228/212: fft_shift = 2**5
228/213: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/214: ch2.start_stream(stream_time=10,dont_ask=True)
228/215: kidnum=999
228/216: td=ch2.current_dirfile
228/217: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/218: hist(diff(sorted(i)),range=(0,100),bins=100)
228/219: figure()
228/220: plot(i)
228/221: cla()
228/222: plot(sort(i))
228/223: plot(sort(diff(sort(i))))
228/224: clf()
228/225: plot(sort(diff(sort(i))))
228/226: kidnum=333
228/227: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/228: plot(sort(diff(sort(i))))
228/229: fft_shift = 2**2
228/230: fft_shift = 2**2
228/231: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/232: ch2.start_stream(stream_time=10,dont_ask=True)
228/233: td=ch2.current_dirfile
228/234: kidnum=333
228/235: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/236: plot(sort(diff(sort(i))))
228/237: ch2.start_stream(stream_time=30,dont_ask=True)
228/238: td=ch2.current_dirfile
228/239: i,q=ch2.roach_iface.gen_waveform_from_freqs(ch2.toneslist.bb_freqs,amps,phases,which='dac_lut',autoFullScale=False,dac_iq_gain=ones(1000)+1j*ones(1000),dac_iq_phase=radians(0)*ones(1000))
228/240: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/241: figure()
228/242: kidnum=333
228/243: psd(a,NFFT=len(a),Fs=488)
228/244: len(a)
228/245: len(a)/488
228/246: fft_shift = 2**10
228/247: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/248: ch2.start_stream(stream_time=30,dont_ask=True)
228/249: td=ch2.current_dirfile
228/250: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/251: len a
228/252: len a/488
228/253: len(a)/488
228/254: psd(a,NFFT=len(a),Fs=488)
228/255: psd(a/fft_shift,NFFT=len(a),Fs=488)
228/256: cla()
228/257: psd(a/fft_shift,NFFT=len(a),Fs=488)
228/258: b=copy(a)
228/259: #
228/260: fft_shift = 2**2
228/261: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
228/262: ch2.start_stream(stream_time=30,dont_ask=True)
228/263: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/264: td=ch2.current_dirfile
228/265: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/266: len(a)
228/267: len(b)
228/268: psd(a/fft_shift,NFFT=len(a),Fs=488)
228/269: psd(a/fft_shift**2,NFFT=len(a),Fs=488)
228/270: cla()
228/271: psd(b,NFFT=len(b),Fs=488)
228/272: psd(a,NFFT=len(a),Fs=488)
228/273: psd(a*2,NFFT=len(a),Fs=488)
228/274: psd(a/fft_shift,NFFT=len(a),Fs=488)
228/275: psd(a/fft_shift**2,NFFT=len(a),Fs=488)
228/276: psd(b*4,NFFT=len(b),Fs=488)
228/277: psd(b*16,NFFT=len(b),Fs=488)
228/278: cla()
228/279: psd(b*16,NFFT=len(b),Fs=488)
228/280: psd(a/fft_shift**2,NFFT=len(a),Fs=488)
228/281: fft_shift
228/282: cla()
228/283: psd(a/fft_shift**2,NFFT=len(a),Fs=488)
228/284: psd(b/((2**10)**2),NFFT=len(b),Fs=488)
228/285: psd(b*((2**10)**2),NFFT=len(b),Fs=488)
228/286: psd(b*((2**10)),NFFT=len(b),Fs=488)
228/287: psd(b/((2**10)),NFFT=len(b),Fs=488)
228/288: psd(a/fft_shift**2,NFFT=len(a),Fs=488)
228/289: i==nan
228/290: sum (i==nan)
228/291: sum (q==nan)
228/292: cla()
228/293: psd(i,NFFT=len(i),Fs=488)
228/294: psd(q,NFFT=len(i),Fs=488)
228/295: kidnum=0
228/296: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
228/297: psd(i,NFFT=len(i),Fs=488)
228/298: psd(q,NFFT=len(i),Fs=488)
229/1: from numpy import *; from matplotlib.pyplot import *; ion()
229/2: import pcp
229/3: name = ['phantom','clones','sith','hope','empire','jedi']
229/4: ch2 = pcp.mux_channel.muxChannel(name[1])
229/5:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
229/6: ch2.output_atten.att=0
229/7: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
229/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
229/9: freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
229/10: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000))
229/11: ch2.start_stream(stream_time=10,dont_ask=True)
229/12: figure()
229/13: td=ch2.current_dirfile
229/14:
for kidnum in range(len(freqs)):
    col='cyan'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
229/15: fft_shift = 2**2
229/16: pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list, sleep_time =0.)
229/17: ch2.start_stream(stream_time=10,dont_ask=True)
229/18: td=ch2.current_dirfile
229/19:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a,NFFT=len(i),Fs=488)
    pp,pf=mlab.psd(p,NFFT=len(i),Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
229/20: len(i)
229/21: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000)); pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/1: import pcp
230/2: from numpy import *; from matplotlib.pyplot import *; ion()
230/3: name = ['phantom','clones','sith','hope','empire','jedi']
230/4: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000)); pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/5: ch2
230/6: ch2 = pcp.mux_channel.muxChannel(name[1])
230/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
230/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
230/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000)); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/10: td=ch2.current_dirfile
230/11:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/12: figure()
230/13: td
230/14: td=ch2.current_dirfile
230/15: td
230/16: ch2.start_stream(stream_time=10,dont_ask=True)
230/17:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/18: td
230/19: td=ch2.current_dirfile
230/20:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/21: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000)); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/22: ch2.start_stream(stream_time=10,dont_ask=True)
230/23: td=ch2.current_dirfile
230/24:
for kidnum in range(len(freqs)):
    col='green'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/25: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = linspace(-500,499,1000)); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/26: ch2.start_stream(stream_time=10,dont_ask=True)
230/27: td=ch2.current_dirfile
230/28:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/29: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = linspace(-5000,4990,1000)); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/30: ch2.start_stream(stream_time=10,dont_ask=True)
230/31: td=ch2.current_dirfile
230/32:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/33: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
230/34:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
230/35: figure()
230/36: plot(I_in)
230/37: plot(I_dds_in)
230/38: plot(I_out)
230/39: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = None); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/40: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
230/41:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
230/42: plot(I_in)
230/43: plot(I_dds_in)
230/44: plot(I_out)
230/45: figure()
230/46: psd(I_in,NFFT=len(I_in),Fs=500000)
230/47: residuals = ch2.roach_iface.select_bins(freqs)
230/48: axvline(abs(residuals[0]))
230/49: axvline(abs(residuals[0]),color='r')
230/50: clf()
230/51: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
230/52: axvline(residuals[0],color='r')
230/53: mean(I_in)
230/54: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
230/55:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
230/56: mean(I_in)
230/57: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
230/58:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
230/59: mean(I_in)
230/60: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([]+999*0)); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/61: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
230/62: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
230/63: ch2.start_stream(stream_time=10,dont_ask=True)
230/64: td=ch2.current_dirfile
230/65: figure(1)
230/66:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
230/67: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
230/68:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
230/69: mean(I_in)
230/70: mean(I_dds_in)
230/71: figure(3)
230/72: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
230/73: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
230/74: figure(3)
230/75: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
230/76: axvline(residuals[0],color='r')
230/77: figure()
230/78: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
230/79: axvline(residuals[0],color='r')
230/80: axvline(residuals[0],color='r')
230/81: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
230/82: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
230/83: psd(I_out+1j*Q_out,NFFT=len(I_in),Fs=500000)
231/1: import pcp
231/2: from numpy import *; from matplotlib.pyplot import *; ion()
231/3: name = ['phantom','clones','sith','hope','empire','jedi']
231/4: ch2 = pcp.mux_channel.muxChannel(name[1])
231/5:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
231/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
231/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
232/1: import pcp
232/2: name = ['phantom','clones','sith','hope','empire','jedi']
230/84: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
232/3: from numpy import *; from matplotlib.pyplot import *; ion()
232/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
232/5: ch2 = pcp.mux_channel.muxChannel(name[1])
232/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
232/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
233/1: import pcp
233/2: from numpy import *; from matplotlib.pyplot import *; ion()
233/3: name = ['phantom','clones','sith','hope','empire','jedi']
233/4: ch2 = pcp.mux_channel.muxChannel(name[1])
233/5:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
233/6: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
233/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
233/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
233/9: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
233/10:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
233/11: figure()
233/12: axvline(residuals[0],color='r')
233/13: residuals = ch2.roach_iface.select_bins(freqs)
233/14: axvline(residuals[0],color='r')
233/15: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
233/16: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
233/17: psd(I_out+1j*Q_out,NFFT=len(I_in),Fs=500000)
233/18: xlim(-4000,11000)
234/1: import pcp
234/2: name = ['phantom','clones','sith','hope','empire','jedi']
234/3: from numpy import *; from matplotlib.pyplot import *; ion()
234/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
234/5: ch2 = pcp.mux_channel.muxChannel(name[1])
234/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
234/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
235/1: import pcp
235/2: from numpy import *; from matplotlib.pyplot import *; ion()
235/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
235/4: name = ['phantom','clones','sith','hope','empire','jedi']
235/5: ch2 = pcp.mux_channel.muxChannel(name[1])
235/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
235/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
235/8: pwd
235/9: ch2.roach_iface.
235/10: ch2.roach_iface.write_freqs_to_qdr??
235/11: ch2
236/1: import pcp
236/2: from numpy import *; from matplotlib.pyplot import *; ion
235/12: ch2.roach_iface.
236/3: name = ['phantom','clones','sith','hope','empire','jedi']
236/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
236/5: ch2 = pcp.mux_channel.muxChannel(name[1])
236/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
236/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
238/1: import pcp
238/2: from numpy import *; from matplotlib.pyplot import *; ion
238/3: name = ['phantom','clones','sith','hope','empire','jedi']
238/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
238/5: ch2 = pcp.mux_channel.muxChannel(name[1])
238/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
238/7: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
238/8: figure()
238/9: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
238/10:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
238/11: axvline(residuals[0],color='r')
238/12: residuals = ch2.roach_iface.select_bins(freqs)
238/13: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
238/14: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
238/15: psd(I_out+1j*Q_out,NFFT=len(I_in),Fs=500000)
238/16: show()
238/17: xlim(-4000,11000)
238/18: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(180*ones(1000)) dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
238/19: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(180*ones(1000)), dds_iq_offset = array([20.4]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
238/20: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
238/21: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
238/22: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
238/23:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
238/24: psd(I_dds_in+1j*Q_dds_in,NFFT=len(I_dds_in),Fs=500000)
238/25: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
238/26: psd(I_out+1j*Q_out,NFFT=len(I_in),Fs=500000)
238/27: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
238/28: psd(I_out+1j*Q_out,NFFT=len(I_in),Fs=500000)
238/29: cla()
238/30: psd(I_in,NFFT=len(I_in),Fs=500000)
238/31: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
238/32: psd(I_out,NFFT=len(I_in),Fs=500000)
238/33: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(180*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
238/34: figure()
238/35: psd(I_in,NFFT=len(I_in),Fs=500000)
238/36: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
238/37: psd(I_out,NFFT=len(I_in),Fs=500000)
238/38: show()
239/1: import pcp
239/2: from numpy import *; from matplotlib.pyplot import *; ion#
239/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
239/4: name = ['phantom','clones','sith','hope','empire','jedi']
239/5: ch2 = pcp.mux_channel.muxChannel(name[1])
239/6:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
239/7: from numpy import *; from matplotlib.pyplot import *; ion()
239/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(180*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/9: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
239/10:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/11: figure()
239/12: psd(I_in,NFFT=len(I_in),Fs=500000)
239/13: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/14: psd(I_out,NFFT=len(I_in),Fs=500000)
239/15: ch2.start_stream(stream_time=10,dont_ask=True)
239/16: td=ch2.current_dirfile
239/17: figure()
239/18:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
239/19: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/20: ch2.start_stream(stream_time=10,dont_ask=True)
239/21: td=ch2.current_dirfile
239/22:
for kidnum in range(len(freqs)):
    col='green'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
239/23: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(0,fir=False)
239/24: figure(1)
239/25:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/26: psd(I_in,NFFT=len(I_in),Fs=500000)
239/27: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/28: psd(I_out,NFFT=len(I_in),Fs=500000)
239/29: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/30:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/31: figure(1)
239/32: figure()
239/33: psd(I_in,NFFT=len(I_in),Fs=500000)
239/34: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/35: psd(I_out,NFFT=len(I_in),Fs=500000)
239/36: residuals
239/37: residuals = ch2.roach_iface.select_bins(freqs)
239/38: residuals(450)
239/39: residuals[450]
239/40: residuals[-450]
239/41: residuals[-451]
239/42: residuals[-449]
239/43: ch2.fr
239/44: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(449*[0]+[1]+550*[0]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/45: ch2.start_stream(stream_time=10,dont_ask=True)
239/46: td=ch2.current_dirfile
239/47: figure(2)
239/48:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
239/49: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/50: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/51: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/52:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/53: figure()
239/54: psd(I_in,NFFT=len(I_in),Fs=500000)
239/55: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/56: psd(I_out,NFFT=len(I_in),Fs=500000)
239/57: freqs[450]
239/58: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/59: ch2.start_stream(stream_time=10,dont_ask=True)
239/60: td=ch2.current_dirfile
239/61: figure(2)
239/62:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2048],NFFT=2048,Fs=488)
    pp,pf=mlab.psd(p[:2048],NFFT=2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
239/63: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/64: figure()
239/65: psd(I_in,NFFT=len(I_in),Fs=500000)
239/66: figure(4)
239/67: psd(I_in,NFFT=len(I_in),Fs=500000)
239/68: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/69: psd(I_in,NFFT=len(I_in),Fs=500000)
239/70: gca().lines.pop(-1)
239/71: psd(I_out,NFFT=len(I_in),Fs=500000)
239/72: clf()
239/73:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/74: psd(I_in,NFFT=len(I_in),Fs=500000)
239/75: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/76: psd(I_out,NFFT=len(I_in),Fs=500000)
239/77: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,amps,phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/78: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/79: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/80: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/81:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/82: figure()
239/83: psd(I_in,NFFT=len(I_in),Fs=500000)
239/84: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/85: psd(I_out,NFFT=len(I_in),Fs=500000)
239/86: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/87: clf()
239/88: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/89: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/90: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/91:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/92: psd(I_in,NFFT=len(I_in),Fs=500000)
239/93: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/94: psd(I_out,NFFT=len(I_in),Fs=500000)
239/95: mean(I_in)
239/96: mean(psd(I_inNFFT=len(I_in),Fs=500000)[0])
239/97: mean(psd(I_in,NFFT=len(I_in),Fs=500000)[0])
239/98: mean(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0])
239/99: mean(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0][-1000:])
239/100: len(I_in)
239/101: max(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0][-1000:])
239/102: max(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0])
239/103: cla()
239/104: psd(I_in,NFFT=len(I_in),Fs=500000)
239/105: psd(I_out,NFFT=len(I_in),Fs=500000)
239/106: gca().lines.pop(-1);draw()
239/107: gca().lines.pop(1);draw()
239/108: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/109:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/110: figure()
239/111: psd(I_in,NFFT=len(I_in),Fs=500000)
239/112: psd(I_out,NFFT=len(I_in),Fs=500000)
240/1: import pcp
240/2: from numpy import *; from matplotlib.pyplot import *; ion()
240/3: freqs[450]
240/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
240/5: ch2 = pcp.mux_channel.muxChannel(name[1])
240/6: name = ['phantom','clones','sith','hope','empire','jedi']
240/7: ch2 = pcp.mux_channel.muxChannel(name[1])
240/8:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
240/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
240/10: figure()
240/11: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
240/12: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
240/13: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
240/14:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
240/15: psd(I_in,NFFT=len(I_in),Fs=500000)
240/16: psd(I_out,NFFT=len(I_in),Fs=500000)
240/17: mean(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0][-1000:])
240/18: mean(mlab.psd(I_out,NFFT=len(I_in),Fs=500000)[0][-1000:])
240/19: mean(mlab.psd(I_out,NFFT=len(I_in),Fs=500000)[0][-2000:])
240/20: mean(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0][-2000:])
239/113: mean(mlab.psd(I_in,NFFT=len(I_in),Fs=500000)[0][-2000:])
239/114: mean(mlab.psd(I_in,NFFT=len(I_out),Fs=500000)[0][-2000:])
239/115: mean(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0][-2000:])
239/116: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
240/21: psd(I_dds_in,NFFT=len(I_in),Fs=500000)
239/117: max(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0])
239/118: mean(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0][-2000:])
239/119: 0.02111254870354434/6.745613947663888e-08
239/120: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/121: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/122: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/123: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/124:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/125: mean(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0][-2000:])
239/126: max(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0])
239/127: 18.166344064308596/0.0005156203650090138
239/128: len(I_in)
239/129: 250000/244
239/130: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/131:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/132: mean(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0][-2000:])
239/133: max(mlab.psd(I_out,NFFT=len(I_out),Fs=500000)[0])
239/134: mean(mlab.psd(I_out+1j*Q_out,NFFT=len(I_out),Fs=500000)[0][-2000:])
239/135: max(mlab.psd(I_out+1j*Q_out,NFFT=len(I_out),Fs=500000)[0])
239/136: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
239/137: psd(I_out+1j*Q_out,NFFT=len(I_in),Fs=500000)
239/138: freqs[450]
239/139: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(1000-450,fir=False)
239/140: figure()
239/141:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/142: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
239/143: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(999-450,fir=False)
239/144:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/145: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
239/146: axvline(-1*residuals[450],color='r')
239/147: axvline(residuals[450],color='k')
239/148: residuals = ch2.roach_iface.select_bins?
239/149: residuals = ch2.roach_iface.select_bins??
239/150: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=512000)
239/151: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=512000)
239/152: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
239/153: mixer_in,mixer_out,lpf_out= ch2.roach_iface.read_mixer_snaps(450,fir=False)
239/154:
I_in = mixer_in[0::8]
Q_in = mixer_in[1::8]
I_dds_in = mixer_in[2::8]
Q_dds_in = mixer_in[3::8]
I_out = mixer_out[0::4]
Q_out = mixer_out[1::4]
239/155: psd(I_in+1j*Q_in,NFFT=len(I_in),Fs=500000)
239/156: axvline(residuals[450],color='k')
239/157: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
239/158: figure()
239/159: ch2.current_sweep_dirfile
239/160: ch2.current_sweep_dirfile?
239/161: plot(ch2.sweep.rf_freqs,20*log10(abs(ch2.sweep.data)),'k')
239/162: cla()
239/163: plot(ch2.sweep.rf_freqs,20*log10(abs(ch2.sweep.data)),'k')
239/164: cla()
239/165: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'k')
239/166: plot(ch2.sweep.rf_freqs,20*log10(abs(ch2.sweep.data)),'r')
239/167: clf()
239/168: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'r')
239/169: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/170: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
239/171: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'g')
239/172: 102.5-57.5
239/173: 144.5-67.5
239/174: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0.5]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/175: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
239/176: figure()
239/177: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'g')
239/178: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0]+[1]+549*[0.5]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/179: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
239/180: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'r',zorder=1)
239/181: ylim(10,150)
239/182: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0.5]+[1]+549*[0.5]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/183: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
239/184: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'purple',zorder=1)
239/185: ylim(10,150)
239/186: ylim(10,150)
239/187: ch2.start_stream(stream_time=20,dont_ask=True)
239/188: td=ch2.current_dirfile
239/189: figure()
239/190:
for kidnum in range(len(freqs)):
    col='yellow'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
239/191: figure()
239/192: kidnum=450
239/193: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
239/194: hist(diff(sorted(i)),range=(0,100),bins=100)
239/195: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0.5]+[1]+549*[0.5]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/196: ch2.start_stream(stream_time=20,dont_ask=True)
239/197: td=ch2.current_dirfile
239/198: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
239/199: hist(diff(sorted(i)),range=(0,100),bins=100)
239/200: mean(i)]
239/201: cla()
239/202: kidnum=450
239/203: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
239/204: mean(i)
239/205: mean(i);mean(q)
239/206: mean(i);mean(q);max(i)
239/207: mean(i);mean(q);max(i),max(q)
239/208: mean(i);mean(q);max(i);max(q)
239/209: mean(i),mean(q),max(i),max(q)
239/210: mean(i),mean(q),max(i),max(q),std(i),std(q)
239/211: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0.5]+[1]+549*[0.5]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/212: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=200e3,sweep_step=1e3)
239/213: kidnum=450
239/214: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
239/215: td=ch2.current_dirfile
239/216: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
239/217: mean(i),mean(q),max(i),max(q),std(i),std(q)
239/218: -2374.062952742325/29.12673483249111, -132507.48775439805/29.20933070265348
239/219: -211727.06631474762/64492.72786070102,-15357801.38700099/3979438.4512377502
239/220: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,array(450*[0.5]+[1]+549*[0.5]),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(0.5+0.5j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
239/221: ch2.start_stream(stream_time=20,dont_ask=True)
239/222: td=ch2.current_dirfile
239/223: kidnum=450
239/224: i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
239/225: mean(i),mean(q),max(i),max(q),std(i),std(q)
239/226: -1446.8658420551856/17.27043760205543
239/227: -66654.55166508087/17.286909645355568
241/1: import pcp
241/2: from numpy import *; from matplotlib.pyplot import *; ion()
241/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
241/4: ch2 = pcp.mux_channel.muxChannel(name[1])
241/5: name = ['phantom','clones','sith','hope','empire','jedi']
241/6: ch2 = pcp.mux_channel.muxChannel(name[1])
241/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
241/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0])); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/9: ch2.start_stream(stream_time=20,dont_ask=True)
241/10: td=ch2.current_dirfile
241/11: figure()
241/12:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/13: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=True); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/14: ch2.start_stream(stream_time=20,dont_ask=True)
241/15: td=ch2.current_dirfile
241/16:
for kidnum in range(len(freqs)):
    col='green'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/17: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=True,dds_dither=True); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/18: ch2.start_stream(stream_time=20,dont_ask=True)
241/19: ch2.start_stream(stream_time=20,dont_ask=True)
241/20: td=ch2.current_dirfile
241/21:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/22: i
241/23: ch2.start_stream(stream_time=20,dont_ask=True)
241/24: td=ch2.current_dirfile
241/25:
for kidnum in range(len(freqs)):
    col='blue'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/26: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=True,dds_dither=True); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/27: ch2.start_stream(stream_time=20,dont_ask=True)
241/28: td=ch2.current_dirfile
241/29:
for kidnum in range(len(freqs)):
    col='orange'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/30: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/31: figure()
241/32: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'purple')
241/33: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=True,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/34: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/35: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
241/36: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/37: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/38: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'red')
242/1: %history -g icali
242/2: %history -g 113/
242/3: %history 113/
241/39:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
icorr -= icorr.max()
icorr = 10**(icorr/20)
qcorr = qcali(freqs)
qcorr -= qcorr.max()
qcorr = 10**(qcorr/20)
241/40: from scipy import interpolate
241/41:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
icorr -= icorr.max()
icorr = 10**(icorr/20)
qcorr = qcali(freqs)
qcorr -= qcorr.max()
qcorr = 10**(qcorr/20)
241/42: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=icorr+1j*qcorr,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/43: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/44: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'orange')
241/45:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
icorr -= icorr.max()
icorr = 1./(10**(icorr/20))
qcorr = qcali(freqs)
qcorr -= qcorr.max()
qcorr = 1./(10**(qcorr/20))
241/46: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=icorr+1j*qcorr,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/47: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/48: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
241/49: 287690.1/32767
241/50:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
icorr -= icorr.max()
icorr = 1./(10**(icorr/20))/9.
qcorr = qcali(freqs)
qcorr -= qcorr.max()
qcorr = 1./(10**(qcorr/20))/9.
241/51: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=icorr+1j*qcorr,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/52:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
icorr -= icorr.max()
icorr = 1./(10**(icorr/20))/10.
qcorr = qcali(freqs)
qcorr -= qcorr.max()
qcorr = 1./(10**(qcorr/20))/10.
241/53: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=icorr+1j*qcorr,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/54: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/55: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
241/56: icali[0]
241/57: icorr[0]
241/58: icorr[480]
241/59:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
qcorr = qcali(freqs)
calmax = amax([icorr,qcorr])
icorr -= calmax
qcorr -= calmax
icorr = 1./(10**(icorr/20))/10.
qcorr = 1./(10**(qcorr/20))/10.
241/60: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=icorr+1j*qcorr,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/61: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/62: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'blue')
242/4: %history -g inter1d
242/5: %history -g interp1d
242/6: %history -g clip
241/63: icorr
241/64:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
qcorr = qcali(freqs)
calmax = amax([icorr,qcorr])
icorr -= calmax
qcorr -= calmax
icorr = 1./(10**(icorr/20))
qcorr = 1./(10**(qcorr/20))
241/65: icorr
241/66: 1./0.45
241/67: sqrt(3)
241/68: sqrt(6)
241/69:
fcal,ical = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_i.npy')
fcal,qcal = load('/home/muscat/rfcal_23082019/iqcal/iqcal_ch2_q.npy')
icali=interpolate.interp1d(fcal,ical)
qcali=interpolate.interp1d(fcal,qcal)
icorr = icali(freqs)
qcorr = qcali(freqs)
calmax = amax([icorr,qcorr])
icorr -= calmax
qcorr -= calmax
icorr = 1./(10**(icorr/20))
qcorr = 1./(10**(qcorr/20))
icorr=clip(icorr,0,2.5)
qcorr=clip(qcorr,0,2.5)
241/70: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=icorr+1j*qcorr,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/71: -38465.9/-32768
241/72: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=(icorr+1j*qcorr)/1.2,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/73: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
241/74: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
241/75: ch2.start_stream(stream_time=20,dont_ask=True)
241/76: td=ch2.current_dirfile
241/77:
for kidnum in range(len(freqs)):
    col='black'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/78:
for kidnum in range(len(freqs)):
    col='black'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/79: ch2.input_atten.att
241/80: ch2.output_atten.att
241/81: ch2.output_atten.att=12
241/82: ch2.start_stream(stream_time=20,dont_ask=True)
241/83: td=ch2.current_dirfile
241/84:
for kidnum in range(len(freqs)):
    col='green'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/85: ch2.output_atten.att=24
241/86: ch2.start_stream(stream_time=20,dont_ask=True)
241/87: td=ch2.current_dirfile
241/88:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
241/89: figure()
241/90: matplotlib.backend
241/91: matplotlib.get_backend()
241/92: matplotlib.use('qt5')
241/93: matplotlib.use('qt5agg')
243/1: import matplotlib
243/2: matplotlib.use('qt5agg')
243/3: from matplotlib.pyplot import *
243/4: figure()
243/5: from numpy import *
243/6: f,z=load('ch1_lo750_uncorrected.npy')
243/7: f,z=load('../iqcal/tests/ch1_lo775_uncorrected.npy')
243/8: plot f,z
243/9: plot(f,z)
243/10: show()
244/1: plot f,z
244/2: -25+30
241/94: noise =[]
241/95: attens = range(30)
241/96:
#for atten in range(30):
    ch2.start_stream(stream_time=5,dont_ask=True)
    n = array([std(i) for i in range(1000)])
    m = array([mean(i) for i in range(1000)])
    noises.append(n)
    means.append(m)
241/97: noises=[]
241/98: means=[]
241/99:
for atten in range(30):
    td=ch2.current_dirfile
    ch2.start_stream(stream_time=5,dont_ask=True)
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' atten
241/100:
for atten in range(30):
    td=ch2.current_dirfile
    ch2.start_stream(stream_time=5,dont_ask=True)
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
241/101: noises=[]
241/102: means=[]
241/103:
for atten in range(30):
    ch2.start_stream(stream_time=5,dont_ask=True)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
241/104: noises=array(noises)
241/105: means=array(means)
241/106: plot(means[:,0])
241/107: plot(means[:,100])
241/108: plot(abs(means[:,100]))
241/109: cla()
241/110: plot(20*log10(abs(means[:,100])))
241/111: plot(20*log10(abs(means.T)))
241/112:
#for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    ch2.start_stream(stream_time=10,dont_ask=True)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
241/113: noises=[]
241/114: mean=[]
241/115:
for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    ch2.start_stream(stream_time=10,dont_ask=True)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
noises=array(noises)
means=array(noises)
241/116: noises=[]
241/117: means=[]
241/118:
for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    ch2.start_stream(stream_time=10,dont_ask=True)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
noises=array(noises)
means=array(noises)
241/119: mean
241/120: mean=np.mean
241/121: std
241/122: mean
241/123: means=[]
241/124: noises=[]
241/125:
for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    ch2.start_stream(stream_time=10,dont_ask=True)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
noises=array(noises)
means=array(noises)
241/126: figure()
241/127: plot(20*log10(abs(means.T)))
241/128: means[0]
241/129: show()
241/130: close('all')
241/131: figure()
241/132: plot(20*log10(abs(means.T)))
241/133: means[:,0]
241/134: means=[]
241/135: noises=[]
241/136:
for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    ch2.start_stream(stream_time=10,dont_ask=True)
    time.sleep(2)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
noises=array(noises)
means=array(noises)
241/137: noises=[]
241/138: means=[]
241/139:
for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    ch2.start_stream(stream_time=10,dont_ask=True)
    time.sleep(2)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
noises=array(noises)
means=array(means)
241/140: clf()
241/141: plot(20*log10(abs(means.T)))
241/142: k=0
241/143: td.getdata('K%04d_I'%k)
241/144: figure()
241/145: plottd.getdata('K%04d_I'%0)
241/146: plot(td.getdata('K%04d_I'%0))
241/147: plot(td.getdata('K%04d_I'%100))
241/148: plot(td.getdata('K%04d_I'%200))
241/149: ch2.input_atten.att
241/150: figure()
241/151: plot(20*log10(abs(noises.T)))
241/152: clf()
241/153: plot(abs(noises.T))
241/154: noises=[]
241/155: means=[]
241/156:
for atten in [0,5,10,15,20,25,30]:
    ch2.output_atten.att=atten
    time.sleep(2)
    ch2.start_stream(stream_time=10,dont_ask=True)
    time.sleep(2)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noises.append(ni+1j*nq)
    means.append(mi+1j*mq)
    print 'done.....' ,atten
noises=array(noises)
means=array(means)
241/157: close('all')
241/158: figure()
241/159: plot(20*log10(abs(noises.T)))
241/160: cla()
241/161: plot(20*log10(abs(means.T)))
241/162: figure()
241/163: plot(abs(noises.T))
241/164: cla()
241/165: plot(abs(means.T)/abs(noises.T))
241/166: ch2.output_atten.att=0
241/167: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
241/168: ch2.input_atten.att
241/169: ch2.input_atten.att=0
241/170: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
241/171: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
241/172: ch2.output_atten.att=6
241/173: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
241/174: ch2.output_atten.att=3
241/175: amax(amax(absolute([ch2.roach_iface.read_ADC() for j in range(20)]),axis=2),axis=0)
241/176: innoises=[]
241/177: inmeans=[]
241/178:
for atten in [0,5,10,15,20,25,30]:
    ch2.input_atten.att=atten
    time.sleep(2)
    ch2.start_stream(stream_time=10,dont_ask=True)
    time.sleep(2)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    innoises.append(ni+1j*nq)
    inmeans.append(mi+1j*mq)
    print 'done.....' ,atten
innoises=array(innoises)
inmeans=array(inmeans)
241/179: figure()
241/180: plot(abs(inmeans.T)/abs(innoises.T))
241/181: figure()
241/182: plot(20*log10(abs(means.T)))
241/183: figure()
241/184: plot(20*log10(abs(inmeans.T)))
241/185: figure()
241/186: plot(abs(innoises.T))
241/187: figure()
241/188: plot(abs(inmeans.T)/abs(innoises.T))
241/189: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=(icorr+1j*qcorr)/1.2,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/190: noisefftshift=[];meanfftshift=[]
241/191:
for atten in [0,5,10,15,20,25,30]:
    ch2.input_atten.att=atten
    time.sleep(2)
    ch2.start_stream(stream_time=10,dont_ask=True)
    time.sleep(2)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noisefftshift.append(ni+1j*nq)
    meanfftshift.append(mi+1j*mq)
    print 'done.....' ,atten
noisefftshift=array(noisefftshift)
meanfftshift=array(meanfftshift)
241/192: figure()
241/193: plot(abs(inmeans.T)/abs(innoises.T))
241/194: cla()]
241/195: cla()
241/196: plot(abs(meanfftshift.T)/abs(noisefftshift.T))
241/197: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=(icorr+1j*qcorr)/1.2,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=True,dds_dither=True); fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
241/198: noised=[];meand=[]
241/199:
for atten in [0,5,10,15,20,25,30]:
    ch2.input_atten.att=atten
    time.sleep(2)
    ch2.start_stream(stream_time=10,dont_ask=True)
    time.sleep(2)
    td = ch2.current_dirfile
    ni = array([std(td.getdata('K%04d_I'%k)) for k in range(1000)])
    nq = array([std(td.getdata('K%04d_Q'%k)) for k in range(1000)])
    mi = array([mean(td.getdata('K%04d_I'%k)) for k in range(1000)])
    mq = array([mean(td.getdata('K%04d_Q'%k)) for k in range(1000)]) 
    noised.append(ni+1j*nq)
    meand.append(mi+1j*mq)
    print 'done.....' ,atten
noised=array(noised)
meand=array(meand)
245/1: import pcp
245/2: name = ['phantom','clones','sith','hope','empire','jedi']
245/3: ch2 = pcp.mux_channel.muxChannel(name[1])
246/1: import pcp
246/2: name = ['phantom','clones','sith','hope','empire','jedi']
246/3: ch2 = pcp.mux_channel.muxChannel(name[1])
246/4:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
246/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
246/6: from numpy import *
246/7: from numpy import *; from matplotlib.pyplot import *; ion()
246/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
246/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=(icorr+1j*qcorr)/1.2,dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=True,dds_dither=True); fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
246/10: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
246/11:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
247/1: x=zeros(10000)
247/2: from numpy import *; from matplotlib.pyplot import *; ion()
247/3: x=zeros(10000)
247/4: x[1000] = 1
247/5: plot(fft.fft(x))
247/6: y= abs(fft.fft(x))
247/7: y
247/8: x[1000] = 100
247/9: y= abs(fft.fft(x))
247/10: y
247/11: y= (fft.fft(x))
247/12: y
247/13: y=around(y)
247/14: plot(abs(fft.fft(y)))
247/15: x=zeros(10000)
247/16: x[1000] = 100
247/17: x+=random.uniform(0,1,10000).astype(int)
247/18: y= (fft.fft(x))
247/19: plot(abs(fft.fft(y)))
247/20: y= around((fft.fft(x)))
247/21: plot(abs(fft.fft(y)))
246/12: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
246/13: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
246/14: import pcp.visualisation
246/15: pcp.visualisation.plot_sweep_html(ch2.current_sweep_dirfile.name)
246/16: pcp.visualisation.plot_sweep_html(ch2.current_sweep_dirfile)
246/17: ch2.current_sweep_dirfile
246/18: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
248/1: from numpy import *; from matplotlib.pyplot import *; ion()
248/2: figure()
248/3: import pcp
248/4: name = ['phantom','clones','sith','hope','empire','jedi']
248/5: ch2.current_sweep_dirfile
248/6: ch2 = pcp.mux_channel.muxChannel(name[1])
248/7:
for ch in [ch2]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
248/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
248/10: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
248/11: ch2.swee
248/12: ch2.sweep
248/13: ch2.sweep.dirfile
248/14: ch2.sweep.dirfile.name
248/15: ch2.current_sweep_dirfile
248/16: ch2.current_sweep_dirfile??
248/17: import pcp.visualisation
248/18: pcp.visualisation.plot_sweep_html(ch2.sweep.dirfile.name)
248/19: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
248/20: ch3 = pcp.mux_channel.muxChannel(name[2])
248/21:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/22:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/23: ch3 = pcp.mux_channel.muxChannel(name[2])
248/24:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/25:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/26: ch3.initialise_hardware()
248/27:
for ch in [ch3]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/28:
for ch in [ch3]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
248/29: ch3 = pcp.mux_channel.muxChannel(name[2])
248/30: ch3 = pcp.mux_channel.muxChannel(name[2])
248/31: ch1 = pcp.mux_channel.muxChannel(name[0])
248/32: ch = pcp.mux_channel.muxChannel(name[1])
248/33: ch = pcp.mux_channel.muxChannel(name[2])
248/34: ch = pcp.mux_channel.muxChannel(name[3])
248/35: ch = pcp.mux_channel.muxChannel(name[4])
248/36: ch = pcp.mux_channel.muxChannel(name[5])
249/1: import pcp
249/2: name = ['phantom','clones','sith','hope','empire','jedi']
249/3: ch = pcp.mux_channel.muxChannel(name[0])
249/4: ch3 = pcp.mux_channel.muxChannel(name[2])
249/5:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
249/6: from numpy import *; from matplotlib.pyplot import *; ion()
249/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
249/8: ch2=ch3
249/9: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
249/10: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
250/1: plot?
250/2: from numpy import *; from matplotlib.pyplot import *; ion()
250/3: plot?
250/4: figure()
250/5: import pcp
250/6: name = ['phantom','clones','sith','hope','empire','jedi']
250/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
250/8: ch3 = pcp.mux_channel.muxChannel(name[2])
250/9:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
250/10: ch3.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
251/1: 512e6/1000
250/11: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=512e3,sweep_step=10e3)
250/12: ch3.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=512e3,sweep_step=10e3)
250/13: figure()
250/14: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'green')
250/15: ch3.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
250/16: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'green')
250/17: ch3.input_atten.att
250/18: ch3.output_atten.att
250/19:
for ch in [ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
250/20:
for ch in [ch3]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
250/21: ch3.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
250/22: ch3.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
250/23: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'green')
250/24: ch3.synth_clk.SynthHDDevice.getHelp()
250/25: pcp.scripts.set_muscat_init_synth(ch3)
250/26: ch3.synth_clk.SynthHDDevice.getHelp()
250/27: ch3.synth_lo.setPLLPowerOn(0)
250/28: ch3.synth_lo.setPLLPowerOn(1)
250/29: ch3.synth_clk.SynthHDDevice.getHelp()
250/30: ch3.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
250/31: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'green')
250/32: ch2 = pcp.mux_channel.muxChannel(name[1])
250/33: ch2
250/34: ch2 = pcp.mux_channel.muxChannel(name[1])
250/35: ch3
250/36: ch3.synth_lo.SynthHDDevice.getHelp()
252/1: import pcp
252/2: name = ['phantom','clones','sith','hope','empire','jedi']
252/3: ch2 = pcp.mux_channel.muxChannel(name[1])
252/4: ch3 = pcp.mux_channel.muxChannel(name[2])
252/5:
for ch in [ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
252/6: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
252/7: from numpy import *; from matplotlib.pyplot import *; ion()
252/8: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
252/9: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
252/10: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
252/11: ch3.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
252/12: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=512e3,sweep_step=10e3)
252/13: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
252/14: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
252/15: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
252/16: ch3.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
252/17: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'red')
252/18: ch1 = pcp.mux_channel.muxChannel(name[0])
252/19:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
252/20:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
252/21: ch1 = pcp.mux_channel.muxChannel(name[0])
252/22: ch4 = pcp.mux_channel.muxChannel(name[3])
253/1: import pcp
253/2: ch1 = pcp.mux_channel.muxChannel(name[0])
253/3: name = ['phantom','clones','sith','hope','empire','jedi']
253/4: ch1 = pcp.mux_channel.muxChannel(name[0])
253/5: ch2 = pcp.mux_channel.muxChannel(name[1])
253/6: ch3 = pcp.mux_channel.muxChannel(name[2])
253/7:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
253/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
253/9: from numpy import *; from matplotlib.pyplot import *; ion()
253/10: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
253/11: ch3.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
253/12: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
253/13: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
253/14: for ch in [ch1,ch2,ch3]:ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
253/15: for ch in [ch1,ch2,ch3]: ch.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
253/16: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'red')
253/17: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
253/18: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
253/19: ch1.synth_lo.SynthHDDevice.getHelp()
253/20: ch1.start_stream(stream_time=10)
253/21: td=ch1.current_dirfile
253/22: figure()
253/23:
for kidnum in range(len(freqs)):
    col='red'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
253/24: ch2.start_stream(stream_time=10)
253/25: td=ch2.current_dirfile
253/26:
for kidnum in range(len(freqs)):
    col='green'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
253/27: ch3.start_stream(stream_time=10)
253/28: td=ch2.current_dirfile
253/29:
for kidnum in range(len(freqs)):
    col='b'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:2*2048],NFFT=2*2048,Fs=488)
    pp,pf=mlab.psd(p[:2*2048],NFFT=2*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
253/30: clf()
253/31:
for kidnum in range(len(freqs)):
    col='b'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:1*2048],NFFT=1*2048,Fs=488)
    pp,pf=mlab.psd(p[:1*2048],NFFT=1*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
253/32: td=ch3.current_dirfile
253/33:
for kidnum in range(len(freqs)):
    col='r'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:1*2048],NFFT=1*2048,Fs=488)
    pp,pf=mlab.psd(p[:1*2048],NFFT=1*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
253/34: td=ch1.current_dirfile
253/35:
for kidnum in range(len(freqs)):
    col='g'
    i=td.getdata('K%04d_I'%kidnum); q=td.getdata('K%04d_Q'%kidnum); a=np.abs(i+1j*q); p=angle(i+1j*q)
    pa,pf=mlab.psd(a[:1*2048],NFFT=1*2048,Fs=488)
    pp,pf=mlab.psd(p[:1*2048],NFFT=1*2048,Fs=488)  
    subplot(411);    plot(freqs[kidnum],mean(abs(i+1j*q)),'o',color=col)
    subplot(412,sharex=gca());    plot(freqs[kidnum],mean(pa[pf>200]),'o',color=col)
    subplot(413,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200]),'o',color=col)
    subplot(414,sharex=gca());    semilogy(freqs[kidnum],mean(pp[pf>200])*mean(a)**2,'o',color=col)
253/36: for ch in [ch1,ch2,ch3]: ch.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
253/37: figure()
253/38: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
253/39: plot(ch2.sweep.rf_freqs.T,20*log10(abs(ch2.sweep.data.T)),'green')
253/40: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'red')
253/41: ch1.synth_lo.SynthHDDevice.getHelp()
253/42: ch2.synth_lo.SynthHDDevice.getHelp()
253/43: ch3.synth_lo.SynthHDDevice.getHelp()
253/44: ch1.synth_lo.SynthHDDevice.sendCommand('i100\r')
253/45: ch1.synth_lo.SynthHDDevice.getHelp()
253/46: ch1.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
253/47: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
253/48: ch1.synth_lo.SynthHDDevice.getHelp()
253/49: ch1.synth_lo.SynthHDDevice.sendCommand('U3\r')
253/50: ch1.synth_clk.SynthHDDevice.sendCommand('U3\r')
253/51: ch1.synth_lo.SynthHDDevice.getHelp()
253/52: ch1.synth_clk.getFrequency()
253/53: ch1.synth_clk.SynthHDDevice.sendCommand('U3\r')
253/54: ch1.synth_lo.getFrequency()
253/55: ch1.synth_lo.SynthHDDevice.getHelp()
253/56: ch2.synth_lo.SynthHDDevice.getHelp()
253/57: ch1.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
253/58: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
253/59: ch1.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
253/60: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
253/61: ch4 = pcp.mux_channel.muxChannel(name[3])
253/62: import casperfpga
253/63: casperfpga.katcp_fpga.KatcpFpga('192.168.40.99', timeout = 10. )
253/64: casperfpga.katcp_fpga.KatcpFpga('192.168.40.99', timeout = 1. )
253/65: casperfpga.katcp_fpga.KatcpFpga('192.168.40.99', timeout = 10. )
253/66: casperfpga.__version__
253/67: casperfpga.__version__
253/68: reload(casperfpga)
253/69: casperfpga.__version__
253/70: !ping 192.168.40.99
253/71: casperfpga.katcp_fpga.KatcpFpga('192.168.40.99', timeout = 10. )
253/72: casperfpga.KatcpFpga?
253/73: casperfpga.KatcpFpga('192.168.40.99',timeout=10.)
253/74: ch2
253/75: ch2.roach_iface.fpga.bindaddr
253/76: ch2.roach_iface.fpga._bindaddr
253/77: casperfpga.__file__
254/1: import casperfpga
254/2: casperfpga.__version__
251/2: import casperfpga
251/3: fpag = casperfpga.casperfpga.CasperFpga?
251/4: fpag = casperfpga.casperfpga.CasperFpga('192.168.40.99',timeout=10.)
251/5: fpag.is_running()
251/6: fpga = fpag
251/7: fpga.is_connected()
251/8: fpga.upload_to_ram_and_program('/home/muscat/multitone110910/multitone/pcp/firmware/stable_ctime_v6_2_2018_Mar_21_0537.fpg')
251/9: fpga.is_running()
253/78: ch1 = pcp.mux_channel.muxChannel(name[0])
253/79: ch1 = pcp.mux_channel.muxChannel(name[0])
253/80: ch1 = pcp.mux_channel.muxChannel(name[0])
253/81: ch1 = pcp.mux_channel.muxChannel(name[0])
253/82: ch1 = pcp.mux_channel.muxChannel(name[0])
253/83: ch1 = pcp.mux_channel.muxChannel(name[0])
253/84: ch1 = pcp.mux_channel.muxChannel(name[0])
253/85: ch1 = pcp.mux_channel.muxChannel(name[0])
253/86: ch1 = pcp.mux_channel.muxChannel(name[0])
255/1: import pcp
255/2: name = ['phantom','clones','sith','hope','empire','jedi']
255/3: ch1 = pcp.mux_channel.muxChannel(name[0])
256/1: import pcp
256/2: name = ['phantom','clones','sith','hope','empire','jedi']
256/3: ch1 = pcp.mux_channel.muxChannel(name[0])
256/4: import casperfpga
257/1: import casperfpga
258/1: name = ['phantom','clones','sith','hope','empire','jedi']
258/2: import pcp
258/3: ch1 = pcp.mux_channel.muxChannel(name[0])
258/4: ch2 = pcp.mux_channel.muxChannel(name[1])
258/5: ch3 = pcp.mux_channel.muxChannel(name[2])
258/6:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
258/7: 2676354257
258/8: hex(2676354257)
258/9:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
258/10: 0x-607A132F
258/11: 0x-607A132F
258/12: dec('0x-607A132F')
258/13: '0x-607A132F'
258/14: 0x100
258/15: -0x607A132F
258/16: 0x9F85ECD1
258/17: 0x1F85ECD1
258/18: 0x89F85ECD1
258/19: 0x9F85ECD1
258/20: 0x9F85ECD1-0x8000000
258/21: 0x607A132F
258/22: -0x607A132F
258/23: 0x9F85ECD1-0x80000000
258/24: 0x9F85ECD1+0x80000000
258/25: hex(0x9F85ECD1+0x80000000)
259/1: import pcp
259/2: name = ['phantom','clones','sith','hope','empire','jedi']
259/3: ch1 = pcp.mux_channel.muxChannel(name[0])
259/4: ch2 = pcp.mux_channel.muxChannel(name[1])
259/5: ch3 = pcp.mux_channel.muxChannel(name[2])
259/6:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
259/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
259/8: from numpy import *; from matplotlib.pyplot import *; ion()
259/9: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
259/10: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
259/11: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
260/1: from numpy import *; from matplotlib.pyplot import *; ion()
260/2: name = ['phantom','clones','sith','hope','empire','jedi']
260/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
260/4: ch1 = pcp.mux_channel.muxChannel(name[0])
260/5: import pcp
260/6: import casperfpga
260/7: casperfpga.__version__
260/8: casperfpga.__version_
260/9: casperfpga.__file__
260/10: ch1 = pcp.mux_channel.muxChannel(name[0])
260/11: ch2 = pcp.mux_channel.muxChannel(name[1])
260/12: ch3 = pcp.mux_channel.muxChannel(name[2])
260/13:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
260/14: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
261/1: import pcp
261/2: import casperfpga
262/1: from numpy import *; from matplotlib.pyplot import *; ion()
262/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
262/3: import pcp
262/4: ch1 = pcp.mux_channel.muxChannel(name[0])
262/5: name = ['phantom','clones','sith','hope','empire','jedi']
262/6: ch1 = pcp.mux_channel.muxChannel(name[0])
262/7: ch2 = pcp.mux_channel.muxChannel(name[1])
262/8: ch3 = pcp.mux_channel.muxChannel(name[2])
262/9:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
262/10: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
263/1: import pcp
263/2: name = ['phantom','clones','sith','hope','empire','jedi']
263/3: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
263/4: ch1 = pcp.mux_channel.muxChannel(name[0])
263/5: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
263/6: from numpy import *; from matplotlib.pyplot import *; ion()
263/7: feqs
263/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
263/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
264/1: import pcp
264/2: name = ['phantom','clones','sith','hope','empire','jedi']
264/3: ch1 = pcp.mux_channel.muxChannel(name[0])
264/4: from numpy import *; from matplotlib.pyplot import *; ion()
264/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
264/6: ch2 = pcp.mux_channel.muxChannel(name[1])
264/7: ch3 = pcp.mux_channel.muxChannel(name[2])
264/8:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
264/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
265/1: name = ['phantom','clones','sith','hope','empire','jedi']
265/2: from numpy import *; from matplotlib.pyplot import *; ion()
265/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
265/4: import pcp
265/5: ch1 = pcp.mux_channel.muxChannel(name[0])
265/6: ch2 = pcp.mux_channel.muxChannel(name[1])
265/7: ch3 = pcp.mux_channel.muxChannel(name[2])
265/8:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
265/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
266/1: imoprt pcp
266/2: import pcp
266/3: name = ['phantom','clones','sith','hope','empire','jedi']
266/4: from numpy import *; from matplotlib.pyplot import *; ion()
266/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
266/6: ch1 = pcp.mux_channel.muxChannel(name[0])
266/7: ch2 = pcp.mux_channel.muxChannel(name[1])
266/8: ch3 = pcp.mux_channel.muxChannel(name[2])
266/9:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
266/10: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
266/11:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
266/12: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
266/13: 2**21
267/1: import pcp
267/2: name = ['phantom','clones','sith','hope','empire','jedi']
267/3: ch2 = pcp.mux_channel.muxChannel(name[1])
267/4: ch1 = pcp.mux_channel.muxChannel(name[0])
267/5: ch3 = pcp.mux_channel.muxChannel(name[2])
267/6: from numpy import *; from matplotlib.pyplot import *; ion()
267/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
267/8:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
268/1: import pcp
268/2: name = ['phantom','clones','sith','hope','empire','jedi']
268/3: from numpy import *; from matplotlib.pyplot import *; ion()
268/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
268/5: ch1 = pcp.mux_channel.muxChannel(name[0])
268/6: ch2 = pcp.mux_channel.muxChannel(name[1])
268/7: ch3 = pcp.mux_channel.muxChannel(name[2])
268/8:
for ch in [ch1,ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
268/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
269/1: import pcp
270/1: import pcp
270/2: name = ['phantom','clones','sith','hope','empire','jedi']
270/3: ch1 = pcp.mux_channel.muxChannel(name[0])
270/4: from numpy import *; from matplotlib.pyplot import *; ion()
270/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
270/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
270/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
271/1: import pcp
271/2: name = ['phantom','clones','sith','hope','empire','jedi']
271/3: ch1 = pcp.mux_channel.muxChannel(name[0])
271/4:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
271/5: ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
271/6: from numpy import *; from matplotlib.pyplot import *; ion()
271/7: ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
271/8: from numpy import *; from matplotlib.pyplot import *; ion()
271/9: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
271/10: ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
271/11: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
271/12: ch1.roach_iface.fpga._timeout
271/13: ch1.roach_iface.fpga._timeout=30
271/14: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
271/15: pcp.scripts.set_muscat_init_synth?
271/16: pcp.scripts.set_muscat_init_synth(ch1)
271/17: pcp.scripts.set_muscat_init_synth(ch2)
271/18:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
271/19: ch1.roach_iface.write_freqs_to_qdr(array([1000000]),[1],[0])
271/20: ch1.roach_iface.write_freqs_to_qdr(array([1000000]),array([1]),array([0]))
271/21: clear
271/22: ch1.roach_iface.write_freqs_to_qdr(array([1000000]),array([1]),array([0]))
272/1: import pcp
272/2: from numpy import *; from matplotlib.pyplot import *; ion()
272/3: from numpy import *; from matplotlib.pyplot import *; ion()
272/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
272/5: name = ['phantom','clones','sith','hope','empire','jedi']
272/6: ch1 = pcp.mux_channel.muxChannel(name[0])
272/7:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
272/8: ch1.roach_iface.write_freqs_to_qdr(array([1000000]),array([1]),array([0]))
272/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
272/10: ch1.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
272/11: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
273/1: from numpy import *; from matplotlib.pyplot import *; ion()
273/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
273/3: import pcp
273/4: ch1 = pcp.mux_channel.muxChannel(name[0])
273/5: name = ['phantom','clones','sith','hope','empire','jedi']
273/6: ch1 = pcp.mux_channel.muxChannel(name[0])
273/7:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
273/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
273/9: ch2 = pcp.mux_channel.muxChannel(name[1])
273/10: ch3 = pcp.mux_channel.muxChannel(name[2])
273/11:
for ch in [ch2,ch3]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
273/12: ch2.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch2.toneslist._bandwidth=512e6;ch2.toneslist.load_tonelist(); ch2.toneslist.bandwidth = 512e6; ch2.toneslist.phases=phases; ch2.toneslist.amp=amps; ch2.toneslist.lo_freq = 784e6; ch2.toneslist._update_frequencies(); ch2.roach_iface.write_freqs_to_qdr(ch2.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch2.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch2.roach_iface.firmware_reg_list,sleep_time =0.)
273/13: ch3.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
273/14: ch1.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
273/15: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'blue')
273/16: ch1.sweep_lo(sweep_span=2000e3,sweep_step=10e3)
273/17: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
273/18: ch4 = pcp.mux_channel.muxChannel(name[3])
273/19: pcp.ROACH_LIST
274/1: import pcp
274/2: ch1 = pcp.mux_channel.muxChannel(name[0])
274/3: name = ['phantom','clones','sith','hope','empire','jedi']
274/4: ch1 = pcp.mux_channel.muxChannel(name[0])
274/5:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
274/6: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
274/7: from numpy import *; from matplotlib.pyplot import *; ion()
274/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
274/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
274/10: ch1.sweep_lo(sweep_span=2000e3,sweep_step=10e3)
274/11: ch2 = pcp.mux_channel.muxChannel(name[1])
275/1: from numpy import *; from matplotlib.pyplot import *; ion()
275/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
275/3: name = ['phantom','clones','sith','hope','empire','jedi']
275/4: import pcp
275/5: ch1 = pcp.mux_channel.muxChannel(name[0])
275/6:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
275/7: ch1.synth_lo.SynthHDDevice.getHelp()
275/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
275/9: ch1.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
275/10: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
275/11: ch2 = pcp.mux_channel.muxChannel(name[1])
276/1: import pcp
276/2: name = ['phantom','clones','sith','hope','empire','jedi']
276/3: mc = pcp.mux_channel.muxChannelList?
276/4: mc = pcp.mux_channel.muxChannelList(name)
276/5: mc
276/6: mc.clones
276/7: mc[0]
276/8:
for j in mc:
    print j
276/9:
for mcname in names:
    print eval('mc.'+mcname)
276/10:
for mcname in name:
    print eval('mc.'+mcname)
276/11: mclist = [eval('mc.'+mcname) for mcname in mc]
276/12: mclist = [eval('mc.'+mcname) for mcname in name]
276/13: mclist[0]
276/14:
for ch in mclist:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
276/15:
for ch in mclist:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
276/16:
for ch in mclist:
    print ch ch.synth_lo.SynthHDDevice.getHelp()
276/17:
for ch in mclist:
    print ch,ch.synth_lo.SynthHDDevice.getHelp()
276/18: ch.synth_lo.SynthHDDevice.getPhaseLockStatus()
277/1: import pcp
277/2: ch1 = pcp.mux_channel.muxChannel(name[0])
277/3: name = ['phantom','clones','sith','hope','empire','jedi']
277/4: ch6 = pcp.mux_channel.muxChannel(name[5])
277/5: ch6.initialise_hardware()
277/6: ch6.synth_lo.getPhaseLockStatus()
278/1: import pcp
278/2: name = ['phantom','clones','sith','hope','empire','jedi']
278/3: mclist = [eval('mc.'+mcname) for mcname in name]
278/4: mc = pcp.mux_channel.muxChannelList(name)
278/5: mclist = [eval('mc.'+mcname) for mcname in name]
278/6: ch6 = mclist[5]
278/7: ch6.synth_lo.getPhaseLockStatus
278/8: ch6.synth_lo.getPhaseLockStatus()
278/9: ch6.synth_clk.getPhaseLockStatus()
278/10: ch5 = mclist[4]
278/11: ch5.synth_lo.getPhaseLockStatus()
278/12: ch5.synth_clk.getPhaseLockStatus()
279/1: import pcp
279/2: name = ['phantom','clones','sith','hope','empire','jedi']
279/3: mc = pcp.mux_channel.muxChannelList(name)
279/4: mclist = [eval('mc.'+mcname) for mcname in name]
279/5:
for ch in mclist:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
279/6: ch
279/7: not 0
279/8: not 1
279/9: mclist
279/10: mclist[1]
279/11: ch2 = mclist[1]
279/12: ch2.synth_lo.getPhaseLockStatus()
279/13: ch2.synth_lo.getPhaseLockStatus()
279/14: ch2.synth_lo.getPhaseLockStatus()
279/15: ch2.synth_lo.getPhaseLockStatus()
279/16: ch2.synth_lo.getPhaseLockStatus()
279/17: ch2.synth_lo.getPhaseLockStatus()
279/18: ch2.synth_lo.getPhaseLockStatus()
279/19: ch2.synth_lo.getPhaseLockStatus()
279/20: ch2.synth_lo.getPhaseLockStatus()
279/21: ch2.synth_lo.getPhaseLockStatus()
279/22: ch2.synth_lo.setPLLPowerOn(0)
279/23: ch2.synth_lo.setPLLPowerOn(1)
279/24: ch2.synth_lo.getPhaseLockStatus()
279/25: ch2.synth_clk.getPhaseLockStatus()
279/26:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
279/27:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
280/1: name = ['phantom','clones','sith','hope','empire','jedi']
280/2: import pcp
280/3: mclist[1]
280/4: mc = pcp.mux_channel.muxChannelList(name)
280/5: mclist = [eval('mc.'+mcname) for mcname in name]
280/6:
for ch in mclist:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
280/7:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
280/8:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
280/9:
for ch in mclist:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
280/10:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
280/11:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
280/12:
for ch in mclist:
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'lo',ch.synth_lo.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
    print 'clk',ch.synth_clk.getPhaseLockStatus()
281/1: import pcp
281/2: name = ['phantom','clones','sith','hope','empire','jedi']
281/3: mclist = [eval('mc.'+mcname) for mcname in name]
281/4: mc = pcp.mux_channel.muxChannelList(name)
281/5: mclist = [eval('mc.'+mcname) for mcname in name]
281/6:
for ch in mclist:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
281/7: mc.sweep_lo([mc.phantom,mc.clones,mc.sith,mc.hope,mc.empire,mc.jedi],sweep_span=2e6,sweep_step=10000.)
281/8: mc.sweep_lo(name,sweep_span=2e6,sweep_step=10000.)
281/9: for ch in mclist:ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
281/10:
for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch1.roach_iface.firmware_reg_list,sleep_time =0.)
281/11: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
281/12: from numpy import *; from matplotlib.pyplot import *; ion()
281/13: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
281/14:
for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch1.roach_iface.firmware_reg_list,sleep_time =0.)
281/15:
for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
281/16: mc.sweep_lo(name,sweep_span=2e6,sweep_step=10000.)
281/17: colors = 'r','g','b','c','m','y'
281/18: #plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
281/19:
for ch,col in zip(mclist,colors):
    plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),color=col)
281/20:
for ch,col in zip(mclist,colors):
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),color=col)
281/21:
for ch in mclist:
    print ch.current_sweep_dirfile
281/22:
for ch in mclist:
    print ch.sweep.dirfile
281/23:
for ch in mclist:
    print ch.sweep.dirfile.name
281/24:
for ch in mclist:
    ch.sweep.dirfile.name
281/25: mc.sweep_lo(name,startidx=8,sweep_avgs=18 ,stopidx=None,sweep_span=0.2e6,sweep_step=10000.)
281/26: figure()
281/27:
for ch,col in zip(mclist,colors):
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),color=col)
281/28: mc.sweep_lo(name,sweep_span=2e6,sweep_step=100000.)
281/29:
for ch,col in zip(mclist,colors):
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),color=col)
281/30: mc.sweep_lo(name,sweep_span=2e6,sweep_avgs=100,sweep_step=100000.)
281/31: figure()
281/32: mc.sweep_lo(name,sweep_span=2e6,sweep_avgs=100,sweep_step=100000.)
282/1: plot
282/2: abs 1
283/1: abs 10
283/2: from numpy import *; from matplotlib.pyplot import *; ion()
283/3: matplotlib.backend
283/4: matplotlib.backends.backend
283/5: import pcp
283/6: name = ['phantom','clones','sith','hope','empire','jedi']
283/7: ch1 = pcp.mux_channel.muxChannel(name[0])
283/8:
for ch in [ch1, ch2, ch3, ch4, ch5, ch6]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
283/9: ch2 = pcp.mux_channel.muxChannel(name[1])
283/10: ch3 = pcp.mux_channel.muxChannel(name[2])
283/11: ch4 = pcp.mux_channel.muxChannel(name[3])
283/12: ch5 = pcp.mux_channel.muxChannel(name[4])
283/13: ch6 = pcp.mux_channel.muxChannel(name[5])
283/14:
for ch in [ch1, ch2, ch3, ch4, ch5, ch6]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
283/15:
for ch in [ch1, ch2, ch3, ch4, ch5, ch6]:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
283/16: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
283/17:
for ch in [ch1, ch2, ch3, ch4, ch5, ch6]:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
283/18:
for ch in [ch1, ch2, ch3, ch4, ch5, ch6]:
    ch.sweep_lo(sweep_span=2e6,sweep_step=10000.)
283/19: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
283/20:
for ch in [ch1, ch2, ch3, ch4, ch5, ch6]:
    ch.sweep_lo(sweep_span=2e6,sweep_step=10000.,sweep_avgs=100)
283/21: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
283/22: ch1.sweep_lo(sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
283/23: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
283/24: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3)
283/25: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'b')
283/26: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=5)
283/27: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'y')
283/28: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=9)
283/29: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'b')
283/30: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=8)
283/31: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
283/32: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=7)
283/33: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
283/34: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10)
283/35: clf()
283/36: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10)
283/37: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
283/38: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=25)
283/39: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
283/40: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=30)
283/41: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'b')
283/42: arange(10)[2:None]
283/43: arange(10)[2:]
283/44: arange(10)[2:10]
283/45: arange(10)[2:11]
283/46: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=None)
283/47: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'k')
283/48: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=30)
283/49: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
283/50: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=29)
283/51: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
283/52: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=35)
283/53: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'m')
283/54: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
283/55: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'y')
283/56: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
283/57: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'k')
283/58: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
283/59: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
283/60: ch1.sweep.data[0]
283/61: ch1.sweep.lo_freqs
283/62: freqs[0]
283/63: freqs[0]+ch1.sweep.lo_freqs
283/64: ch1.sample_rate
283/65: ch1.sample_rate*2
283/66: ch1.sample_rate=976.5625
283/67: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
283/68: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'grey')
283/69: ch1.sample_rate=976.5625/2.
283/70: ch1.current_sweep_dirfile?
283/71: ch1.current_dirfile
283/72: ch1.current_dirfile.name
283/73:
        lotimes = self.current_dirfile.getdata( "lostep_times" )
        ptimes  = self.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
283/74: self=ch1
283/75:
        lotimes = self.current_dirfile.getdata( "lostep_times" )
        ptimes  = self.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
283/76: figure()
283/77: plot lotimes
283/78: plot ptimes
283/79:


idxs = np.searchsorted(ptimes, lotimes)[1:]
283/80: idxs
283/81: ch1.writer_daemon.pause_writing?
283/82: ch1.writer_daemon.pause_writing??
284/1: name = ['phantom','clones','sith','hope','empire','jedi']
284/2: import pcp
284/3: ch1 = pcp.mux_channel.muxChannel(name[0])
284/4: from numpy import *; from matplotlib.pyplot import *; ion()
284/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
284/6: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
284/7:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
284/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
284/9: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
285/1: import pcp
285/2: name = ['phantom','clones','sith','hope','empire','jedi']
285/3: from numpy import *; from matplotlib.pyplot import *; ion()
285/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
285/5: ch1 = pcp.mux_channel.muxChannel(name[0])
285/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
285/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
285/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
286/1: import pcp
286/2: name = ['phantom','clones','sith','hope','empire','jedi']
286/3: ch1 = pcp.mux_channel.muxChannel(name[0])
286/4:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=0)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
286/5: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
286/6: from numpy import *; from matplotlib.pyplot import *; ion()
286/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
286/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
286/9: ch2.sweep_lo(startidx=5,sweep_avgs=15,sweep_span=2000e3,sweep_step=10e3)
286/10: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
286/11:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
286/12: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
286/13: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100)
286/14: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'grey')
286/15: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=2.0)
286/16: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
286/17: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=5.0)
286/18:
        lotimes = ch.current_dirfile.getdata( "lostep_times" )
        ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
286/19: figure()
286/20: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
286/21: figure()
286/22: plot ptimes
286/23: plot lotimes
286/24: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=0.1)
286/25:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
286/26: plot ptimes
286/27: plot lotimes
286/28:


idxs = np.searchsorted(ptimes, lotimes)[1:]
286/29: idxs
286/30:


idxs = np.searchsorted(ptimes, lotimes)
286/31: idxs
286/32: diff idxs
286/33: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
286/34:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
286/35: idxs = np.searchsorted(ptimes, lotimes)[1:]
286/36: idxs
286/37: diff idxs
286/38: ch1.toneslist.sweep_lo_freqs
286/39: diff ch1.toneslist.sweep_lo_freqs
286/40: len _
286/41: diff idxs
286/42: len _
286/43: idxs
286/44: ptimes
287/1: import pcp
287/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
287/3: from numpy import *; from matplotlib.pyplot import *; ion()
287/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
287/5: name = ['phantom','clones','sith','hope','empire','jedi']
287/6: ch1 = pcp.mux_channel.muxChannel(name[0])
287/7:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
287/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
287/9: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
287/10: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
287/11:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
287/12: figure()
287/13: plot ptimes
287/14: plot lotimes
287/15: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
287/16: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
287/17:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
287/18: plot ptimes
287/19: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
287/20: figure()
287/21: plot ptimes
287/22: plot lotimes
287/23: ptp(ch1.toneslist.sweep_lo_freqs)
288/1: import pcp
288/2: name = ['phantom','clones','sith','hope','empire','jedi']
288/3: from numpy import *; from matplotlib.pyplot import *; ion()
288/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
288/5: ch1 = pcp.mux_channel.muxChannel(name[0])
288/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
288/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
288/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
288/9: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
288/10:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
288/11: figure()
288/12: plot ptimes
288/13: plot lotimes
289/1: import pcp
289/2: from numpy import *; from matplotlib.pyplot import *; ion()
289/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
289/4: name = ['phantom','clones','sith','hope','empire','jedi']
289/5: ch1 = pcp.mux_channel.muxChannel(name[0])
289/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
289/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
289/8: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
289/9: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
289/10:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
289/11: plot ptimes
289/12: plot lotimes
289/13: figure()
289/14: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
289/15: timeit time.time()
289/16: 61.9e-9*488*6
290/1: import pcp
290/2: from numpy import *; from matplotlib.pyplot import *; ion()
290/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
290/4: name = ['phantom','clones','sith','hope','empire','jedi']
290/5: ch1 = pcp.mux_channel.muxChannel(name[0])
290/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
290/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
290/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
290/9: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
290/10: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
290/11: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
290/12: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
290/13: pl=plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
290/14:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
290/15: figure()
290/16: plot ptimes
290/17: plot lotimes
290/18: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
290/19:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
290/20: plot ptimes
290/21: plot lotimes
291/1: import pcp
291/2: from numpy import *; from matplotlib.pyplot import *; ion()
291/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
291/4: name = ['phantom','clones','sith','hope','empire','jedi']
291/5: ch1 = pcp.mux_channel.muxChannel(name[0])
291/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
291/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
291/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweep_overshoot=1.1)
291/9: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
291/10: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
291/11: figure()
291/12:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
291/13: plot ptimes
291/14: plot lotimes
291/15: #ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
291/16: 2000e3/10e3
291/17: 2000e3/10e3*30*1.1
291/18: 2000e3/10e3*30*1.1/488
292/1: from numpy import *; from matplotlib.pyplot import *; ion()
292/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
292/3: name = ['phantom','clones','sith','hope','empire','jedi']
292/4: import pcp
292/5: ch1 = pcp.mux_channel.muxChannel(name[0])
292/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
292/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
292/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
292/9: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
292/10:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
292/11: figure()
292/12: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
292/13: clf()
292/14: plot ptimes
292/15: plot lotimes
292/16: 30. / 488 * 1.1
293/1: import pcp
293/2: pcp.scripts.initialise_roaches()
293/3: name = ['phantom','clones','sith','hope','empire','jedi']
293/4: pcp.scripts.initialise_roaches(name)
293/5: mcdict=_
293/6: ch1=mcdict['phantom']
293/7: _
293/8: __
293/9: a=1
293/10: 1
293/11: 2
293/12: 3
293/13: 4
293/14: 5
293/15: __
293/16: ___
293/17: _[4]
293/18: _4
293/19: _5
293/20: _6
293/21: _3
293/22: _4
293/23: Out[4]
293/24: Out[23]
293/25: 1
293/26: Out[26]
293/27: Out[25]
293/28: In[25]
293/29: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
293/30: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
293/31: from numpy import *; from matplotlib.pyplot import *; ion()
293/32: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
293/33: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
293/34: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
293/35: plot lotimes
293/36: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')#
293/37: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
293/38: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')#
294/1: import pcp
294/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
294/3: from numpy import *; from matplotlib.pyplot import *; ion()
294/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
294/5: ch1 = pcp.mux_channel.muxChannel(name[0])
294/6: name = ['phantom','clones','sith','hope','empire','jedi']
294/7: ch1 = pcp.mux_channel.muxChannel(name[0])
294/8:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
294/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
294/10: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
294/11: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')#
294/12: 11000/488
295/1: import pcp
295/2: from numpy import *; from matplotlib.pyplot import *; ion()
295/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
295/4: name = ['phantom','clones','sith','hope','empire','jedi']
295/5: ch1 = pcp.mux_channel.muxChannel(name[0])
295/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
295/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
295/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
295/9: reload(pcp)
295/10: ch1 = pcp.mux_channel.muxChannel(name[0])
295/11: reload(pcp)
295/12: ch1 = pcp.mux_channel.muxChannel(name[0])
296/1: import pcp
296/2: name = ['phantom','clones','sith','hope','empire','jedi']
296/3: from numpy import *; from matplotlib.pyplot import *; ion()
296/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
296/5: ch1 = pcp.mux_channel.muxChannel(name[0])
296/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
296/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
296/8: ch1.sweep_lo(sweep_avgs=30,sweep_span=2000e3,sweep_step=10e3,startidx=10,stopidx=100,sweepstep_overshoot=1.1)
296/9: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')#
296/10:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
296/11: plot lotimes
296/12: plot ptimes
297/1: import pcp
297/2: from numpy import *; from matplotlib.pyplot import *; ion()
297/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
297/4: name = ['phantom','clones','sith','hope','empire','jedi']
297/5: ch1 = pcp.mux_channel.muxChannel(name[0])
297/6:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
297/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
297/8: ch1.sweep_lo()
297/9: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')#
297/10: ch1.synth_lo.SynthHDDevice.getHelp()
297/11:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
297/12:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
297/13:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
297/14: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
297/15: ch1.sweep_lo()
297/16: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')#
297/17: ch1.sweep_lo(startidx=9)
297/18: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')#
297/19: ch1.sweep_lo(startidx=9,sweep_avgs=20)
297/20: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')#
297/21: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
297/22: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
298/1: import pcp
298/2: from numpy import *; from matplotlib.pyplot import *; ion()
298/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
298/4: name = ['phantom','clones','sith','hope','empire','jedi']
298/5: ch1 = pcp.mux_channel.muxChannel(name[0])
298/6:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
298/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
298/8: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
299/1: from numpy import *; from matplotlib.pyplot import *; ion()
299/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
299/3: import pcp
299/4: ch1 = pcp.mux_channel.muxChannel(name[0])
299/5: name = ['phantom','clones','sith','hope','empire','jedi']
299/6: ch1 = pcp.mux_channel.muxChannel(name[0])
299/7:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
299/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
299/9: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
299/10: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
300/1: import pcp
300/2: from numpy import *; from matplotlib.pyplot import *; ion()
300/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
300/4: name = ['phantom','clones','sith','hope','empire','jedi']
300/5: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
300/6: ch1 = pcp.mux_channel.muxChannel(name[0])
300/7: pcp.configuration.filesys_config['savedatadir']
300/8: pcp.configuration.filesys_config['savedatadir']='/tmp/muscatdata'
300/9: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
300/10: ch1 = pcp.mux_channel.muxChannel(name[0])
300/11:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
300/12: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
300/13: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
300/14: pcp.configuration.filesys_config['savedatadir']='/run/user/1000'
300/15: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
301/1: from numpy import *; from matplotlib.pyplot import *; ion()
301/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
301/3: name = ['phantom','clones','sith','hope','empire','jedi']
301/4: import pcp
301/5: ch1 = pcp.mux_channel.muxChannel(name[0])
301/6:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
301/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
301/8: ch1.sweep_lo(startidx=9,sweep_avgs=20,stopidx=20)
301/9: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
301/10:
lotimes = ch.current_dirfile.getdata( "lostep_times" )
ptimes  = ch.current_dirfile.getdata( "python_timestamp" ) # way to get the python_timestamp field with knowing any field suffix
301/11: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
301/12: clf()
301/13: plot ptimes
301/14: plot lotimes
301/15: 123
301/16: pwd
302/1: import pcp
302/2: cd ..
303/1: import pcp
304/1: import pcp
304/2: name = ['phantom','clones','sith','hope','empire','jedi']
304/3: mc = pcp.mux_channel.muxChannelList(name)
305/1: import pcp
305/2: name = ['phantom','clones','sith','hope','empire','jedi']
305/3: mc = pcp.mux_channel.muxChannelList(name)
305/4: mclist = [eval('mc.'+mcname) for mcname in name]
305/5:
#for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
305/6: from numpy import *; from matplotlib.pyplot import *; ion()
305/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
305/8:
for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
305/9: mclist[0]
305/10: ch1=mclist[0]
305/11: ch1.sweep_lo()
305/12: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
305/13: ch1.synth_lo.SynthHDDevice.getHelp()
305/14: ch1.sweep_lo(sweep_avgs=20,start_idx=10)
305/15: ch1.sweep_lo(sweep_avgs=20,startidx=10)
305/16: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
306/1: import pcp
306/2: name = ['phantom','clones','sith','hope','empire','jedi']
306/3: mc = pcp.mux_channel.muxChannelList(name)
306/4: mclist = [eval('mc.'+mcname) for mcname in name]
306/5:
for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
306/6: from numpy import *; from matplotlib.pyplot import *; ion()
306/7: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
306/8:
for ch in mclist:
    ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'
    ch.toneslist._bandwidth=512e6
    ch.toneslist.load_tonelist()
    ch.toneslist.bandwidth = 512e6
    ch.toneslist.phases=phases
    ch.toneslist.amp=amps
    ch.toneslist.lo_freq = 784e6
    ch.toneslist._update_frequencies()
    ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False)
    fft_shift = 2**9
    pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1}, ch.roach_iface.firmware_reg_list,sleep_time =0.)
306/9: ch1=mclist[0]
306/10: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_res = 1000)
306/11: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000)
306/12: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
306/13: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
306/14: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
306/15: ch1.sweep_lo(sweep_avgs=100,startidx=10,sweep_step = 100)
306/16: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
306/17: ch1.start_stream(stream_time=10)
306/18: i=ch1.current_dirfile.getdata('K000_I')
306/19: i=ch1.current_dirfile.getdata('K0000_I')
306/20: len i
306/21: len i/244
306/22: len(i)/488
306/23: ch1.start_stream(stream_time=10)
306/24: i=ch1.current_dirfile.getdata('K0000_I')
306/25: len(i)/488
306/26: print time.time();ch1.start_stream(stream_time=10)
306/27: t=ch1.current_dirfile.getdata('python_timestamp')
306/28: t[0]
306/29: print time.time(); ch1.start_stream(stream_time=10,dont_ask=True); print time.time()
306/30: t=ch1.current_dirfile.getdata('python_timestamp')
306/31: t[0]
306/32: t[-1]
307/1: name = ['phantom','clones','sith','hope','empire','jedi']
307/2: import pcp
307/3: from numpy import *; from matplotlib.pyplot import *; ion()
307/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
307/5: mc = pcp.mux_channel.muxChannelList(name)
307/6: mclist = [eval('mc.'+mcname) for mcname in name]
307/7: ch1=mcdict['phantom']
307/8: ch1=mclist[0]
307/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
307/10: ch1.start_stream(stream_time=10)
307/11: ch1.start_stream(stream_time=10,dont_ask=True)
307/12: t=ch1.current_dirfile.getdata('python_timestamp')
307/13: t[0]
307/14: t[1]
307/15: t[2]
307/16: t[-1]
307/17: len(t)
307/18: len(t)/488.
307/19: ch1.start_stream(stream_time=10,dont_ask=True)
307/20: t=ch1.current_dirfile.getdata('python_timestamp')
307/21: t[0]
307/22: t[-1]
307/23: len t
307/24: 1569404742.385465/488.-1569404735.655766/488.
307/25: 1569404742.385465/1569404735.655766
307/26: 1569404742.385465-1569404735.655766
307/27: 1569404742.385465*488-1569404735.655766*488
307/28: 1569404742.385465*488.5-1569404735.655766*488.5
308/1: import pcp
308/2: name = ['phantom','clones','sith','hope','empire','jedi']
309/1: import pcp
309/2: name = ['phantom','clones','sith','hope','empire','jedi']
309/3: mc = pcp.mux_channel.muxChannelList(name)
309/4: mclist = [eval('mc.'+mcname) for mcname in name]
309/5: ch1=mclist[0]
309/6: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
309/7: from numpy import *; from matplotlib.pyplot import *; ion()
309/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
309/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
309/10: ch1.start_stream(stream_time=10,dont_ask=True)
309/11: 1569405079.79-1569405110.12
309/12: t=ch1.current_dirfile.getdata('python_timestamp')
309/13: t[0]
309/14: t[-1]
309/15: len(t)
309/16: len(t)/488
309/17: ch1.current_dirfile.flush?
309/18: ch1.current_dirfile.sync?
309/19: r
310/1: import pcp
310/2: from numpy import *; from matplotlib.pyplot import *; ion()
310/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
310/4: mc = pcp.mux_channel.muxChannelList(name)
310/5: name = ['phantom','clones','sith','hope','empire','jedi']
310/6: mc = pcp.mux_channel.muxChannelList(name)
310/7: mclist = [eval('mc.'+mcname) for mcname in name]
310/8: ch1=mclist[0]
310/9: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
310/10: ch1.start_stream(stream_time=10,dont_ask=True)
310/11: 1569405360.7-1569405388.83.
310/12: 1569405360.7-1569405388.83
310/13: t=ch1.current_dirfile.getdata('python_timestamp')
310/14: t[0]
310/15: t[-1]
310/16: len t
310/17: 1569405374.016032-1569405360.701986
311/1: from numpy import *; from matplotlib.pyplot import *; ion()
311/2: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
311/3: from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);import pcp
311/4: mc = pcp.mux_channel.muxChannelList(name)
311/5: name = ['phantom','clones','sith','hope','empire','jedi']
311/6: from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);import pcp;name = ['phantom','clones','sith','hope','empire','jedi']
311/7: mc = pcp.mux_channel.muxChannelList(name)
311/8: mclist = [eval('mc.'+mcname) for mcname in name]
311/9: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]
311/10: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
311/11: ch1.start_stream(stream_time=10,dont_ask=True)
312/1: from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);import pcp;name = ['phantom','clones','sith','hope','empire','jedi']
312/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]
312/3: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
312/4: In[3]
312/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
312/6: ch1.start_stream(stream_time=10,dont_ask=True)
313/1: from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);import pcp;name = ['phantom','clones','sith','hope','empire','jedi']
313/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
313/3: ch1.start_stream(stream_time=10,dont_ask=True)
313/4: ch1.start_stream(stream_time=10,dont_ask=True)
314/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi']
314/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
314/3: ch1.start_stream(stream_time=10,dont_ask=True)
314/4: pcp.set_log_level?
314/5: pcp.set_log_level()
314/6: pcp.set_log_level(level=10)
314/7: pcp.set_log_level(level=1)
314/8: pcp.set_log_level(level=2)
314/9: pcp.set_log_level(level=30)
314/10: pcp.set_log_level(level=100)
314/11: pcp.set_log_level(level=10)
314/12: pcp.set_log_level??
314/13: import logging
314/14: logging?
314/15: logging.WARNING
314/16: logging.getLevelName
314/17: logging.getLevelName?
314/18: logging.getLevelName('INFO')
314/19: logging.getLevelName('WARNING')
314/20: logging.getLevelName('DEBUG')
314/21: logging.getLevelName('CRITICAL')
314/22: logging.getLevelName('ERROR')
314/23: pcp.set_log_level(10)
314/24: pcp.set_log_level(level=10)
314/25: pcp.set_log_level(level=10)
315/1: imoprt pcp
315/2: import logging
315/3: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi']; pcp.set_log_level(10)
315/4: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi']; pcp.set_log_level(level=10)
315/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
315/6: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
315/7: ch1.start_stream(stream_time=10,dont_ask=True)
315/8: ch1.start_stream(stream_time=10,dont_ask=True)
316/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
316/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
316/3: ch1.start_stream(stream_time=10,dont_ask=True)
316/4: t=ch1.current_dirfile.getdata('python_timestamp')
316/5: t[-1]-t[0]
316/6: 1569407114.01-1569407139.14
316/7: i=ch1.current_dirfile.getdata('K0000_I')
316/8: plot i
316/9: axvline(4880)
316/10: 2**19-1
316/11: 256e6/2**19
316/12: self=ch1.roach_iface
316/13:
write_to_fpga_register(self.fpga, { 'accum_len_reg': 2**(self.roach_config['roach_accum_len'])-1, \
            'dds_shift_reg': self.roach_config['dds_shift']  }, self.firmware_reg_list)
316/14:
self.write_to_fpga_register(self.fpga, { 'accum_len_reg': 2**(self.roach_config['roach_accum_len'])-1, \
            'dds_shift_reg': self.roach_config['dds_shift']  }, self.firmware_reg_list)
316/15: import pcp.lib.lib_fpga
316/16: pcp.lib.lib_fpga.write_to_fpga_register(self.fpga, { 'accum_len_reg': 2**(self.roach_config['roach_accum_len'])-1,             'dds_shift_reg': self.roach_config['dds_shift']  }, self.firmware_reg_list)
316/17: 256e6/2**19-1
316/18: 256e6/2**19
316/19: ch1.start_stream(stream_time=10,dont_ask=True)
316/20: t=ch1.current_dirfile.getdata('python_timestamp')
316/21: i=ch1.current_dirfile.getdata('K0000_I')
316/22: len i
316/23: len t
316/24: plot i
316/25: plot t
316/26: plot t
316/27: ch1.start_stream(stream_time=10,dont_ask=True)
317/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
317/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
317/3: ch1.start_stream(stream_time=10,dont_ask=True)
318/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
318/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
318/3: ch1.start_stream(stream_time=10,dont_ask=True)
318/4: pcp.set_log_level(level=10)
318/5: ch1.start_stream(stream_time=10,dont_ask=True)
319/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
319/2: ch1 = pcp.mux_channel.muxChannel(name[0])
319/3:
for ch in [ch1]:
   
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=12
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
319/4: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
319/5: ch1.start_stream(stream_time=10,dont_ask=True)
319/6: t=ch1.current_dirfile.getdata('python_timestamp')
319/7: plot t
319/8: print time.time(); ch1.start_stream(stream_time=10,dont_ask=True); print time.time()
319/9: t=ch1.current_dirfile.getdata('python_timestamp')
319/10: plot t
319/11: axvline(1569408397.92)
319/12: axvline(1569408408.59)
319/13: cla()
319/14: plot t
319/15: axhline(1569408397.92)
319/16: axhline(1569408408.59)
320/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
320/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
320/3: ch1.start_stream(stream_time=10,dont_ask=True)
321/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
321/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
321/3: ch1.start_stream(stream_time=10,dont_ask=True)
321/4: t=ch1.current_dirfile.getdata('python_timestamp')
321/5: plot t
321/6: axhline(1569409169.19)
321/7: axhline(1569409144.06)
322/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
322/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
322/3: ch1.start_stream(stream_time=10,dont_ask=True)
322/4: plot t
322/5: t=ch1.current_dirfile.getdata('python_timestamp')
322/6: plot t
322/7: axline 1569409288.17
322/8: axhline 1569409288.17
322/9: axhline 1569409260.03
322/10: import pcp.color_logs
323/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
323/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
323/3: ch1.start_stream(stream_time=10,dont_ask=True)
324/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
324/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
324/3: ch1.start_stream(stream_time=10,dont_ask=True)
324/4: import pcp.color_logs
324/5: import pcp.color_logs as cl
324/6: print cl.OKGREEN,'o'
325/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
325/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
325/3: ch1.start_stream(stream_time=10,dont_ask=True)
326/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
326/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
326/3: ch1.start_stream(stream_time=10,dont_ask=True)
326/4: ch1.start_stream(stream_time=10,dont_ask=True)
326/5: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1)+1j*ones(1),dds_iq_gain=(1+1j)*ones(1),dds_iq_phase=radians(0*ones(1)), dds_iq_offset = array([0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
326/6: #freqs,amps,phases = array([[528497566.040552-lo],[1],[0]])
326/7: freqs[0]
326/8: freqs,amps,phases = array([[528497566.040552-lo],[1],[0]])
326/9: lo=784e6
326/10: freqs,amps,phases = array([[528497566.040552-lo],[1],[0]])
326/11: freqs[0]
326/12: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1)+1j*ones(1),dds_iq_gain=(1+1j)*ones(1),dds_iq_phase=radians(0*ones(1)), dds_iq_offset = array([0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
326/13: ch1.start_stream(stream_time=10,dont_ask=True)
326/14: t=ch1.current_dirfile.getdata('python_timestamp')
326/15: plot t
326/16: axhline 1569410741.45
326/17: axhline 1569410731.34
326/18: axhline 1569410730.34
326/19: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
326/20: figure()
326/21: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
326/22: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
326/23: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
326/24: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
326/25: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
326/26: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
326/27: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
326/28: freqs,amps,phases=freqs[:250],amps[:250],phases[:250]
326/29: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(250),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(250)+1j*ones(250),dds_iq_gain=(1+1j)*ones(250),dds_iq_phase=radians(0*ones(250)), dds_iq_offset = array([0]+249*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
326/30: len freqs
326/31: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(250),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(250)+1j*ones(250),dds_iq_gain=(1+1j)*ones(250),dds_iq_phase=radians(0*ones(250)), dds_iq_offset = array([0]+249*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
326/32: ch1.start_stream(stream_time=10,dont_ask=True)
326/33: t=ch1.current_dirfile.getdata('python_timestamp')
326/34: plot t
326/35: axhline 1569411272.56
326/36: axhline 1569411260.44
326/37: cla()
326/38: plot t
326/39: axhline 1569411272.56
326/40: axhline 1569411260.44
326/41: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
326/42: cla()
326/43: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
326/44: len ch1.sweep.data[0]
326/45: ch1.sweep.data[0]
327/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
327/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
327/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
327/4: freqs,amps,phases=freqs[:250],amps[:250],phases[:250]
327/5: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(250),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(250)+1j*ones(250),dds_iq_gain=(1+1j)*ones(250),dds_iq_phase=radians(0*ones(250)), dds_iq_offset = array([0]+249*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
327/6: ch1.start_stream(stream_time=10,dont_ask=True)
327/7: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
327/8: i=ch1.current_dirfile.getdata('K0000_I')
327/9: plot i
327/10: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
327/11: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
327/12: ch1.start_stream(stream_time=10,dont_ask=True)
327/13: i=ch1.current_dirfile.getdata('K0000_I')
327/14: plot i
327/15: ch1.start_stream(stream_time=10,dont_ask=True)
327/16: i=ch1.current_dirfile.getdata('K0000_I')
327/17: plot i
327/18: i=ch1.current_dirfile.getdata('K0000_I')
327/19: plot i,'--'
328/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
328/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
328/3: ch1.start_stream(stream_time=10,dont_ask=True)
328/4: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
328/5: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
328/6: freqs,amps,phases=freqs[:250],amps[:250],phases[:250]
328/7: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
328/8: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(250),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(250)+1j*ones(250),dds_iq_gain=(1+1j)*ones(250),dds_iq_phase=radians(0*ones(250)), dds_iq_offset = array([0]+249*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
328/9: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
328/10: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)-0.05),'b')
328/11: gca.lines=gca.lines[-250:]
328/12: gca().lines=gca().lines[-250:]
328/13: draw()
328/14: gca().lines=gca().lines[-250:]cla()
328/15: cla()
328/16: freqs,amps,phases = array([[528497566.040552-lo],[1],[0]])
328/17: lo=784e6
328/18: freqs,amps,phases = array([[528497566.040552-lo],[1],[0]])
328/19: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1)+1j*ones(1),dds_iq_gain=(1+1j)*ones(1),dds_iq_phase=radians(0*ones(1)), dds_iq_offset = array([0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
328/20: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
328/21: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'g')
328/22: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
328/23: freqs,amps,phases=freqs[:250],amps[:250],phases[:250]
328/24: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(250),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(250)+1j*ones(250),dds_iq_gain=(1+1j)*ones(250),dds_iq_phase=radians(0*ones(250)), dds_iq_offset = array([0]+249*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
328/25: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
328/26: plot(ch1.sweep.rf_freqs[0],20*log10(abs(ch1.sweep.data[0])),'r')
328/27: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
328/28: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
328/29: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
328/30: plot(ch1.sweep.rf_freqs[0],20*log10(abs(ch1.sweep.data[0])),'b')
328/31: gca().lines=gca().lines[-250:]cla()
328/32: gca.lines.pop(-1)
328/33: gca().lines.pop(-1)
328/34: plot(ch1.sweep.rf_freqs[0],20*log10(abs(ch1.sweep.data[0]))-1,'b')
329/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
329/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
329/3: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
329/4: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100)
329/5: ch2 = mclist[2]
329/6: ch3 = mclist[2]
329/7: ch3.input_atten.att
329/8: ch3.input_atten.att=30
329/9: amax(amax(absolute([ch3.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
329/10: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
329/11: ch=ch3
329/12: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
329/13: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 10000,span=512e3)
329/14: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 10000,sweep_span=512e3)
329/15: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T))-1,'b')
329/16: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=512e3)
329/17: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T))-1,'b')
329/18: plot(ch1.sweep.rf_freqs.T,20*log10(abs(ch1.sweep.data.T)),'r')
329/19: ch1.sweep.rf_freqs[0]
329/20: ch1.sweep.data[0]
330/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
330/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch1 = mclist[0]; ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
330/3: ch = mclist[2]
330/4: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
330/5: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=512e3)
330/6: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'b')
331/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
331/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[3]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
331/3: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=512e3)
331/4: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'b')
331/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[2]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi'];
332/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[2]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/3: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=512e3)
332/4: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'b')
332/5: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1024e3)
332/6: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'r')
333/1: history -g -f ipythonhistory
332/7: freqs_file = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
332/8: freqs = load('/home/muscat/found_kids.npy')
332/9: freqs
332/10: len freqs
332/11: amps = ones_like(freqs)
332/12: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/13: freqs
332/14: len freqs
332/15: len amps
332/16: len phases
332/17: phases = random.uniform(0,2*pi,224)
332/18: ch1.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch1.toneslist._bandwidth=512e6;ch1.toneslist.load_tonelist(); ch1.toneslist.bandwidth = 512e6; ch1.toneslist.phases=phases; ch1.toneslist.amp=amps; ch1.toneslist.lo_freq = 784e6; ch1.toneslist._update_frequencies(); ch1.roach_iface.write_freqs_to_qdr(ch1.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch1.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch1.roach_iface.firmware_reg_list,sleep_time =0.)
332/19: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/20: phases = random.uniform(0,2*pi,223)
332/21: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/22: ch1.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=512e3)
332/23: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1024e3)
332/24: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'r')
332/25: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100,sweep_span=200e3)
332/26: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'g')
332/27: ch.input_atten.att
332/28: ch.input_atten.att=30
332/29: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
332/30: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=300e3)
332/31: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'b')
332/32: ch.output_atten.att
332/33: ch.output_atten.att=0
332/34: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
332/35: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=300e3)
332/36: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'g')
332/37: clf()
332/38: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'g')
332/39: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100,sweep_span=600e3)
332/40: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'r')
332/41: kids = array([ch.sweep.rf_freqs[nanargmax(abs(gradient(ch.sweep.data[j]))),j] for j in range(len(ch.sweep.rf_freqs))])
332/42:
(abs(gradient(ch.sweep.data[j])
    ...: ))
332/43: figure()
332/44: plot(abs(gradient(ch.sweep.data[j])))
332/45: plot(ch.sweep.rf_freqs,abs(gradient(ch.sweep.data[j])))
332/46: clf()
332/47: plot(ch.sweep.rf_freqs[j],abs(gradient(ch.sweep.data[j])))
332/48: axvline  ()
332/49: axvline(ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))])
332/50: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(freqs)] )
332/51: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
332/52: kids
332/53: change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
332/54: import change_toneslist_freqs
332/55: change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
332/56: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/57: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=100e3)
334/1: a,b,c,d,e,f,g = genfromtxt('./Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
334/2: from numpy import *; from matplotlib.pyplot import *; ion()
334/3: a,b,c,d,e,f,g = genfromtxt('./Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
334/4: a,b,c,d,e,f,g = genfromtxt('./Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',unpack=True,skip_header=1)
334/5: a=['K%04d'%k for k in range(len(a))]
334/6: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/7: file.close()
332/58: lo=830
332/59: lo=830e6
332/60: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/61: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
334/8: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/9: file.write('name\tfreqs\tamps\tphases\ticor\tqcor\tphase_delay\n')
334/10:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%f'*7)*(aa,bb,cc,dd,ee,ff,gg))
334/11:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%f\t%f\t%f\t%f\t%f\t%f\t%f\n')*(aa,bb,cc,dd,ee,ff,gg))
334/12:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%f\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,cc,dd,ee,ff,gg))
334/13:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%s\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,cc,dd,ee,ff,gg))
334/14: file.close()
332/62: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
334/15: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/16: file.write('name\tfrequency\tamps\tphases\ticor\tqcor\tphase_delay\n')
334/17:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%s\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,cc,dd,ee,ff,gg))
334/18: file.close()
332/63: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
334/19: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/20: file.write('name\tFrequency\tamps\tphases\ticor\tqcor\tphase_delay\n')
334/21:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%s\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,cc,dd,ee,ff,gg))
334/22: file.close()
332/64: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
334/23: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/24: file.write('name\tFrequency\tamps\tphases\ticor\tqcor\tphase_delay\n')
334/25:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%s\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,cc,dd,ee,ff,gg))
334/26: file.close()
332/65: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
334/27: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/28: file.write('name\tfreq\tamps\tphases\ticor\tqcor\tphase_delay\n')
334/29:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%s\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,cc,dd,ee,ff,gg))
334/30: file.close()
332/66: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 830e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/67: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 810e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/68: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 800e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/69: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=100e3)
332/70: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'g')
332/71: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/72: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
332/73: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'b')
332/74: ch.input_atten.att
332/75: amps
332/76: phases
332/77: change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
332/78: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/79: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
332/80: clf()
332/81: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'b')
332/82: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
332/83: save('found.npy',kids)
334/31: file = open('Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt','w')
334/32: bb
334/33: b=load('/home/muscat/multitone110910/multitone/found.npy')
334/34: file.write('name\tfreq\tamps\tphases\ticor\tqcor\tphase_delay\n')
334/35:
for aa,bb,cc,dd,ee,ff,gg in zip(a,b,c,d,e,f,g):
    file.write(('%s\t%f\t%f\t%f\t%f\t%f\t%f\n')%(aa,bb,1,0,1,1,0))
334/36: file.close()
332/84: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
332/85: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
332/86: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'r')
332/87: clf()
332/88: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
332/89: genfromtxt('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
332/90: genfromtxt('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',names=1)
332/91: genfromtxt('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',names=0)
332/92: genfromtxt?
332/93: genfromtxt('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',names=True)
332/94: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'r')
332/95: import change_toneslist_freqs
332/96: change_toneslist_freqs.change_freqs??
335/1: import change_toneslist_freqs
335/2: change_toneslist_freqs.change_freqs??
336/1: import change_toneslist_freqs
336/2: change_toneslist_freqs.change_freqs??
337/1: import change_toneslist_freqs
337/2: change_toneslist_freqs.change_freqs??
337/3: from numpy import *; from matplotlib.pyplot import *; ion()
337/4: kids = load('found.npy')
337/5: change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
337/6: import pcp; from numpy import *; from matplotlib.pyplot import *; ion();freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True);name = ['phantom','clones','sith','hope','empire','jedi']
337/7: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[2]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
337/8: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
337/9: freqs,amps,phases=kids-lo,ones(len(kids)),uniform(0,2*pi,len(kids))
337/10: lo=784e6
337/11: freqs,amps,phases=kids-lo,ones(len(kids)),uniform(0,2*pi,len(kids))
337/12: from numpy import *; from matplotlib.pyplot import *; ion()
337/13: freqs,amps,phases=kids-lo,ones(len(kids)),uniform(0,2*pi,len(kids))
337/14: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
337/15: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
337/16: ch.input_atten.att=30
337/17: ch.output_atten.att=0
337/18: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/19: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
337/20: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'r')
337/21: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/22: ch.synth_lo.setFrequency(lo-500000)
337/23: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/24: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/25: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/26: ch.synth_lo.setFrequency(lo)
337/27: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/28: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
337/29: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
337/30: save('found.npy',kids)
337/31: change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
337/32: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
337/33: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
337/34: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
337/35: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
337/36: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
337/37: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
337/38: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
337/39: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
337/40: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=200e3)
337/41: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'y')
337/42: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=400e3)
337/43: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
337/44: cla()
337/45: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
337/46: ch.synth_lo.frequency
337/47: ch.synth_clk.frequency
337/48: ch.synth_lo.frequency
337/49: ch.input_atten.att
337/50: ch.output_atten.att
337/51: ch.start_stream()
337/52: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=400e3)
337/53: ch.start_stream()
337/54: ch.current_sweep_dirfile
337/55: ch.current_dirfile
337/56: ch.current_dirfile.name
337/57: ch.start_stream()
337/58: ch.stop_stream()
337/59: ch.current_dirfile.name
337/60: ch.sweep.dirfile.name
337/61: reload(pcp)
337/62: pcp.scripts._plot_noise?
337/63: pcp.scripts._plot_noise.get_PSD?
337/64: #pcp.scripts._plot_noise.get_PSD(['K000'], )
337/65: ch.current_dirfile
337/66: ch.current_dirfile.name
337/67: pcp.scripts._plot_noise.get_PSD(['K000'], ch.current_dirfile.name)
337/68: ch.current_sweep_dirfile = ch.sweep.dirfile.name
337/69: ch.start_stream()
337/70: ch.stop_stream()
337/71: pcp.scripts._plot_noise.get_PSD(['K000'], ch.current_dirfile.name)
337/72: ch.current_dirfile.name
337/73: pcp.scripts._plot_noise.get_PSD(['K000'], ch.current_dirfile.name)
338/1: ch3 = pcp.mux_channel.muxChannel(name[2])
338/2: import pcp
338/3: ch=ch3
338/4: ch = pcp.mux_channel.muxChannel(name[2])
338/5: name = ['phantom','clones','sith','hope','empire','jedi']
338/6: ch = pcp.mux_channel.muxChannel(name[2])
338/7: ch.initialise_hardware()
338/8: ch.input_atten.att=30
338/9: ch.output_atten.att=0
338/10: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=400e3)
338/11: from numpy import *; from matplotlib.pyplot import *; ion()
338/12: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
338/13: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
338/14: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
338/15: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
338/16: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
338/17: ch.toneslist.lo_freq = 784e6
338/18: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=400e3)
338/19: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
338/20: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
338/21: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
338/22: kids = load('found.npy')
338/23: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
338/24: lo=784e6
338/25: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
338/26: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
338/27: import change_toneslist_freqs
338/28: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
338/29: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
338/30: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
338/31: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
338/32: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
338/33: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
338/34: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
338/35: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
338/36: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
338/37: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
338/38: ch.start_stream()
338/39: ch.current_sweep_dirfile = ch.sweep.dirfile.name
338/40: ch.start_stream()
338/41: ch.current.d
338/42: ch.stop_stream()
338/43: ch.current_dirfile
338/44: ch.current_dirfile.name
338/45: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/46: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/47: reload(pcp)
338/48: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/49: reload(pcp)
338/50: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/51: reload(pcp)
338/52: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/53: reload(pcp)
338/54: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/55: reload(pcp)
338/56: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/57: reload(pcp)
338/58: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/59: reload(pcp)
338/60: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch.current_dirfile.name)
338/61: import pygetdata as _gd
338/62: sweep_dirfile = _gd.dirfile(ch.current_dirfile.name, _gd.RDONLY)
338/63: sweep_dirfile.field_list()
338/64: sweep_dirfile = _gd.dirfile('/data1/muscat/sith/20190906_183533/', _gd.RDONLY)
338/65: sweep_dirfile.field_list()
338/66: ch.sweep.dirfile.name
338/67: ch.current_dirfile
338/68: ch.current_dirfile.name
338/69: reload(pcp)
338/70: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch)
338/71: ch.sweep.dirfile.name
338/72: reload(pcp)
338/73: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch)
339/1: import pcp
339/2: kids = load('found.npy')
339/3: from numpy import *; from matplotlib.pyplot import *; ion()
339/4: kids = load('found.npy')
339/5: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
339/6: lo=784e6
339/7: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
339/8: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/9: ch = pcp.mux_channel.muxChannel(name[2])
339/10: name = ['phantom','clones','sith','hope','empire','jedi']
339/11: ch = pcp.mux_channel.muxChannel(name[2])
339/12: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/13: import change_toneslist_freqs
339/14: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
339/15: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/16: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
339/17: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
339/18: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
339/19: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/20: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
339/21: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
339/22: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
339/23: ch.start_stream()
339/24: ch.stop_stream()
339/25: ch.sweep.dirfile.name
339/26: ch.current_dirfile
339/27: ch.current_dirfile.name
339/28: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch)
339/29: ch.sweep.data
339/30: ch.sweep.keys()
339/31: ch.sweep.get_data?
339/32: ch.sweep.data.size
339/33: ch.sweep.rf_freqs
339/34: ch.sweep.rf_freqs[0]
339/35: len(ch.sweep.rf_freqs)
339/36: np.arange(0, 5,0.5)
339/37: atten_steps = np.arange(20,30,1)
339/38: atten_steps
339/39:
#for atten in atten_steps:
#    ch.input_atten.att = atten
#    ch.sweep_lo
339/40:
#for atten in atten_steps:
#    ch.input_atten.att = atten
#    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3) 
#    plot.
339/41:
for atten in atten_steps:
    ch.input_atten.att = atten
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3) 
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)))
339/42: ch.input_atten.att
339/43: ch.input_atten.att = 30
339/44: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
339/45: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
339/46: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/47: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
339/48: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
339/49: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
339/50: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
339/51: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/52: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
339/53: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=400e3)
339/54: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
339/55: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
339/56: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
339/57: ch.input_atten.att
339/58: lo
339/59: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/60: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
339/61: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'c')
339/62: ch.input_atten.att = 15
339/63: ch.input_atten.att = 30
339/64: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
339/65: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
339/66: ch.input_atten.att = 15
339/67: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
339/68: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
339/69: ch.input_atten.att = 5
339/70: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
339/71: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
339/72: ch.input_atten.att = 3
339/73: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
339/74: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
339/75: atten_steps = np.arange(5,20,1)
339/76: atten_steps = np.arange(5,10,1)
339/77: atten_steps = np.arange(5,10,0.5)
339/78: ch.input_atten.att = 10
339/79: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
339/80: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
339/81: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_freqs.change_freqs('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',kids,'/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt')
339/82: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
339/83: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
339/84: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'c')
339/85: atten_steps = np.arange(5,10,0.5)
339/86:
for atten in atten_steps:
    ch.input_atten.att = atten
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3) 
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)))
    for i in range(4):    
        ch.start_stream() 
        time.sleep(10)
        ch.stop_stream()
339/87: y
339/88: ch.input_atten.att = 30
339/89: ch.roachid
340/1: import pcp
340/2: ch = pcp.mux_channel.muxChannel(name[2])
340/3: name = ['phantom','clones','sith','hope','empire','jedi']
340/4: ch = pcp.mux_channel.muxChannel(name[2])
340/5: ch.input_atten.att = 30
340/6: ch.output_atten.att=0
340/7: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
340/8: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'c')
340/9: from numpy import *; from matplotlib.pyplot import *; ion()
340/10: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'c')
340/11: ch.synth_lo.SynthHDDevice.getHelp()
340/12: pcp.scripts.set_muscat_init_synth(ch)
340/13: ch.synth_lo.SynthHDDevice.getHelp()
340/14: ch.synth_lo.frequency = 784e6
340/15: lo
340/16: lo=784e6
340/17: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
340/18: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'c')
340/19: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'c')
340/20:
for ch in [ch1]:
   
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
340/21:
for ch in [ch]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
340/22:
for ch in [ch]:  
    #pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
341/1: import pcp
341/2: name = ['phantom','clones','sith','hope','empire','jedi']
341/3: ch3 = pcp.mux_channel.muxChannel(name[2])
341/4:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
341/5: lo=784e6
341/6: kids = load('found.npy')
341/7: from numpy import *; from matplotlib.pyplot import *; ion()
341/8: kids = load('found.npy')
341/9: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
341/10: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
341/11: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
341/12: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
341/13: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
341/14: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'c')
341/15: ch.input_atten.att
341/16: ch.output_atten.att
341/17: ch.synth_lo
341/18: ch.synth_clk.frequency
341/19: ch.synth_lo.frequency
341/20: ch3.input_atten.att
341/21: ch3.output_atten.att
341/22: ch3.synth_clk#
341/23: ch3.synth_clk.SynthHDDevice.getHelp()
341/24: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 5000,sweep_span=5000e3)
341/25: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'r')
341/26: pcp.scripts.get_on_off_noise?
341/27: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch3])
341/28: reload(pcp)
341/29: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch3])
341/30: a = "w"
341/31: b = "s"
341/32: print "%s f d%s"%(a,b)
342/1: import pcp
342/2: name = ['phantom','clones','sith','hope','empire','jedi']
342/3: ch3 = pcp.mux_channel.muxChannel(name[2])
342/4: ch3.initialise_hardware()
342/5:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
342/6: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
342/7: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
342/8: kids = load('found.npy')
342/9: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
342/10: from numpy import *; from matplotlib.pyplot import *; ion()
342/11: kids = load('found.npy')
342/12: from numpy import *; from matplotlib.pyplot import *; ion()
342/13: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
342/14: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
342/15: pcp.scripts.get_on_off_noise([ch3])
342/16: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 5000,sweep_span=5000e3)
342/17: pcp.scripts.get_on_off_noise([ch3])
342/18: ch3.stop_stream()
342/19: t0 = time.time()
342/20: t0
342/21: reload(pcp)
342/22: pcp.scripts.get_on_off_noise([ch3])
343/1: import pcp
343/2: from numpy import *; from matplotlib.pyplot import *; ion()
343/3:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
343/4: name = ['phantom','clones','sith','hope','empire','jedi']
343/5: ch3 = pcp.mux_channel.muxChannel(name[2])
343/6:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
343/7: kids = load('found.npy')
343/8: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
343/9: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
343/10: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
343/11: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
343/12: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'r')
343/13: pcp.scripts.get_on_off_noise([ch3])
344/1: import pcp
344/2: name = ['phantom','clones','sith','hope','empire','jedi']
344/3: from numpy import *; from matplotlib.pyplot import *; ion()
344/4: ch3 = pcp.mux_channel.muxChannel(name[2])
344/5:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
344/6: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
344/7: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))
344/8: kids = load('found.npy')
344/9: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))#
344/10: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
344/11: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
344/12: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch3])
345/1: import pcp
345/2: from numpy import *; from matplotlib.pyplot import *; ion()
345/3: ch3 = pcp.mux_channel.muxChannel(name[2])
345/4: name
345/5: ch3 = pcp.mux_channel.muxChannel(name[2])
345/6: name = ['phantom','clones','sith','hope','empire','jedi']
345/7: ch3 = pcp.mux_channel.muxChannel(name[2])
345/8:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
345/9: kids = load('found.npy')
345/10: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))#
345/11: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
345/12: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
345/13: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch3])
345/14: ch3.synth_lo.frequency
345/15: lo=784e6
345/16: ch3=lo
346/1: import pcp
346/2: from numpy import *; from matplotlib.pyplot import *; ion()
346/3: name = ['phantom','clones','sith','hope','empire','jedi']
346/4: ch3 = pcp.mux_channel.muxChannel(name[2])
346/5:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
346/6: lo=784e6
346/7: kids = load('found.npy')
346/8: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))#
346/9: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)
346/10: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
346/11: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch3])
346/12: sweep_dir
346/13: on_stream_dir
346/14: off_stream_dir
347/1: import pcp
347/2: from numpy import *; from matplotlib.pyplot import *; ion()
347/3: ch3 = pcp.mux_channel.muxChannel(name[2])
347/4: name = ['phantom','clones','sith','hope','empire','jedi']
347/5: ch3 = pcp.mux_channel.muxChannel(name[2])
347/6:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
347/7: kids = load('found.npy')
347/8: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))#
347/9: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)#
347/10: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
348/1: import pcp
348/2: from numpy import *; from matplotlib.pyplot import *; ion()
348/3: ch3 = pcp.mux_channel.muxChannel(name[2])
348/4: name = ['phantom','clones','sith','hope','empire','jedi']
348/5: ch3 = pcp.mux_channel.muxChannel(name[2])
348/6:
for ch in [ch3]:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
348/7: ch3.synth_lo.frequency
348/8: ch3.synth_lo.SynthHDDevice.getHelp()
348/9: lo=784e6
348/10: kids = load('found.npy')
348/11: freqs,amps,phases=kids-lo,ones(len(kids)),random.uniform(0,2*pi,len(kids))#
348/12: ch3.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch3.toneslist._bandwidth=512e6;ch3.toneslist.load_tonelist(); ch3.toneslist.bandwidth = 512e6; ch3.toneslist.phases=phases; ch3.toneslist.amp=amps; ch3.toneslist.lo_freq = 784e6; ch3.toneslist._update_frequencies(); ch3.roach_iface.write_freqs_to_qdr(ch3.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch3.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch3.roach_iface.firmware_reg_list,sleep_time =0.)#
348/13: ch3.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=1000e3)
348/14: plot(ch3.sweep.rf_freqs.T,20*log10(abs(ch3.sweep.data.T)),'r')
348/15: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch3])
348/16: sweep_dir
348/17: on_stream_dir
348/18: off_stream_dir
348/19: KID = pcp.scripts._psd_plot_functions.get_KID_data(['K000'], ch3)
348/20: KID
348/21: KID = pcp.scripts._psd_plot_functions.plots_s21(KID)
348/22: KID = pcp.scripts._psd_plot_functions.plots_streams(KID)
348/23: KID.keys()
348/24: KID = pcp.scripts._psd_plot_functions.get_KID_data(['K000'], ch3)
348/25: KID = pcp.scripts._psd_plot_functions.plots_streams(KID)
348/26: KID['K000']['didf']
348/27: KID['K000']
348/28: KID = pcp.scripts._psd_plot_functions.get_KID_data(['K000'], ch3)
348/29: KID['K000']
348/30: KID['K000']['didf']
348/31: plt.plot(KID['K000']['didf'])
348/32: plot(KID['K000']['didf'])
348/33: figure()
348/34: plot(KID['K000']['didf'])
348/35: ON,OFF=pcp.scripts._psd_plot_functions.on_off_res(['K000'], sweep_dir['sith'], on_stream_dir['sith'][0], off_stream_dir['sith'][0], plot_result=True)
348/36: ON,OFF=pcp.scripts._psd_plot_functions.on_off_res(['K000'], sweep_dir['sith'], on_stream_dir['sith'][0], off_stream_dir['sith'][0])
348/37: sweep_dir
348/38: on_stream_dir
348/39: off_stream_dir
349/1: import pcp
349/2: off_stream_dir
349/3: sweep_dir = {'sith': '/data1/muscat/sith/20190926_163343_sweep'}
349/4:
on_stream_dir = {'sith': ['/data1/muscat/sith/20190926_163412',
  '/data1/muscat/sith/20190926_163444']}
349/5:
off_stream_dir = {'sith': ['/data1/muscat/sith/20190926_163427',
  '/data1/muscat/sith/20190926_163458']}
349/6: ON,OFF=pcp.scripts._psd_plot_functions.on_off_res(['K000'], sweep_dir['sith'], on_stream_dir['sith'][0], off_stream_dir['sith'][0], plot_result=True)
349/7: name = ['phantom','clones','sith','hope','empire','jedi']
349/8: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
349/9: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
349/10: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/1: imoprt pcp
350/2: import pcp
350/3: name = ['phantom','clones','sith','hope','empire','jedi']
350/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/5: freqs_file = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
350/6: from numpy import *; from matplotlib.pyplot import *; ion()
350/7: freqs_file = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-found.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
350/8: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
350/9: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/10: ch.start_stream(stream_time=10)
350/11: 512e6/2**21
350/12: import calculate_funcs
350/13: from pcp.scripts import calculate_funcs
350/14: ts = cal.get_stream_data(ch.current_dirfile)
350/15: ts = calculate_funcs.get_stream_data(ch.current_dirfile)
350/16: calculate_funcs
350/17: from pcp.scripts imoprt calculate_funcs
350/18: from pcp.scripts import calculate_funcs
350/19: calculate_funcs
350/20: import pcp.scripts.calculate_funcs as cf
350/21: ts = cf.get_stream_data(ch.current_dirfile)
350/22: calculate_funcs?
350/23: calculate_funcs()
350/24: from pcp.scripts.calculate_funcs import get_stream_data
350/25: ts = get_stream_data(ch.current_dirfile)
350/26: ts = get_stream_data(ch.current_dirfile.name)
350/27: figure()
350/28: plot ts[0]
350/29: ts[1]
350/30: ts,td = get_stream_data(ch.current_dirfile.name)
350/31: plot ts,td['K0000_I']+1j*td['K0000_Q'])
350/32: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/33: cla()
350/34: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/35: ch.input_atten.att
350/36: ch.output_atten.att
350/37: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/38: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/39: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/40: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/41: ch.toneslist.tonelistfile = '/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0*ones(len(freqs))), dds_iq_offset = array(len(freqs)*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/42: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
350/43: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/44: ch.start_stream(stream_time=9)
350/45: ts,td = get_stream_data(ch.current_dirfile.name)
350/46: cla()
350/47: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/48: ts,td = get_stream_data(ch.current_dirfile.name)
350/49: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/50: ts,td = get_stream_data(ch.current_dirfile.name)
350/51: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/52: ch.input_atten.att
350/53: ch.output_atten.att
350/54: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/55: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/56: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/57: ch.synth_lo.SynthHDDevice.getHelp()
350/58: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/59: ch.synth_lo.SynthHDDevice.getHelp()
350/60:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
350/61: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
350/62: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/63: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/64: ch.input_atten.att
350/65: ch.output_atten.att
350/66: ch.start_stream(stream_time=10)
350/67: ts,td = get_stream_data(ch.current_dirfile.name)
350/68: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/69: ts,td = get_stream_data(ch.current_dirfile.name)
350/70: plot ts,abs(td['K0000_I']+1j*td['K0000_Q'])
350/71: plot ts,abs(td['K0333_I']+1j*td['K0333_Q'])
350/72: plot ts,abs(td['K0333_I']+1j*td['K0333_Q'])
350/73: cla()
350/74: plot abs(td['K0333_I']+1j*td['K0333_Q'])
350/75: ch.start_stream(stream_time=5)
350/76: cla()
350/77: ts,td = get_stream_data(ch.current_dirfile.name)
350/78: plot ts,abs(td['K0333_I']+1j*td['K0333_Q'])
350/79:
for k in range(1000):
    sublpot(211)
    plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04k_Q'%k])]))
    subplot(212)
350/80:
sublpot(211)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04k_Q'%k])) for k in range(1000)],'o')
subplot(212)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04k_Q'%k])) for k in range(1000)],'o')
350/81:
subplot(211)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04k_Q'%k])) for k in range(1000)],'o')
subplot(212)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04k_Q'%k])) for k in range(1000)],'o')
350/82:
subplot(211)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(212)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
350/83:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
350/84: ch.input_atten.att
350/85: ch.input_atten.att=25
350/86: ch.start_stream(stream_time=5)
350/87: ts,td = get_stream_data(ch.current_dirfile.name)
350/88:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
350/89: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/90: ch.output_atten.att
350/91: ch.input_atten.att=20
350/92: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/93: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
350/94:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
350/95: ch.input_atten.att=15
350/96: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
350/97: ch.input_atten.att=10
350/98: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
350/99: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
350/100:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
350/101: pcp.scripts.get_on_off_noise?
350/102: pcp.scripts._psd_plot_functions.get_PSD(['K000'], ch)
350/103: pcp.scripts._psd_plot_functions.get_KID_data(['K001'], ch)
350/104: pcp.scripts._psd_plot_functions.get_KID_data(['K001'], ch)
350/105: ch
350/106: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
350/107: pcp.scripts._psd_plot_functions.get_KID_data(['K001'], ch)
350/108: pcp.scripts._psd_plot_functions.get_KID_data(['K0001'], ch)
350/109: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001'], ch)
350/110: KIDs.keys()
350/111: KIDs['K0001'].keys()
350/112: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
350/113: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
350/114: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0250','K0999'], ch)
350/115: ch.sweep.dirfile.name
350/116: ch.current_dirfile.name
350/117: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0250','K0999'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
350/118: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
350/119: pcp.scripts.get_on_off_noise?
350/120: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch2])
350/121: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch])
350/122: ch.synth_clk.SynthHDDevice.getHelp()
350/123: pcp.scripts.get_on_off_noise??
350/124: pcp.scripts._get_on_off_noise._shift_lo??
350/125: ch3
350/126: mclist
350/127: ch2=mclist[1]
350/128: ch2.synth_lo.SynthHDDevice.getHelp()
350/129: mclist[2]synth_lo.SynthHDDevice.getHelp()
350/130: mclist[2].synth_lo.SynthHDDevice.getHelp()
350/131: mclist[3].synth_lo.SynthHDDevice.getHelp()
350/132: pcp.scripts._get_on_off_noise._shift_lo??
351/1: import pcp
351/2: name = ['phantom','clones','sith','hope','empire','jedi']
351/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
351/4: from numpy import *; from matplotlib.pyplot import *; ion()
351/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
351/6: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/1: import pcp
353/2: from numpy import *; from matplotlib.pyplot import *; ion()
353/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
353/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/5: name = ['phantom','clones','sith','hope','empire','jedi']
353/6: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]; ch = mclist[0]; ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/7: ch.synth_clk.SynthHDDevice.getHelp()
353/8:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
353/9: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/10: ch=mclist[0]
353/11: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/12: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/13: from pcp.scripts.calculate_funcs import get_stream_data
353/14: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/15:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/16: ch.output_atten.att
353/17: ch.output_atten.att=10#
353/18: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/19:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/20: ch.output_atten.att=20#
353/21: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/22:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/23: ch.output_atten.att=30#
353/24: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/25:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/26: figure()
353/27: plot ts,abs(td['K0333_I']+1j*td['K0333_Q'])
353/28: plot ts,abs(td['K0033_I']+1j*td['K0033_Q'])
353/29: plot ts,abs(td['K0033_I']+1j*td['K0033_Q'])
353/30: plot ts,abs(td['K0030_I']+1j*td['K0030_Q'])
353/31: plot ts,abs(td['K0030_I']+1j*td['K0030_Q'])
353/32: plot ts,abs(td['K0032_I']+1j*td['K0032_Q'])
353/33: ch.output_atten.att=60#
353/34:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/35: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/36:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/37:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/38: ch.output_atten.att=0
353/39: ch.input_atten.att=20
353/40: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/41:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/42: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
353/43: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
353/44: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(radians(5)*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/45: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/46:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/47: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(radians(10)*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/48:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/49: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(radians(20)*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/50:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/51: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/52:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/53: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(radians(10)*ones(1000)), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/54: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(10)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/55: ch.start_stream(stream_time=3,dont_ask=1); ts,td = get_stream_data(ch.current_dirfile.name)
353/56:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/57:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
353/58: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=None,dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(5)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/59: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
353/60: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=0*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
353/61: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
353/62: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
353/63: ch.synth_clk.SynthHDDevice.getHelp()
353/64: ch._initialise_synth_lo()
353/65: ch._initialise_synth_lo()
353/66: ch._initialise_synth_lo()
353/67: ch._initialise_synth_lo()
353/68: ch._initialise_synth_lo()
353/69: ch._initialise_synth_lo()
353/70: ch._initialise_synth_lo()
353/71: ch._initialise_synth_lo()
353/72: ch._initialise_synth_lo()
353/73: ch._initialise_synth_lo()
353/74: ch._initialise_synth_lo()
353/75: ch._initialise_synth_lo()
354/1: import pcp
354/2: from numpy import *; from matplotlib.pyplot import *; ion()
354/3: name = ['phantom','clones','sith','hope','empire','jedi']
354/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
354/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
354/6: import pcp
355/1: import pcp
355/2: name = ['phantom','clones','sith','hope','empire','jedi']
355/3: from numpy import *; from matplotlib.pyplot import *; ion()
355/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
355/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
355/6:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
355/7: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=0*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
355/8: #ch.start_stream(stream_time=3,dont_ask=1); time.sleep(5); ts,td = get_stream_data(ch.current_dirfile.name)
355/9: import time
355/10: ch.start_stream(stream_time=3,dont_ask=1); time.sleep(5); ts,td = get_stream_data(ch.current_dirfile.name)
355/11: ch.start_stream(stream_time=2.5,dont_ask=1); time.sleep(4); ts,td = get_stream_data(ch.current_dirfile.name)
355/12: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(4); ts,td = get_stream_data(ch.current_dirfile.name)
355/13: from pcp.scripts.calculate_funcs import get_stream_data
355/14: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(4); ts,td = get_stream_data(ch.current_dirfile.name)
355/15: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
355/16:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
355/17: ch.synth_clk.SynthHDDevice.getHelp()
356/1: import pcp
356/2: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
356/3: name = ['phantom','clones','sith','hope','empire','jedi']
356/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
356/5: ch=mclist[0]
356/6: ch.synth_lo.SynthHDDevice.getHelp()
356/7: pcp.scripts.set_muscat_init_synth(ch)
356/8: ch.synth_lo.SynthHDDevice.getHelp()
356/9:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
356/10: ch.synth_lo.SynthHDDevice.getHelp()
356/11: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
356/12: import time
356/13: from pcp.scripts.calculate_funcs import get_stream_data
356/14: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
356/15: from numpy import *; from matplotlib.pyplot import *; ion()
356/16: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
356/17: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=0*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
356/18: ch.synth_lo.SynthHDDevice.getHelp()
356/19: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
356/20:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
356/21: ch.synth_lo.SynthHDDevice.getHelp()
356/22: ls /dev
357/1: import pcp
357/2: name = ['phantom','clones','sith','hope','empire','jedi']
357/3: import pcp; from numpy import *; from matplotlib.pyplot import *; ion(); import time
357/4: name = ['phantom','clones','sith','hope','empire','jedi']
357/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
357/6: from pcp.scripts.calculate_funcs import get_stream_data
357/7: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
357/8:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
357/9:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
358/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion(); import time
358/2: name = ['phantom','clones','sith','hope','empire','jedi']
358/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
358/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
358/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    #ch.roach_iface.initialise_fpga(force_reupload=0)
    ch.input_atten.att=30
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
358/6:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
358/7: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=0*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
358/8: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
358/9: from pcp.scripts.calculate_funcs import get_stream_data
358/10: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
358/11:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
358/12: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(5)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
358/13: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
358/14:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
358/15: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(10)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
358/16:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
358/17: ch.synth_lo.SynthHDDevice.getHelp()
359/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion(); import time
360/1: import pcp; from numpy import *; from matplotlib.pyplot import *; ion(); import time
360/2: name = ['phantom','clones','sith','hope','empire','jedi']
360/3: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
360/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
360/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
360/6: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=0*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/7: from pcp.scripts.calculate_funcs import get_stream_data
360/8: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/9:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/10: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(10)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/11: radians(10)*ones(1000)
360/12: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/13:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/14: phases
360/15: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(20)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/16: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/17:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/18: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(30)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/19: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/20:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/21: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/22: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/23:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/24: fft_shift = 2**8; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/25: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/26:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/27: fft_shift = 2**7; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/28: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/29:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/30: fft_shift = 2**6; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/31: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/32:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/33: fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/34: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/35:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/36: fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/37:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/38: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/39:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/40: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,1.1*ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/41: clf()
360/42:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/43: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/44:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/45: fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/46: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/47:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/48: 20*log10(1.1/10.)
360/49: 20*log10(1.1)
360/50: file = open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_1000_256MHz.toneslist','r')
360/51: lines = file.readlines()
360/52: file.close()
360/53: file=open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist','w')
360/54:
for l in lines[::2]:
    file.write(l)
360/55: file.close()
360/56: file=open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist','r')
360/57: lines = file.readlines()
360/58: flie.close()
360/59: file.close()
360/60: file=open('/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist','w')
360/61:
for l in lines[::2]:
    file.write(l)
360/62: file.close()
360/63: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
360/64: figure()
360/65: plot freqs,amps,'x'
360/66: plot -1*freqs,amps,'x'
360/67: plot( -1*freqs,amps,'x')
360/68: plot( abs(-1*freqs),amps,'x')
360/69: cla()
360/70: plot freqs-lo,amps,'x'
360/71: plot( -1*(freqs-lo),amps,'x')
360/72: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,1.1*ones(1000),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(1000),dac_iq_gain=ones(1000)+1j*ones(1000),dds_iq_gain=(1+1j)*ones(1000),dds_iq_phase=radians(0)*ones(1000), dds_iq_offset = array([0]+999*[0]),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/73: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,1.1*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/74: len freqs
360/75: freqs[0]
360/76: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
360/77: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,1.1*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/78: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/79:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(1000)]),'o')
360/80:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/81:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/82: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,1.1*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/83: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/84:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/85: fft_shift = 2**6; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/86: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(8); ts,td = get_stream_data(ch.current_dirfile.name)
360/87:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/88: fft_shift = 2**8; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/89: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/90:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/91: fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/92: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/93:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/94: fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/95: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/96:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/97: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/98: ch.input_atten.att=10
360/99: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/100: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/101: ch.input_atten.att=5
360/102: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/103: ch.input_atten.att=10
360/104: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/105:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/106: ch.input_atten.att=5
360/107: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/108: ch.output_atten.att
360/109:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/110: ch.input_atten.att=0
360/111: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/112: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/113:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/114: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/115: fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/116: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/117:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/118: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,1.1*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/119: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/120:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/121: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/122: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.25*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/123: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.5*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/124: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.45*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/125: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/126: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/127:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/128:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/129: ch.input_atten.att=1
360/130: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/131: ch.input_atten.att=1.5
360/132: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/133: ch.input_atten.att=2
360/134: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/135: ch.input_atten.att=3
360/136: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/137: ch.input_atten.att=4
360/138: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/139: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/140: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/141: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/142: ch.input_atten.att=5
360/143: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/144: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
360/145: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/146:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/147: fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/148: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/149:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/150: fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/151: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/152:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/153:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/154: fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/155: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/156:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/157: fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/158: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/159:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/160: clf()
360/161:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/162: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.45*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(10)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/163: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.4*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(10)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/164: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/165:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/166: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.4*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(-3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
360/167: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/168:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/169: figure()
360/170: plot freqs[::2]-lo
360/171: cla()
360/172: plot freqs[::2]-lo,amps[::2],'x'
360/173: plot(-1*( freqs[::2]-lo),amps[::2],'x')
360/174: ch.input_atten.att=8
360/175: ch.start_stream(stream_time=1,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/176:
subplot(311)
plot([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(312)
plot([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))],'o')
subplot(313)
plot(array([mean(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))])/array([std(abs(td['K%04d_I'%k]+1j*td['K%04d_Q'%k])) for k in range(len(freqs))]),'o')
360/177: ch.start_stream(stream_time=5,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
360/178: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
361/1: import pcp
361/2: import pcp; from numpy import *; from matplotlib.pyplot import *; ion(); import time
361/3: name = ['phantom','clones','sith','hope','empire','jedi']
361/4: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
361/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
361/6:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
361/7: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
361/8: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.4*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
361/9: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
361/10: from pcp.scripts.calculate_funcs import get_stream_data
361/11: ch.start_stream(stream_time=5,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
361/12: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0250','K0999'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/13: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/14: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0010','K0100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/15: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
361/16: fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
361/17: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
361/18: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0010','K0100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/19: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
361/20: fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
361/21: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
361/22: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0010','K0100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/23: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
361/24: clf()
361/25: ch.start_stream(stream_time=5,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
361/26: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0010','K0100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/27: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
361/28: ch.output_atten.att=60
361/29: ch.start_stream(stream_time=5,dont_ask=1); time.sleep(2); ts,td = get_stream_data(ch.current_dirfile.name)
361/30: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0010','K0100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
361/31: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
361/32: 1e9/500
362/1: import pcp
362/2: name = ['phantom','clones','sith','hope','empire','jedi']
362/3: from numpy import *; from matplotlib.pyplot import *; ion()
362/4: ch = pcp.mux_channel.muxChannel(name[2])
362/5: freqs_file = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
362/6:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
362/7: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
362/8:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=784e6
    ch.synth_lo.frequency=lo
    ch=mclist[0]
362/9: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.4*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
362/10: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
362/11: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
362/12: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
362/13: ch=mclist[2]
362/14: ch.toneslist.tonelistfile = '/home/muscat/rfcal_23082019/iqcal/test_freqs_amps_phases_250_256MHz.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 784e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.4*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
362/15: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
362/16: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
362/17: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
362/18: ch.synth_lo.SynthHDDevice.getHelp()
362/19: ch.input_atten.att
362/20: ch.output_atten.att
362/21: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
362/22: ch.output_atten.att=3
362/23: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
362/24: ch.output_atten.att=6
362/25: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
362/26: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=1000e3)
362/27: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
362/28: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=2000e3)
362/29: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'p')
362/30: gca().lines=gca().lines[-250:]
362/31: draw()
362/32: draw()
362/33: draw()
362/34: draw()
362/35: draw()
362/36: draw()
362/37: draw()
362/38: gca().lines=[]
362/39: draw()
362/40: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
362/41: lo
362/42: lo=734e6
362/43: lo=750e6
362/44: ch.toneslist
362/45: ch.toneslist.lo_freq
362/46: ch.toneslist.lo_freq
362/47: ch.toneslist.lo_freq=750e6
363/1:

optimum_attenuations.npy  optimum_frequencies.npy
muscat@muscat-mux-fass2$
363/2:
from numpy import *

lo     = 750e6
freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuatio
363/3:
from numpy import *

lo     = 750e6
freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')
363/4: freqs
363/5: attens
363/6: plot freqs,attens,'o'
363/7: plot(freqs,attens,'o')
363/8: from numpy import *; from matplotlib.pyplot import *; ion()
363/9: plot(freqs,attens,'o')
363/10: 10**(attens/20)
363/11: 10**(attens/20.)
363/12: pwd
363/13:
from numpy import *

lo     = 750e6

freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')

sortidx = argsort(freqs)
freqs=freqs[sortidx]
attens = attens[sortidx]

amplitudes = 10**(attens/20.)
amplitudes /= amplitude.max()

phases =random.uniform(0.,2*pi,len(freqs))

file = open('fass2_ch1_freqs_file_750e6_20191001.txt','w')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\n'%(f,a,p))
file.close()

file.open('fass2_ch1_750e6_toneslist_20191001.toneslist','w')
file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\t1.0\t1.0\t0.0\n'%(f,a,p))
file.close()
363/14:
from numpy import *

lo     = 750e6

freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')

sortidx = argsort(freqs)
freqs=freqs[sortidx]
attens = attens[sortidx]

amplitudes = 10**(attens/20.)
amplitudes /= amplitudes.max()

phases =random.uniform(0.,2*pi,len(freqs))

file = open('fass2_ch1_freqs_file_750e6_20191001.txt','w')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\n'%(f,a,p))
file.close()

file.open('fass2_ch1_750e6_toneslist_20191001.toneslist','w')
file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\t1.0\t1.0\t0.0\n'%(f,a,p))
file.close()
363/15:
from numpy import *

lo     = 750e6

freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')

sortidx = argsort(freqs)
freqs=freqs[sortidx]
attens = attens[sortidx]

amplitudes = 10**(attens/20.)
amplitudes /= amplitudes.max()

phases =random.uniform(0.,2*pi,len(freqs))

file = open('fass2_ch1_freqs_file_750e6_20191001.txt','w')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\n'%(f,a,p))
file.close()

file=open('fass2_ch1_750e6_toneslist_20191001.toneslist','w')
file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\t1.0\t1.0\t0.0\n'%(f,a,p))
file.close()
363/16:
from numpy import *

lo     = 750e6

freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')

sortidx = argsort(freqs)
freqs=freqs[sortidx]
attens = attens[sortidx]

amplitudes = 10**(attens/20.)
amplitudes /= amplitudes.max()

phases =random.uniform(0.,2*pi,len(freqs))

file = open('fass2_ch1_750e6_freqs_file_20191001.txt','w')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\n'%(f,a,p))
file.close()

file=open('fass2_ch1_750e6_toneslist_20191001.toneslist','w')
file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\t1.0\t1.0\t0.0\n'%(f,a,p))
file.close()
362/48: freqs_file = '/home/muscat/fass2/ch1/fass2_ch1_750e6_freqs_file_20191001.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
362/49: ch.toneslist.tonelistfile = '/home/muscat/fass2/ch1/fass2_ch1_750e6_toneslist_20191001.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
362/50: ch.synth_lo.SynthHDDevice.getHelp()
364/1: import pcp
364/2: from numpy import *; from matplotlib.pyplot import *; ion()
364/3: name = ['phantom','clones','sith','hope','empire','jedi']
364/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
364/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
364/6: freqs_file = '/home/muscat/fass2/ch1/fass2_ch1_750e6_freqs_file_20191001.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
364/7: ch.toneslist.tonelistfile = '/home/muscat/fass2/ch1/fass2_ch1_750e6_toneslist_20191001.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/8: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/9: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/10: ch.input_atten.att
364/11: ch.output_atten.att
364/12: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=2000e3)
364/13: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
363/17:
from numpy import *

lo     = 750e6

freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')

sortidx = argsort(freqs)
freqs=freqs[sortidx]
attens = attens[sortidx]

freqs=freqs[:-2]
attens=attens[:-2]


amplitudes = 10**(attens/20.)
amplitudes /= amplitudes.max()

phases =random.uniform(0.,2*pi,len(freqs))

file = open('fass2_ch1_750e6_freqs_file_20191001.txt','w')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\n'%(f,a,p))
file.close()

file=open('fass2_ch1_750e6_toneslist_20191001.toneslist','w')
file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\t1.0\t1.0\t0.0\n'%(f,a,p))
file.close()
364/14: freqs_file = '/home/muscat/fass2/ch1/fass2_ch1_750e6_freqs_file_20191001.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
364/15: ch.toneslist.tonelistfile = '/home/muscat/fass2/ch1/fass2_ch1_750e6_toneslist_20191001.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/16: 22155.41796778608/65536
364/17: 65536/22155.41796778608
364/18: ch.toneslist.tonelistfile = '/home/muscat/fass2/ch1/fass2_ch1_750e6_toneslist_20191001.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.5*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/19: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=2000e3)
364/20: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
364/21: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/22: ch.output_atten.att=6
364/23: ch.input_atten.att
364/24: ch.input_atten.att=14
364/25: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=2000e3)
364/26: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
364/27: ch.input_atten.att=8
364/28: ch.output_atten.att=12
364/29: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 2000,sweep_span=2000e3)
364/30: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'purple')
364/31: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/32: ch.input_atten.att=12
364/33: ch.output_atten.att=16
364/34: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/35: clf()
364/36: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'purple')
364/37: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/38: ch.input_atten.att=15
364/39: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/40: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
364/41: ch.output_atten.att=20
364/42: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/43: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/44: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/45: import fitting
364/46: import fitting
364/47: #plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/48: fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[123],ch.sweep.data[123])
364/49: reload(fitting)
364/50: fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[123],ch.sweep.data[123])
364/51: reload(fitting)
364/52: fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[123],ch.sweep.data[123])
364/53: reload(fitting)
364/54: fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[123],ch.sweep.data[123])
364/55: figure()
364/56: plot(ch.sweep.rf_freqs[123],abs(ch.sweep.data[123]))
364/57: plot(ch.sweep.rf_freqs[123],abs(fit))
364/58: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[123],ch.sweep.data[123])
364/59: plot(ch.sweep.rf_freqs[123],abs(fit))
364/60: fit
364/61: isfinite([1,2,3,4+4j,nan+nan*1j])
364/62: isfinite([1,2,3,4+4j,nan+1j])
364/63: params
364/64: print params
364/65: print params.values
364/66: print params.values()
364/67: print params.valuesdict
364/68: params.valuesdict
364/69: params.values
364/70: params.values()
364/71: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[25],ch.sweep.data[25])
364/72: plot(ch.sweep.rf_freqs[25],abs(ch.sweep.data[25]))
364/73: plot(ch.sweep.rf_freqs[25],abs(fit))
364/74: ch.sweep.data[25]
364/75: .sweep.data.sweep.data.sweep.dataclf()
364/76: clf()
364/77: z=ch.sweep.data[25]
364/78: plot z.real,z.imag,'.'
364/79: plot fit.real,fit.imag,'.'
364/80: z=ch.sweep.data[33]
364/81: plot z.real,z.imag,'.'
364/82: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[25],ch.sweep.data[2])
364/83: k=33; f,z=ch.sweep.rf_freqs[k],ch.sweep.data[k]
364/84: plot z.real,z.imag,'.'
364/85: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/86: plot fit.real,fit.imag,'.'
364/87: guess
364/88: guess.values()
364/89: fit.values()
364/90: params.values()
364/91: guess.values()
364/92: reload(fitting)
364/93: fit.values()
364/94: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/95: params.values()
364/96: guess.values()
364/97: reload(fitting)
364/98: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/99: params.values()
364/100: guess.values()
364/101: reload(fitting)
364/102: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/103: params.values()
364/104: params.values()
364/105: guess.values()
364/106: reload(fitting)
364/107: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/108: params.values()
364/109: guess.values()
364/110: reload(fitting)
364/111: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/112: params.values()
364/113: guess.values()
364/114: reload(fitting)
364/115: guess.values()
364/116: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/117: guess.values()
364/118: params.values()
364/119: reload(fitting)
364/120: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/121: guess.values()
364/122: params.values()
364/123: clf()
364/124: plot z.real,z.imag,'.'
364/125: plot fit.real,fit.imag,'.'
364/126: reload(fitting)
364/127: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/128: guess.values()
364/129: params.values()
364/130: plot fit.real,fit.imag,'.'
364/131: reload(fitting)
364/132: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/133: params.values()
364/134: guess.values()
364/135: reload(fitting)
364/136: fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
364/137: params.values()
364/138: guess.values()
364/139: plot fit.real,fit.imag,'.'
364/140: cla()
364/141: figure()
364/142: plot(ch.sweep.rf_freqs[k],abs(ch.sweep.data[k]))
364/143: plot(ch.sweep.rf_freqs[k],abs(fit))
364/144: clf()
364/145:
for f,z in zip(ch.sweep.rf_freqs,ch.sweep.data):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
364/146: params['a']
364/147: params['a'].value
364/148:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].valuesparams['a'].value
364/149: params.values['a']
364/150: params.values()['a']
364/151: params.values()
364/152:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].values,params[Qi].value,params['a'].value
364/153:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params[Qi].value,params['a'].value
364/154:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,params['a'].value
364/155: reload(fitting)
364/156:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,params['a'].value
364/157:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,params['Qe_real'],params['a'].value
364/158:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,params['Qe_real'].value,params['a'].value
364/159:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/160: clos
364/161: close('all')
364/162: figure()
364/163:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'bx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
363/18:
from numpy import *

lo     = 756e6

freqs  = load('optimum_frequencies.npy')
attens = load('optimum_attenuations.npy')

sortidx = argsort(freqs)
freqs=freqs[sortidx]
attens = attens[sortidx]

freqs=freqs[:-2]
attens=attens[:-2]


amplitudes = 10**(attens/20.)
amplitudes /= amplitudes.max()

phases =random.uniform(0.,2*pi,len(freqs))

file = open('fass2_ch1_%d_freqs_file_20191001.txt'%lo,'w')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\n'%(f,a,p))
file.close()

file=open('fass2_ch1_%d_toneslist_20191001.toneslist'%lo,'w')
file.write('Freq\tAmplitude\tPhase\tIQi\tIQq\tIQphase\n')
for f,a,p in zip(freqs,amplitudes,phases):
    file.write('%f\t%f\t%f\t1.0\t1.0\t0.0\n'%(f,a,p))
file.close()
364/164: freqs_file = '/home/muscat/fass2/ch1/fass2_ch1_756000000_freqs_file_20191001.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
364/165: ch.toneslist.tonelistfile = '/home/muscat/fass2/ch1/fass2_ch1_756000000_toneslist_20191001.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 756e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.5*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/166: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/167:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/168: v=1
364/169: print f'{v}'
364/170: print '{v}'.format(v)
364/171: print '{}'.format(v)
364/172: guess
364/173: arams
364/174: params
364/175: 1./(1/73000.+1/10000.)
364/176: 1./(1./8795-1/10000.)
364/177: 1./(1./10000-1./8795)
364/178: reload(fitting)
364/179:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/180: clf()
364/181: reload(fitting)
364/182: reload(fitting)
364/183:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/184: reload(fitting)
364/185: clf()
364/186:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/187: reload(fitting)
364/188:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/189: reload(fitting)
364/190:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/191: reload(fitting)
364/192:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/193: finite = np.isfinite(z)
364/194: finite
364/195: finite & (abs(z)<abs(z[0]))
364/196: (abs(z)<abs(z[0]))
364/197: reload(fitting)
364/198: close('all')
364/199:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/200: reload(fitting)
364/201:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/202: reload(fitting)
364/203:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/204: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/205: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/206: ch.input_atten.att
364/207:
def change_attenuation(self,change):
        in_now = self.input_atten.att
        out_now = self.output_atten.att 
        self.input_atten.att = in_now + change
        self.output_atten.att = out_now - change
364/208: ch.change_attenuation = change_attenuation
364/209: ch.change_attenuation(0.25)
364/210: pcp.mux_channel
364/211: pcp.mux_channel.muxChannel.change_attenuation = change_attenuation
364/212: ch.change_attenuation(0.25)
364/213: delattr?
364/214: delattr(ch,change_attenuation)
364/215: delattr(ch,'change_attenuation')
364/216: pcp.mux_channel.muxChannel.change_attenuation = change_attenuation
364/217: ch.change_attenuation(0.25)
364/218: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/219: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'yellow')
364/220: ch.change_attenuation(0.25)
364/221: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/222: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'orange')
364/223: ch.change_attenuation(0.25)
364/224: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/225: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
364/226: ch.change_attenuation(0.25)
364/227: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/228: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'purple')
364/229: ch.change_attenuation(0.25)
364/230: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
363/19: 541.6e6-756e6
363/20: -(541.6e6-756e6)+756e6
364/231: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'violet')
364/232: ch.change_attenuation(0.25)
364/233: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/234: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'m')
364/235: ch.change_attenuation(0.25)
364/236: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/237: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'indigo')
364/238: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/239: ch.change_attenuation(0.25)
364/240: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/241: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/242: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'blue')
364/243: ch.change_attenuation(0.25)
364/244: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/245: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'cyan')
364/246: ch.change_attenuation(0.25)
364/247: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/248: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'lime')
364/249: ch.change_attenuation(0.25)
364/250: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/251: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/252: figure()
364/253:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/254: figure(); plot(1-1*abs(linspace(-1,1,100)))
364/255: reload(fitting)
364/256: reload(fitting)
364/257: figure(); plot(1-1*abs(linspace(-1,1,100)))
364/258: close()
364/259: clf()
364/260:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/261: reload(fitting)
364/262:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/263: figure(); plot(1-sqrt(1*abs(linspace(-1,1,100))))
364/264: figure(); plot(1-abs(linspace(-1,1,100))**2))
364/265: figure(); plot(1-abs(linspace(-1,1,100)**2))
364/266: reload(fitting)
364/267:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/268: figure(); plot(1-1*np.abs(np.linspace(-1,1,len(finite)))**2)
364/269: exp(1)
364/270: exp(1/pi)
364/271: exp(1/pi**2)
364/272: exp(pi)
364/273: reload(fitting)
364/274:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/275: reload(fitting)
364/276:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/277: reload(fitting)
364/278:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/279: reload(fitting)
364/280:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/281: ch.change_attenuation(0.25)
364/282: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/283: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
364/284: ch.change_attenuation(0.25)
364/285: clf()
364/286: ch.output_atten.att
364/287: ch.output_atten.att=6.75
364/288: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/289: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/290: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
364/291: ch.change_attenuation(0.25)
364/292: ch.change_attenuation(0.25)
364/293: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/294: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'orange')
364/295: ch.change_attenuation(0.5)
364/296: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/297: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'yellow')
364/298: ch.change_attenuation(0.5)
364/299: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/300: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/301: ch.change_attenuation(0.5)
364/302: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/303: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'lime')
364/304: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/305: ch.change_attenuation(0.5)
364/306: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/307: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'cyan')
364/308: figure(); plot(1-1*np.abs(np.linspace(-1,1,len(finite)))**2)
364/309: clf()
364/310:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/311: ch.output_atten.att
364/312: ch.output_atten.att=0
364/313: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/314: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/315: clf()
364/316: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
364/317: ch.output_atten.att=1
364/318: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/319: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))-1,'orange')
364/320: len gca().lines
364/321: gca().lines = gca().lines[:169]
364/322: draw()
364/323: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))+1,'orange')
364/324: ch.output_atten.att=2
364/325: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/326: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))+2,'yellow')
364/327: ch.output_atten.att=3
364/328: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/329: imoprt time
364/330: import time
364/331: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))+2,'green')
364/332: gca().lines = gca().lines[:2*169]
364/333: draw()
364/334: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))+3,'green')
364/335: colors= cm.rainbow(linspace(0,1,10))
364/336:
for p in range(10):
    ch.output_atten.att=p
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
    time.sleep(2)
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))+p,color=colors[p])
364/337: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/338:
for p in range(10,20):
    ch.output_atten.att=p
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
    time.sleep(2)
    plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T))+p,color=colors[p-10])
364/339: ch.output_atten.att
364/340: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
364/341: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
364/342: save('found.npy',kids)
364/343: import change_toneslist_freqs
364/344: infile = '/home/muscat/fass2/ch1/fass2_ch1_750e6_toneslist_20191001.toneslist'
364/345:
    name,freqs,amps,phases,icor,qcor,phase_delay = np.genfromtxt(infile, unpack=True,skip_header=1)
.
364/346:     name,freqs,amps,phases,icor,qcor,phase_delay = np.genfromtxt(infile, unpack=True,skip_header=1)
364/347: freqs,amps,phases,icor,qcor,phase_delay = np.genfromtxt(infile, unpack=True,skip_header=1)
364/348: newfreqs = kids
364/349: outfile = '/home/muscat/live_toneslist.toneslist'
364/350:
    file = open(outfile,'w')
    file.write('Name\tFreq\tAmplitude\tPhase\tICorrection\tQCorrection\tIQPhaseDelay\n')
    for j in range(len(freqs)):
        file.write('K%03d\t%f\t%f\t%f\t%f\t%f\t%f\n'%(j,newfreqs[j],amps[j],phases[j],icor[j],qcor[j],phase_delay[j]))
    file.close()
364/351: reload(change_toneslist_freqs)
364/352: freqs
364/353: kids
364/354: change_toneslist_freqs.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
364/355: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
364/356: cp /home/muscat/fass2/ch1/fass2_ch1_750e6_freqs_file_20191001.txt ~/live_freqsfile.txt
364/357: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
364/358: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
364/359: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.5*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/360: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/361: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/362: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/363: vlines?
364/364: vlines(kids,-inf,inf)
364/365: kids
364/366: vlines(kids,100,200)
364/367: vlines(ch.toneslist.bb_freqs+lo,100,200,color='r')
364/368: clf()
364/369: plot(ch.sweep.rf_freqs.T,(abs(gradient(ch.sweep.data.T))),'green')
364/370: plot(ch.sweep.rf_freqs.T,(np.abs(gradient(ch.sweep.data.T))),'green')
364/371: plot(ch.sweep.rf_freqs.T,np.abs(gradient(ch.sweep.data)).T,'green')
364/372: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/373: plot(ch.sweep.rf_freqs.T,20*log10(abs(gradient(ch.sweep.data).T)),'green')
364/374: ch.sweep.data.shape
364/375: plot(ch.sweep.rf_freqs.T,20*log10(abs(gradient(ch.sweep.data,axis=1).T)),'green')
364/376: vlines(ch.toneslist.bb_freqs+lo,100,200,color='r')
364/377: vlines(kids,100,200)
364/378: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
364/379: plot(ch.sweep.rf_freqs.T,20*log10(abs(gradient(ch.sweep.data,axis=1).T)),'green')
364/380: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
364/381: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
364/382: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
364/383: change_toneslist_freqs.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
364/384: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
364/385: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,2.5*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/386: plot(ch.sweep.rf_freqs.T,20*log10(abs(gradient(ch.sweep.data,axis=1).T)),'red')
364/387: plot(ch.sweep.rf_freqs.T,20*log10(abs(gradient(ch.sweep.data).T)),'red')
364/388: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
364/389: clf()
364/390:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
364/391: power_tune={}
364/392: power_tune={'ai':[],'ao'=[],'wg'=[],'f':[],'a':[],'qr':[],'qi':[]}
364/393: power_tune={'ai':[],'ao':[],'wg':[],'f':[],'a':[],'qr':[],'qi':[]}
364/394: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
364/395: wg=2.5
364/396: wg=1.0
364/397:
for wg in linspace(1,5,4)/2.:
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
    for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
        plot(f,20*log10(abs(z)),'gx')
        plot(f,20*log10(abs(fit)),'r-')
        print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
        power_tune['a'].append(params['a'].value)
        power_tune['wg'].append(wg)
        power_tune['f'].append(params['f0'].value)
        power_tune['qr'].append(params['Qr'].value)
        power_tune['qi'].append(params['Qi'].value)
363/21: 1./2**14
363/22: '%f'%(1./2**14)
363/23: '%f'%(1./2**14*200)
364/398: figure()
364/399: plot(power_tune['f'],power_tune['a'],'o')
364/400: len power_tune['a']
364/401: len power_tune['wg']
364/402: colors = wg
364/403: colors = power_tune['wg']
364/404: colors = array(power_tune['wg'])
364/405: colors-=colors.min()
364/406: colors/=colors.max()
364/407: scatter(power_tune['f'],power_tune['a'],marker='o',colors=cm.rainbow(colors))
364/408: scatter(power_tune['f'],power_tune['a'],marker='o',c=cm.rainbow(colors))
364/409: cla()
364/410: cla()
364/411: scatter(power_tune['f'],power_tune['a'],marker='o',c=cm.rainbow(colors))
364/412: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/1: import pcp
365/2: from numpy import *; from matplotlib.pyplot import *; ion()
365/3: name = ['phantom','clones','sith','hope','empire','jedi']
365/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
365/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
365/6: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
365/7: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
365/8: wg=2.5
365/9: wg=1.0
365/10: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
365/11: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/12: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/13: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/14: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/15: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/16: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/17: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
365/18: ch.input_atten.att=15
365/19: ch.input_atten
366/1: import pcp
367/1: import pcp
367/2: name = ['phantom','clones','sith','hope','empire','jedi']
367/3: from numpy import *; from matplotlib.pyplot import *; ion()
367/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
367/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
367/6: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
367/7: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
367/8: wg=1.0
367/9: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
367/10: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
367/11: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
367/12:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
367/13: import fitting
367/14:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print j,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
367/15:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
367/16: reload(change_toneslist_freqs)
367/17: reload fitting
367/18:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
367/19:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'k-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
367/20: reload fitting
367/21:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'b-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
367/22: amps=ones_like(freqs)
367/23: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
367/24: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
367/25: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
367/26: ch.input_atten.att
367/27: ch.input_atten.att=15
367/28: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
367/29: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=500e3)
367/30: close()
367/31: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'red')
367/32: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
367/33: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
367/34: import change_toneslist_freqs
367/35: change_toneslist_freqs.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
367/36: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
367/37: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
367/38: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
367/39: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'green')
367/40: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
367/41: a=[]
367/42:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'b-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a=np.concatenate(a,[params['a'].value])
367/43:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'b-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a=np.concatenate([a,params['a'].value])
367/44: a=array()
367/45: a=array([])
367/46: a
367/47:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'b-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a=np.concatenate([a,params['a'].value])
367/48:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'b-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a=np.concatenate([a,[params['a'].value]])
367/49: figure()
367/50: plot a
367/51: cla()
367/52: plot a,'o'
367/53: ch.input_atten.att=18
367/54: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
367/55: a0=array([])
367/56:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'b-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
367/57: plot a0,'o'
367/58: freqs[156]
367/59: freqs[143]
367/60: freqs[142]
367/61: figure()
367/62: reload fitting
367/63: close()
367/64:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
367/65: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 250,sweep_span=300e3)
368/1: import pcp
368/2: from numpy import *; from matplotlib.pyplot import *; ion()
368/3: name = ['phantom','clones','sith','hope','empire','jedi']
368/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
368/5: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
368/6:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=20
    ch.output_atten.att=0
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
368/7: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/8: wg=1.0
368/9: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/10: a=array([])
368/11: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 250,sweep_span=300e3)
368/12:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/13: import fitting
368/14: a0=array([])
368/15:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/16: figure()
368/17: plot mean(abs(ch.sweep.data),axis=0)
368/18: cla()
368/19: plot 20*log10(mean(abs(ch.sweep.data),axis=0))
368/20: ch.toneslist.lo_freq(750e6+500e3)
368/21: ch.toneslist.lo_freq=750e6+500e3
368/22: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 250,sweep_span=300e3)
368/23: a1=array([])
368/24:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a1=np.concatenate([a1,[params['a'].value]])
368/25: plot 20*log10(mean(abs(ch.sweep.data),axis=0))
368/26: plot 20*log10(mean([abs(i) for i in ch.sweep.data if ptp(20*log10(abs(i)))<0.5],axis=0))
368/27: plot 20*log10(nanmean([abs(i) for i in ch.sweep.data if ptp(20*log10(abs(i)))<0.5],axis=0))
368/28: nanmean([abs(i) for i in ch.sweep.data if ptp(20*log10(abs(i)))<0.5],axis=0)
368/29: nanmean([abs(i) for i in ch.sweep.data if ptp(20*log10(abs(i)))<0.5],axis=1)
368/30: [abs(i) for i in ch.sweep.data if ptp(20*log10(abs(i)))<0.5]
368/31: [abs(i) for i in ch.sweep.data if ptp(20*log10(abs(i)))<1]
368/32: ch.sweep.data
368/33: ptp
368/34: ptp([1,2,3,nan])
368/35: [abs(i) for i in ch.sweep.data if (nanmax(20*log10(abs(i)))-nanmin(20*log10(abs(i))))<1]
368/36: #[abs(i) for i in ch.sweep.data if (nanmax(20*log10(abs(i)))-nanmin(20*log10(abs(i))))<1]
368/37: nanmean([abs(i) for i in ch.sweep.data if nanmax(20*log10(abs(i)))-nanmin(20*log10(abs(i))))<0.5],axis=1)
368/38: nanmean([abs(i) for i in ch.sweep.data if nanmax(20*log10(abs(i)))-nanmin(20*log10(abs(i)))<0.5],axis=1)
368/39: plot nanmean([abs(i) for i in ch.sweep.data if nanmax(20*log10(abs(i)))-nanmin(20*log10(abs(i)))<0.5],axis=1)
368/40: plot 20*log10(nanmean([abs(i) for i in ch.sweep.data if nanmax(20*log10(abs(i)))-nanmin(20*log10(abs(i)))<0.5],axis=1))
368/41: ch.toneslist.lo_freq=750e6
368/42: ch.sweep_lo(sweep_avgs=15,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/43: figure()
368/44: plot a0
368/45: plot a1
368/46: close()
368/47: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/48: close()
368/49: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/50: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/51: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/52: ch.input_atten.att=0
368/53: ch.output_atten.att
368/54: ch.output_atten.att=18
368/55: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
368/56: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/57: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
368/58: ch.input_atten.att=18
368/59: ch.output_atten.att=0
368/60: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
368/61: a=[]
368/62: ch.input_atten.att=8
368/63: ch.output_atten=10
368/64: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
368/65: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/66: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
368/67: ch.input_atten.att
368/68: ch.output_atten
368/69: ch.input_atten=0
368/70: ch.output_atten=20
368/71: ch._initialise_atten_in()
368/72: ch._initialise_atten_out()
368/73: ch.input_atten.att=0
368/74: ch.output_atten.att=20
368/75: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
368/76: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/77: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'p')
368/78:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/79:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/80: close()
368/81: ch.input_atten.att=20
368/82: ch.output_atten.att=0
368/83: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/84: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'p')
368/85: clf()
368/86: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
368/87: a0=array([])
368/88:
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/89: phases = linspace(-10,10,11)
368/90: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
368/91: phase_adjust = linspace(-10,10,11)
368/92: colors= cm.rainbow(linspace(0,1,11))
368/93: #ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/94:
#for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/95: #ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/96: import time
368/97:
#for p in phase_adjust:
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(p)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
    pause(3)
    a0=array([])
    for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
        plot(f,20*log10(abs(z)),'gx')
        plot(f,20*log10(abs(fit)),'r-')
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/98: a=[]
368/99:
for j,p in enumerate(phase_adjust):
    print j,p
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(p)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
    pause(3)
    a0=array([])
    for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
        plot(f,20*log10(abs(z)),'x',color=colors[j])
        plot(f,20*log10(abs(fit)),'-',color=colors[j])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/100: phase_adjust = linspace(0,0,1)
368/101: phase_adjust
368/102:
for j,p in enumerate(phase_adjust):
    print j,p
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(p)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
    pause(3)
    a0=array([])
    for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
        plot(f,20*log10(abs(z)),'x',color=colors[j])
        plot(f,20*log10(abs(fit)),'-',color=colors[j])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/103: ch.synth_lo.getPower()
368/104: ch.synth_lo.setPower(15)
368/105: colors=['r']
368/106:
for j,p in enumerate(phase_adjust):
    print j,p
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(p)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
    pause(3)
    a0=array([])
    for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
        plot(f,20*log10(abs(z)),'x',color=colors[j])
        plot(f,20*log10(abs(fit)),'-',color=colors[j])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/107: figure()
368/108:
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color=colors[j])
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/109:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='b')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/110:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='g')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/111:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='g')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/112:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='g')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/113:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='g')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/114:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='r')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/115: figure()
368/116: plot ch.sweep.data[123].real,ch.sweep.data[123].imag,'x'
368/117: plot ch.sweep.data[k].real,ch.sweep.data[k].imag,'x'
368/118:
for k in range(150)[::15]:
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag,'x')
368/119:
for k in range(150)[::5]:
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag,'x')
368/120: clf()
368/121:
for k in range(150)[::5]:
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
368/122:
for k in range(150)[::5]:
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit[k].real,fit.imag,'k')
368/123:
for k in range(150)[::5]:
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k')
368/124: clf()
368/125:
for k in range(150)[::5]:
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k')
368/126:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='r')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/127: close()
368/128: close()
368/129: close()
368/130: close()
368/131: close()
368/132: close()
368/133: close()
368/134:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k')
    print k
368/135:
reload(fitting)
a0=array([])
for k,(f,z) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(f,z)
    plot(f,20*log10(abs(z)),'x',color=colors[j])
    plot(f,20*log10(abs(fit)),'-',color='r')
    a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/136: close()
368/137:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k')
    print k
368/138: close()
368/139:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/140: reload(fitting)
368/141:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/142: figure()
368/143: reload(fitting)
368/144:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/145: close()
368/146: figure()
368/147: reload(fitting)
368/148:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/149: figure()
368/150: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'b')
368/151: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/152: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'r')
368/153: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/154: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/155: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/156: ch.input_atten.att
368/157: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/158: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/159: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/160: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/161: #ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)
368/162: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3)plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/163: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3);plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/164: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/165: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/166: f=copy(ch.sweep.rf_freqs)
368/167: z=copy(ch.sweep.data)
368/168: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data/z).T)),'m')
368/169: l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/170: ch1=mclist[0]
368/171: ch3=ch
368/172: ch=ch1
368/173: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/174: ch.input_atten.att
368/175: ch.input_atten.att=10
368/176: ch.input_atten.att=0
368/177: ch.input_atten.att=10
368/178: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(180)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/179: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(90)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/180: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/181: ch=ch3
368/182: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data/z).T)),'m')
368/183:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,(ch.sweep.data/z)[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/184:
#for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data/z)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(f,20*log10(abs(zz)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/185: figure()
368/186:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data/z)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(f,20*log10(abs(zz)),'gx')
    plot(f,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/187:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data/z)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/188:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data/z)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=abs(gradient(zz)))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/189:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data/z)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=abs(gradient(zz[isfinite(zz)])))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/190:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data/z)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=sqrt(abs(gradient(zz[isfinite(zz)]))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/191:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=sqrt(abs(gradient(zz[isfinite(zz)]))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/192:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/193: reload(fitting)
368/194: close()
368/195: close()
368/196: close()
368/197: close()
368/198: close()
368/199: close()
368/200: close()
368/201:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/202: reload(fitting)
368/203:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/204: reload(fitting)
368/205:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    #print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/206:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/207:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['f0'].value,params['Qi'].value,abs(params['Qe_real'].value+1j*(params['Qe_imag'].value)),params['a'].value,params['B'].value,params['B'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/208:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,params['B'].value,params['B'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/209: reload(fitting)
368/210:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,params['B'].value,params['B'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/211: reload(fitting)
368/212:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,params['B'].value,params['B'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/213:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,params['Af'].value,params['Bf'].value
    a0=np.concatenate([a0,[params['a'].value]])
368/214: reload(fitting)
368/215:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,int(params['Qe_real'].value),int(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/216:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/217: figure()
368/218: plot freqs
368/219: clf()
368/220: plot(diff(freqs),'o')
368/221: blinds = 550e6,600e6,704e6,802e6,900e6,950e6
368/222: kids = concatenate([kids,blinds])
368/223: kids = concatenate([freqs,blinds])
368/224: kids = sort(concatenate([freqs,blinds]))
368/225: save('found.npy',kids)
368/226: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
368/227: import change_toneslist_freqs
368/228: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
368/229: change_toneslist_freqs.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
368/230: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/231: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=300e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/232: clf()
368/233: l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/234:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,weights=log(sqrt(abs(gradient(zz[isfinite(zz)])))))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/235:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/236: reload(fitting)
368/237:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/238: reload(fitting)
368/239:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/240: reload(fitting)
368/241:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/242: reload(fitting)
368/243:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/244: clf()
368/245: reload(fitting)
368/246:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/247: reload(fitting)
368/248: clf()
368/249:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/250: reload(fitting)
368/251: clf()
368/252:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/253: figure()
368/254:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/255: reload(fitting)
368/256: clf()
368/257: reload(fitting)
368/258:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/259: reload(fitting)
368/260:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/261:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/262:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/263: close()
368/264:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/265: reload(fitting)
368/266: close()
368/267:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/268: reload(fitting)
368/269: close()
368/270:
for k in range(150):
    fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
    plot(ch.sweep.data[k].real,ch.sweep.data[k].imag)
    plot(fit.real,fit.imag,'k--')
    print k
368/271: figure()
368/272:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/273: reload(fitting)
368/274:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/275: close()
368/276: close()
368/277: reload(fitting)
368/278:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/279: reload(fitting)
368/280:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/281: reload(fitting)
368/282:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/283: reload(fitting)
368/284:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/285: reload(fitting)
368/286:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/287: clf()
368/288:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/289: reload(fitting)
368/290:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/291: reload(fitting)
368/292:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/293: reload(fitting)
368/294:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/295: clf()
368/296: reload(fitting)
368/297:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/298: reload(fitting)
368/299: clf()
368/300:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/301: clf()
368/302: reload(fitting)
368/303:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/304: reload(fitting)
368/305:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/306: reload(fitting)
368/307:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/308: close()
368/309: reload(fitting)
368/310: reload(fitting)
368/311:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/312: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1000,sweep_span=200e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/313: close()
368/314:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/315: close()
368/316: reload(fitting)
368/317:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/318: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=250e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/319:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/320: clf()
368/321: reload(fitting)
368/322:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/323: reload(fitting)
368/324:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/325: reload(fitting)
368/326:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/327: reload(fitting)
368/328:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/329: clf()
368/330: reload(fitting)
368/331:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/332: reload(fitting)
368/333: close()
368/334:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/335: reload(fitting)
368/336: close()
368/337: reload(fitting)
368/338:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/339: reload(fitting)
368/340:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/341: reload(fitting)
368/342:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/343: reload(fitting)
368/344:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/345: reload(fitting)
368/346:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/347: reload(fitting)
368/348:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/349: clf()
368/350: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/351:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/352:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,maxfev=1000)
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/353:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'max_nfev': 1000})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/354:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 1000})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/355: reload(fitting)
368/356:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 1000})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/357:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 100})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/358:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 10})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/359: clf()
368/360:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/361:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50000})
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/362: a0=array([])
368/363: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
368/364: save('found.npy',kids)
368/365: change_toneslist_freqs.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
368/366: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
368/367: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/368: 65536/22633.14173148677
368/369: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'m')
368/370: wg=2.75
368/371: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/372: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'g')
368/373: amps
368/374: amps=ones_like(freqs)
368/375: wg=1
368/376: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/377: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'c')
368/378: ch.input_atten.att=
368/379: ch.input_atten.att
368/380: ch.input_atten.att=5
368/381: ch.input_atten.att=15
368/382: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'b')
368/383: wg=2.75
368/384: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/385: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'r')
368/386: ch.input_atten.att=10
368/387: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
368/388: ch.output_atten.att
368/389: ch.output_atten.att=10
368/390: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
368/391: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'orange')
368/392: wg
368/393: #for wg in linspace(0.25,2.75,11):
368/394: #ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
368/395: In[394]
368/396: In[391]
368/397: In[361]
368/398: a0=array([])
368/399:
#for wg in linspace(0.25,2.75,11):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50000})
        a0=np.concatenate([a0,[params['a'].value]]
    a.append(a0)
368/400: a=[]
368/401:
for wg in linspace(0.25,2.75,11):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50000})
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
368/402: len a
368/403: p=linspace(0.25,2.75,11)[:9]
368/404: len(p)
368/405:
for j in range(len(p)):
    plot(p[j]*ones_like(a[j]),a[j],'o')
368/406: colors= cm.rainbow(linspace(0,1,9))
368/407:
for j in range(len(p)):
    plot(p[j]*ones_like(a[j]),a[j],'o',color=colors[j])
368/408:
for j in range(len(p)):
    plot(p[j]*ones_like(a[j]),a[j],'o',color=colors[j])
368/409: len a
368/410: len a[0]
368/411: cla()
368/412:
for j in range(len(p)):
    plot(a[j],'o',color=colors[j])
368/413: clf()
368/414:
for j in range(len(p)):
    plot(a[j],'o',color=colors[j])
368/415: a=array(a)
368/416: argmin(abs(a-0.1),axis=0)
368/417: argmin(abs(a-0.2),axis=0)
368/418: figure()
368/419: plot(argmin(abs(a-0.1),axis=0),'o')
368/420: plot(argmin(abs(a-0.1),axis=0),'o')
368/421: plot(argmin(abs(a-0.2),axis=0),'o')
368/422: plot(argmin(abs(a-0.3),axis=0),'o')
368/423: plot(argmin(abs(a-0.5),axis=0),'o')
368/424: plot(argmin(abs(a-0.6),axis=0),'o')
368/425: cla()
368/426: plot(argmin(abs(a-0.6),axis=0),'o')
368/427: cla()
368/428: plot(argmin(abs(a-0.0),axis=0),'o')
368/429: plot(argmin(abs(a-0.01),axis=0),'o')
368/430: a=clip(a,0.001,inf)
368/431: plot(argmin(abs(a-0.01),axis=0),'o')
368/432: plot(argmin(abs(a-0.01),axis=0),'o')
368/433: plot(argmin(abs(a-0.01),axis=0),'o')
368/434:
for j in range(len(p)):
    plot(a[j],'o',color=colors[j])
368/435: clf()
368/436:
for j in range(len(p)):
    plot(a[j],'o',color=colors[j])
368/437: cla()
368/438:
for j in range(len(p)):
    plot(10**a[j],'o',color=colors[j])
368/439: plot(argmin(abs(a-0.1),axis=0),'o')
368/440: cla()
368/441: plot(argmin(abs(a-0.1),axis=0),'o')
368/442: plot(log10(argmin(abs(a-0.1),axis=0)),'o')
368/443: cla()
368/444: plot(argmin(abs(a-0.2),axis=0),'o')
368/445: figure()
368/446: plot(ch.sweep.rf_freqs.T,20*log10(abs(ch.sweep.data.T)),'g')
368/447: plot(argmin(abs(a-0.3),axis=0),'o')
368/448: plot(argmin(abs(a-0.4),axis=0),'o')
368/449: plot(argmin(abs(a-0.5),axis=0),'o')
368/450: cla()
368/451: plot(argmin(abs(a-0.5),axis=0),'o')
368/452:
def model(x,a,b,c):
    return a*x**b+c
368/453: from scipy.optimize import curve_fit
368/454: curve_fit?
368/455: curve_fit(model, arange(len(a[0])),argmin(abs(a-0.4),axis=0))
368/456: plot(model(arange(len(a[0])),2.85885746e-07, 3.26449924e+00, 2.69985136e+00))
368/457: cla()
368/458: plot(argmin(abs(a-0.25),axis=0),'o')
368/459: plot(model(arange(len(a[0])),*curve_fit(model, arange(len(a[0])),argmin(abs(a-0.25),axis=0)[0])))
368/460: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.25),axis=0))[0])))
368/461:
def model(x,a,b,c):
    return a*b**x+c
368/462: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.25),axis=0))[0])))
368/463: cla()
368/464: plot(argmin(abs(a-0.1),axis=0),'o')
368/465: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.1),axis=0))[0])))
368/466: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.15),axis=0))[0])))
368/467: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.10),axis=0))[0])))
368/468: plot(argmin(abs(a-0.2),axis=0),'o')
368/469: cla()
368/470: plot(argmin(abs(a-0.2),axis=0),'o')
368/471: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.20),axis=0))[0])))
368/472:
def model(x,a,b,c):
    return a*x**2+b*x+c
368/473: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.20),axis=0))[0])))
368/474:
def model(x,a,b,c):
    return a*x**2+c
368/475: plot(model(arange(len(a[0])),*(curve_fit(model, arange(len(a[0])),argmin(abs(a-0.20),axis=0))[0])))
368/476: cla()
368/477: plot(freqs,argmin(abs(a-0.2),axis=0),'o')
368/478:
def model(x,a,b,c):
    return a*x**b+c
368/479: plot(model(freqs,*(curve_fit(model, freqs,argmin(abs(a-0.20),axis=0))[0])))
368/480: plot(model(freqs,*(curve_fit(model, freqs,argmin(abs(a-0.20),axis=0))[0],maxfev=10000)))
368/481: plot(model(freqs,*(curve_fit(model, freqs,argmin(abs(a-0.20),axis=0))[0]),maxfev=10000))
368/482: plot(model(freqs,*(curve_fit(model, freqs,argmin(abs(a-0.20),axis=0),maxfev=10000)[0])))
368/483: figure()
368/484:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50000},method='leastsq')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/485:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 500},method='leastsq')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/486:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 500},method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/487:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/488:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/489:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='leastsq')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/490:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='dogleg')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/491:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='emcee')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/492:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='dual_annealing')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/493:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='cg')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/494:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='powell')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/495:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='nelder')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/496:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='brute')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/497:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='basinhopping')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/498:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='differentialevolution')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/499:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='ampgo')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/500:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='newton')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
368/501:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='cobyla')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'v-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/1: imoprt pcp
369/2: import pcp
369/3: name = ['phantom','clones','sith','hope','empire','jedi']
369/4: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
369/5: from numpy import *; from matplotlib.pyplot import *; ion()
369/6: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
369/7: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
369/8:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
369/9: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
369/10: wg=2.75
369/11: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
369/12: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
369/13: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'r')
369/14: ch.input_atten.att=20
369/15: ch.output_atten.att
369/16: ch.output_atten.att=0
369/17: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
369/18: clf()
369/19: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'r')
369/20: ch.input_atten.att=15
369/21: ch.output_atten.att=10
369/22: clf()
369/23: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3);l=plot(ch.sweep.rf_freqs.T,20*log10(abs((ch.sweep.data).T)),'r')
369/24: import fitting
369/25:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/26: a0=array([])
369/27: reload(fitting)
369/28:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/29: close()
369/30: ch.input_atten.att=10
369/31: ch.output_atten.att=15
369/32: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
369/33:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/34: a0=array([])
369/35: ch.input_atten.att=12.5
369/36: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
369/37: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
369/38: clkf()
369/39: clf()
369/40:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/41:
for wg in linspace(2.75*):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50000})
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/42: 10**(arange(-20,1,1)/20)
369/43: 10**(arange(-20.,1,1)/20)
369/44: arange(-20.,1,1)
369/45:
for wg in linspace(2.75*10**(arange(-20.,1,1)/20)xx):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,fit_kws={'maxfev': 50000})
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/46: a=[]
369/47:
for wg in linspace(2.75*10**(arange(-20.,1,1)/20)):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/48:
for wg in 2.75*10**(arange(-20.,1,1)/20):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/49:
for wg in 2.75*10**(arange(-30.,1,1)/20):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/50: len a
369/51: plot(freqs,argmin(abs(a-0.2),axis=0),'o')
369/52: a=array(a)
369/53: plot(freqs,argmin(abs(a-0.2),axis=0),'o')
369/54: plot(freqs,argmin(abs(a-0.2),axis=0),'o')
369/55: colors= cm.rainbow(linspace(0,1,31))
369/56: a=array([])
369/57: a[0]=a0
369/58: a=concatenate([a,a0])
369/59: a
369/60: a=concatenate([a,a0])
369/61: a
369/62: cla()
369/63: a=array([])
369/64: a=stack(a,a0)
369/65: a=stack([a,a0])
369/66: a=empty_like(a0)
369/67: a
369/68: a=array([[]])
369/69: a
369/70: a=stack(a,a0)
369/71: stack?
369/72: a0
369/73: a=empty(0)
369/74: a
369/75: a=stack((a,a0))
369/76: a=array)
369/77: a=[]
369/78:
a0=array([])
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
     fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
     a0=np.concatenate([a0,[params['a'].value]])
369/79:
a0=array([])
plot(ch.sweep.rf_freqs[k],abs(ch.sweep.data[k])))
369/80:
a0=array([])
plot(ch.sweep.rf_freqs[k],abs(ch.sweep.data[k]))
369/81: close()
369/82:
a0=array([])
plot(ch.sweep.rf_freqs[k],abs(ch.sweep.data[k]))
369/83: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
369/84: f=ch.sweep.rf_freqs[k]
369/85: z=ch.sweep.data[k]
369/86: f
369/87: z
369/88:     finite = np.isfinite(z)
369/89:     rot = np.mean(np.unwrap(np.angle([z[finite][0],z[finite][-1]])))
369/90: rot
369/91:     z0 = z*np.exp(-1j*rot)
369/92: z0
369/93: sweep_direction='up
369/94: sweep_direction='up'
369/95: r      = NonlinearResonatorModel(sweep_direction=sweep_direction)
369/96: r      = fitting.NonlinearResonatorModel(sweep_direction=sweep_direction)
369/97: guess  = r.guess(z0[finite],f=f[finite])
369/98: guess
369/99: guess.values
369/100: guess.values()
369/101: result = r.fit(z0[finite],guess,f=f[finite],nan_policy='propagate',method=method)
369/102: method = 'least_squares'
369/103: result = r.fit(z0[finite],guess,f=f[finite],nan_policy='propagate',method=method)
369/104: z0[finite]
369/105: f=f[finite]
369/106: f
369/107: f=ch.sweep.rf_freqs[k]
369/108: result = r.fit(z0[finite],guess,f=f[finite],nan_policy='omit',method=method)
369/109: len f
369/110: len z0
369/111: result = r.fit(z0[finite],guess,f[finite],nan_policy='omit',method=method)
369/112: result = r.fit(z0[finite],guess,f=f[finite],nan_policy='omit',method=method)
369/113: f[finite]
369/114: diff f[finite]
369/115: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method)
369/116: guess
369/117: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method)
369/118: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kw={'max_nfev':1000})
369/119: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kw={'max_nfev':100})
369/120: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kw={'max_nfev':1})
369/121: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kw={'max_nfevs':1})
369/122: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':10})
369/123: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':100})
369/124: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':10})
369/125: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':99})
369/126: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':50})
369/127: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':25})
369/128: r.fit(z0[finite],guess,f=f[finite],fnan_policy='omit',method=method,fit_kws={'max_nfev':13})
369/129: reload(fitting)
369/130: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
369/131: params
369/132: reload(fitting)
369/133: params
369/134: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
369/135: reload(fitting)
369/136: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
369/137: guess
369/138: reload(fitting)
369/139: fit,params,guess=fitting.fit_nonlinear_resonator(ch.sweep.rf_freqs[k],ch.sweep.data[k])
369/140: a=[]
369/141:
for wg in 2.75*10**(arange(-30.,1,1)/20):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
    print 
    print wg
    print
369/142: close()
369/143:
for j,wg in enumerate(2.75*10**(arange(-30.,1,1)/20)):
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=amps; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ones(len(freqs)),phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz)
        a0=np.concatenate([a0,[params['a'].value]])
        plot(ff,20*log10(abs(zz)),'.',color=colors[j])
        plot(ff,20*log10(abs(fit)),color=colors[j])
    a.append(a0)
    print 
    print wg
    pause(1)
369/144: figure()
369/145: a=array(a)
369/146: plot(freqs,argmin(abs(a-0.2),axis=0),'o')
369/147: plot(freqs,argmin(abs(a-0.01),axis=0),'o')
369/148: plot(freqs,argmin(abs(a-0.5),axis=0),'o')
369/149: plot(freqs,argmin(abs(a-0.1),axis=0),'o')
369/150: cla()
369/151: plot(freqs,argmin(abs(a-0.1),axis=0),'o')
369/152: 2.75*10**(arange(-30.,1,1)/20)
369/153: 2.75*10**(arange(-30.,1,1)/20)[22]
369/154: 10**(arange(-30.,1,1)/20)
369/155: 10**(arange(-30.,1,1)/20)[22]
369/156: ac = ones_like(freqs)*10**(arange(-30.,1,1)/20)[22]
369/157: polyfit(freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1))],2)
369/158: polyfit(freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1))])
369/159: polyfit?
369/160: len freqs
369/161: len argmin(abs(a-0.1))
369/162: polyfit(freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)])
369/163: argmin(abs(a-0.1),axis=0)
369/164: polyfit(freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1])
369/165: polyfit(freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1],1)
369/166: plot(freqs,-2.92674731e-01+1.08568729e-09*freqs)
369/167: plot(freqs,-2.92674731e-01*freqs+1.08568729e-09)
369/168: plot(freqs,-2.92674731e-01*freqs+1.08568729e-09)
369/169: figure()
369/170: plot freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1]
369/171: plot freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)]
369/172: plot freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1],'o'
369/173: cla()
369/174: plot freqs,10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1],'o'
369/175: plot(freqs,-2.92674731e-01*freqs+1.08568729e-09)
369/176: plot(freqs,-2.92674731e-01+1.08568729e-09*freqs)
369/177: polyfit(freqs[feqs>700e6],10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1][freqs>700e6],1)
369/178: polyfit(freqs[freqs>700e6],10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1][freqs>700e6],1)
369/179: plot(freqs,2.05636591e-09*freqs+-1.11058110e+00)
369/180: poly=poly1d(polyfit(freqs[freqs>750e6],10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1][freqs>750e6],1))
369/181: plot(freqs,poly(freqs))
369/182: powers = 10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1]
369/183: figure()
369/184: plot powers
369/185: powers[powers<0.3]=nan
369/186: poly=poly1d(polyfit(freqs[freqs>750e6],powers[freqs>750e6],1))
369/187: plot(freqs,poly(freqs))
369/188: poly
369/189: poly=poly1d(polyfit(freqs[freqs>750e6][isfinite(powers[freqs>750e6])],powers[freqs>750e6][isfinite(powers[freqs>750e6])],1))
369/190: poly
369/191: plot(freqs,poly(freqs))
369/192: cla(*)
369/193: cla()
369/194: plot freqs,powers,'o'
369/195: plot(freqs,poly(freqs))
369/196: ac[freqs<750e6]=mean(powers[freqs<750e6])
369/197: ac[freqs>=750e6]=poly(freqs[freqs>=750e6])
369/198: plot freqs,ac
369/199: ac[freqs<750e6]=nanmean(powers[freqs<750e6])
369/200: plot freqs,ac
369/201: cla()
369/202: plot freqs,powers,'o'
369/203: plot freqs,ac,lw=10,alpha=0.5
369/204: figure()
369/205:
for j in range(len(powers)):
    plot(freqs,a[j],color=colors[j],'o')
369/206:
for j in range(len(powers)):
    plot(freqs,a[j],color=colors[j],marker='o')
369/207: powers
369/208: powers = 10**(arange(-30.,1,1)/20)[argmin(abs(a-0.1),axis=0)-1]
369/209:
for j in range(len(powers)):
    plot(freqs,a[j],color=colors[j],marker='o')
369/210: ac
369/211: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
369/212: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
369/213: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
369/214: figure()
369/215:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/216: figure()
369/217: plot a0,'o'
369/218: a0=array([])
369/219: clf()
369/220: plot a0,'o'
369/221:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    #plot(ff,20*log10(abs(zz)),'gx')
    #plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
369/222: plot a0,'o'
369/223: wg
369/224: ac
369/225: ac0=copy(ac)
369/226: """ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)"""
369/227:
"""for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
    """
369/228:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]+=0.25
        elif a0[kk]>0.3:
            ac[kk]-=0.25
        else:
            finshed+=1
    print finished
369/229:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]+=0.25
        elif a0[kk]>0.3:
            ac[kk]-=0.25
        else:
            finished+=1
    print finished
    if finshed==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):\n    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')\n    plot(ff,20*log10(abs(zz)),'gx')\n    plot(ff,20*log10(abs(fit)),'r-')\n    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)\n    a0=np.concatenate([a0,[params['a'].value]])
369/230:
"""for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]+=0.25
        elif a0[kk]>0.3:
            ac[kk]-=0.25
        else:
            finished+=1
    print finished
    if finshed==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
    """
369/231: a=[]
369/232: figure()
369/233: colors= cm.rainbow(linspace(0,1,10))
369/234:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]+=0.25
        elif a0[kk]>0.3:
            ac[kk]-=0.25
        else:
            finished+=1
    print finished
    if finshed==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/235:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.3:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/236:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.3:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    a.append(a0)
369/237: a
369/238: ac[freqs>=750e6]=poly(freqs[freqs>=750e6])
369/239: ac[freqs<750e6]=nanmean(powers[freqs<750e6])
369/240: ac
369/241:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.3:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('s')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('a')
    plot(freqs,a0,'o',color=colors[r])
    a.append(a0)
369/242:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.15:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.20:
            ac[kk]*=10**(-0.5/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('s')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('a')
    plot(freqs,a0,'o',color=colors[r])
    a.append(a0)
369/243: figure()
369/244: plot a.T,'o'
369/245: plot array(a).T,'o'
369/246: cla()
369/247: plot array(a).T
369/248: figure()
369/249: imshow(a)
369/250: imshow(a,vmax=1)
369/251: imshow(a,vmax=0.5)
369/252:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.15:
            ac[kk]*=10**(0.1/20)
        elif a0[kk]>0.175:
            ac[kk]*=10**(-0.1/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    a.append(a0)
369/253: figure()
369/254: plot freqs,a[0],'o'
369/255: plot freqs,a[-1],'o'
369/256: mean([0.15,0.175])
369/257: plot freqs,a[-1],'o'
369/258: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
369/259: imshow(a,vmax=0.5)
369/260: imshow(a,vmax=0.5,vmin=0.1)
369/261: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
370/1: import pcp
370/2: name = ['phantom','clones','sith','hope','empire','jedi']
370/3: from numpy import *; from matplotlib.pyplot import *; ion()
370/4: import fitting
370/5: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting; import change_toneslist_freqs
370/6: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
370/7:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
370/8: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
370/9: wg=1
370/10: wg=1.
370/11: ac=copy(amps)
370/12: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
370/13: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
370/14: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
370/15:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
370/16: a0=array([])
370/17:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
370/18: reload(fitting)
370/19:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
370/20: reload(fitting)
370/21:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
370/22: reload(fitting)
370/23:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
370/24: figure()
370/25: plot a0,'o'
370/26: a=[]
370/27:
#for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(1./20)
        elif a0[kk]>0.2:
            ac[kk]*=10**(-1./20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    a.append(a0)
370/28: colors= cm.rainbow(linspace(0,1,10))
370/29: a0=a0[len(freqs):]
370/30: len a0
370/31: len freqs
370/32:
#for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(1./20)
        elif a0[kk]>0.2:
            ac[kk]*=10**(-1./20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    a.append(a0)
370/33:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(1./20)
        elif a0[kk]>0.2:
            ac[kk]*=10**(-1./20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(3)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    a.append(a0)
371/1: import pcp
372/1: import pcp
372/2: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting; import change_toneslist_freqs
372/3: name = ['phantom','clones','sith','hope','empire','jedi']
372/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
372/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
372/6: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
372/7: ac=copy(amps)
372/8: a0=array([])
372/9: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
372/10: wg=1.0
372/11: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
372/12: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
372/13:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
372/14: figure()
372/15: plot a0,'o'
372/16: ch.input_atten.att
372/17: ch.output_atten.att
372/18: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
372/19: ac=copy(amps)
372/20: colors= cm.rainbow(linspace(0,1,10))
372/21: a=[]
372/22: a.append(a0)
372/23:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(1./20)
        elif a0[kk]>0.2:
            ac[kk]*=10**(-1./20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
372/24:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(1./20)
        elif a0[kk]>0.2:
            ac[kk]*=10**(-1./20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
372/25:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.1:
            ac[kk]*=10**(1./20)
        elif a0[kk]>0.2:
            ac[kk]*=10**(-1./20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
372/26: figure()
372/27: plot array(a)[0]
372/28: plot array(a)[:,0]
372/29: clf()
372/30: plot array(a)[:,0]
372/31: plot array(a)[:,1]
372/32: plot array(a)[:,2]
372/33: plot array(a)[:,3]
372/34: plot array(a)[:,4]
372/35: plot array(a)[:,55]
372/36: cla()
372/37: plot array(a).T
372/38: cla()
372/39: plot array(a)
372/40:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.14:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.16:
            ac[kk]*=10**(0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
372/41:
for r in range(10):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.14:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.16:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
372/42:
for r in range(5):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.14:
            ac[kk]*=10**(0.1/20)
        elif a0[kk]>0.16:
            ac[kk]*=10**(-0.1/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
372/43: cla()
372/44: plot a[0],'o'
372/45: plot a[-1],'o'
372/46: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
372/47: save('found.npy',kids)
372/48: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
372/49: change_toneslist_freqs.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
372/50: import change_toneslist_values
372/51: change_toneslist_values.change_freqsfile_amps('/home/muscat/live_freqsfile.txt',ai,'/home/muscat/live_freqsfile.txt')
372/52: ac
372/53: change_toneslist_values.change_freqsfile_amps('/home/muscat/live_freqsfile.txt',ac,'/home/muscat/live_freqsfile.txt')
372/54: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
372/55: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',ac,'/home/muscat/live_toneslist.toneslist')
373/1: import pcp
373/2: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting; import change_toneslist_value
373/3: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting; import change_toneslist_values
373/4: name = ['phantom','clones','sith','hope','empire','jedi']
373/5: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name];
373/6:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
373/7: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/8: wg=1.0
373/9: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/10: ac=copy(amps)
373/11: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/12: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
373/13:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/14: close()
373/15: a0=array([])
373/16:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/17: figure()
373/18: plot a0
373/19: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/20: 65500/27084.110412453887
373/21: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',ac*2.4,'/home/muscat/live_toneslist.toneslist')
373/22: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',ac*2.4,'/home/muscat/live_toneslist.toneslist')
373/23: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/24: ac=copy(amps)
373/25: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/26: change_toneslist_values.change_freqsfile_amps('/home/muscat/live_freqsfile.txt',ac*2.4,'/home/muscat/live_freqsfile.txt')
373/27: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/28: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/29: ac=copy(amps)
373/30: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/31: change_toneslist_values.change_freqsfile_amps('/home/muscat/live_freqsfile.txt',ac*0.99,'/home/muscat/live_freqsfile.txt')
373/32: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',ac*0.99,'/home/muscat/live_toneslist.toneslist')
373/33: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/34: ac=copy(amps)
373/35: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/36: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',ac*0.95,'/home/muscat/live_toneslist.toneslist')
373/37: change_toneslist_values.change_freqsfile_amps('/home/muscat/live_freqsfile.txt',ac*0.95,'/home/muscat/live_freqsfile.txt')
373/38: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/39: ac=copy(amps)
373/40: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/41: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
373/42: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/43:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/44: figure()
373/45: plot a0
373/46: a=[]
373/47:
#for r in range(12):
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.14:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.16:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
373/48:
for r in range(N):
    if r==0:
        colors=cm.rainbow(linspace(0,1,N))
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.14:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.16:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
373/49: N=24
373/50:
for r in range(N):
    if r==0:
        colors=cm.rainbow(linspace(0,1,N))
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.14:
            ac[kk]*=10**(0.25/20)
        elif a0[kk]>0.16:
            ac[kk]*=10**(-0.25/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    #figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        #plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        #plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
373/51: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/52: a=[]
373/53: ac=copy(amps)
373/54: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/55: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
373/56:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/57: plot a0
373/58: ch.input_atten.att
373/59: ch.input_atten.att=16
373/60: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
373/61:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/62: plot a0
373/63: a0=array([])
373/64:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/65: cla()
373/66: plot a0
373/67: amps
373/68: plot amps
373/69: plot ac
373/70: mean(a0[(a0>0.1)&(a0<0.6)])
373/71: N=10
373/72:
for r in range(N):
    if r==0:
        colors=cm.rainbow(linspace(0,1,N))
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.332:
            ac[kk]*=10**(0.05/20)
        elif a0[kk]>0.334:
            ac[kk]*=10**(-0.05/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    #figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        #plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        #plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
373/73:
for r in range(N):
    if r==0:
        colors=cm.rainbow(linspace(0,1,N))
    finished = 0
    for kk in range(len(freqs)):
        if a0[kk]<0.332:
            ac[kk]*=10**(0.05/20)
        elif a0[kk]>0.334:
            ac[kk]*=10**(-0.05/20)
        else:
            finished+=1
    print '\n\n finished: %s \n\n\n'%finished
    if finished==len(freqs)-1:
        break
    ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)    
        
    pause(1)
    ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
    pause(1)
    a0=array([])
    #figure('ss')
    for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
        fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
        #plot(ff,20*log10(abs(zz)),'x',color=colors[r])
        #plot(ff,20*log10(abs(fit)),'-',color=colors[r])
        a0=np.concatenate([a0,[params['a'].value]])
    figure('aa')
    plot(freqs,a0,'o',color=colors[r])
    pause(3)
    a.append(a0)
373/74: figure()
373/75: plot a0,'o'
373/76: plot a0,'o'
373/77: plot a[-2],'o'
373/78: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/79: history -g -f ipythonhistory
373/80: ch.start_stream(stream_time=5,dont_ask=1)
373/81: ts,td = get_stream_data(ch.current_dirfile.name)
373/82: from pcp.scripts.calculate_funcs import get_stream_data
373/83: ts,td = get_stream_data(ch.current_dirfile.name)
373/84: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K0001','K0010','K0100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/85: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/86: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
373/87: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
373/88: change_toneslist_values.change_freqsfile_amps('/home/muscat/live_freqsfile.txt',ac,'/home/muscat/live_freqsfile.txt')
373/89: change_toneslist_values.change_toneslist_amps('/home/muscat/live_toneslist.toneslist',ac,'/home/muscat/live_toneslist.toneslist')
373/90: change_toneslist_freqs.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/91: change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/92: change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
373/93: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/94: ac=copy(amps)
373/95: ch.input_atten.att
373/96: ch.output_atten.att
373/97: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/98: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 1500,sweep_span=350e3)
373/99: close()
373/100: close()
373/101: close()
373/102:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/103: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=250e3)
373/104:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/105: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/106:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/107: ch.start_stream(stream_time=10,dont_ask=1)
373/108: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/109: pcp.scripts._psd_plot_functions.plots_s21(KIDs)
373/110: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/111: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/112: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/113: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(4)]),axis=2),axis=0)
373/114: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/115: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/116: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/117: pcp.scripts._psd_plot_functions.plots_streams?
373/118: 512e6/2**21
373/119: from scipy import signal
373/120: signal.periodogram?
373/121: reload(pcp.scripts)
373/122: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/123: reload pcp.scripts._psd_plot_functions.get_KID_data
373/124: reload pcp.scripts._psd_plot_functions
373/125: reload pcp.scripts._psd_plot_functions
373/126: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/127: reload pcp.scripts._psd_plot_functions
373/128: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/129: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/130: close()
373/131: close()
373/132: close()
373/133: close()
373/134: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/135: close()
373/136: close()
373/137: close()
373/138: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=256)
373/139: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/140: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise([ch])
373/141: sweep_dir, on_stream_dir, off_stream_dir = pcp.scripts.get_on_off_noise(['sith'])
373/142: ch.synth_lo.frequency
373/143: close()
373/144: close()
373/145: close()
373/146: close()
373/147: close()
373/148: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=256)
373/149: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/150: reload pcp.scripts._psd_plot_functions
373/151: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=256)
373/152: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/153: close()
373/154: close()
373/155: close()
373/156: close()
373/157: ch.start_stream(stream_time=10,dont_ask=1)
373/158: close()
373/159: KIDs = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/160: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/161: ch.synth_lo.frequency
373/162: ch.synth_lo.frequency=750e6+200e3
373/163: ch.start_stream(stream_time=10,dont_ask=1)
373/164: ch.synth_lo.frequency=750e6
373/165: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K001','K010','K100'], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/166: pcp.scripts._psd_plot_functions.plots_streams(KIDsoff)
373/167: KIDs.values
373/168: KIDs.keys()
373/169: KIDs['K100']
373/170: [KIDs['K%03d'%k]['psd_level'] for k in [1,10,100]]
373/171: [KIDsoff['K%03d'%k]['psd_level'] for k in [1,10,100]]
373/172: ch.synth_lo.frequency=750e6+200e3
373/173: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/174: ch.synth_lo.frequency=750e6
373/175: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/176: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/177: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
373/178: change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/179: change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
373/180: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
373/181: ac=copy(amps)
373/182: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/183: ch.start_stream(stream_time=30,dont_ask=1)
373/184: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/185: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/186: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/187: KIDson1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/188: ch.synth_lo.frequency=750e6+200e3
373/189: ch.start_stream(stream_time=30,dont_ask=1)
373/190: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/191: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/192: close()
373/193: close()
373/194: close()
373/195: close()
373/196: close()
373/197: plot(freqs,[KIDsoff['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/198: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/199: figure()
373/200: plot(freqs,[KIDson1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/201: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/202: ch.synth_lo.frequency=750e6+400e3
373/203: ch.start_stream(stream_time=30,dont_ask=1)
373/204: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/205: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/206: clf()
373/207: plot(freqs,[KIDson1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/208: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/209: ch.synth_lo.frequency=750e6+250e3
373/210: ch.start_stream(stream_time=30,dont_ask=1)
373/211: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/212: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/213: clf()
373/214: plot(freqs,[KIDson1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/215: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/216: pcp.scripts._psd_plot_functions.plots_streams?
373/217: pcp.scripts._psd_plot_functions.plots_streams??
373/218: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/219: pcp.scripts._psd_plot_functions.plots_streams(KIDson,fig_per_plot=False)
373/220: pcp.scripts._psd_plot_functions.plots_streams(KIDson1024,fig_per_plot=False)
373/221: pcp.scripts._psd_plot_functions.plots_streams(KIDs)
373/222: pcp.scripts._psd_plot_functions.plots_streams??
373/223: fig = gcf()
373/224: fig.canvas.set_window_title('on')
373/225: pcp.scripts._psd_plot_functions.plots_streams(KIDsoff1024,fig_per_plot=False)
373/226: ch.start_stream(stream_time=30,dont_ask=1)
373/227: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/228: plot(freqs,[KIDson1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/229: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/230: #ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/231: fft_shift = 2**9; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/232: ch.start_stream(stream_time=30,dont_ask=1)
373/233: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/234: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'o',color='orange)
373/235: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'o',color='orange')
373/236: ch.synth_lo.frequency=750e6
373/237: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/238: ch.synth_lo.frequency
373/239: ch.start_stream(stream_time=30,dont_ask=1)
373/240: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/241: KIDson1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/242: ch.synth_lo.frequency=750e6+250e3
373/243: ch.start_stream(stream_time=30,dont_ask=1)
373/244: KIDsoff = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/245: KIDsoff1024 = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,nfft=1024)
373/246: fig.canvas.set_window_title('on')
373/247: figure()
373/248: plot(freqs,[KIDson1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/249: plot(freqs,[KIDsoff1024['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/250: file = open('/home/muscat/fass2tonelist20191003.txt','w')
373/251: file.write('Name\tFreq\tOffset att\tAll\tNone\r\n')
373/252:
for j,f in enumerate(freqs):
    file.write('K%03d\t%d\t%d\t%d\t%d\r\n'%(j,f,0,1,0))
373/253: file.close()
373/254: figure()
373/255: k=KIDson['K050']
373/256: k.keys()
373/257: k['psd']
373/258: plot k['psd']
373/259: clf()
373/260: plot linspace(0,244,len(k['psd'])),k['psd']
373/261: figure()
373/262:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/263: reload pcp.scripts._psd_plot_functions
373/264:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/265: reload pcp.scripts._psd_plot_functions
373/266:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/267: reload pcp.scripts._psd_plot_functions
373/268: reload(fitting)
373/269: reload pcp.scripts._psd_plot_functions
373/270:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/271: reload pcp.scripts._psd_plot_functions
373/272:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/273: reload pcp.scripts._psd_plot_functions
373/274:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/275: reload pcp.scripts._psd_plot_functions
373/276: reload(fitting)
373/277: reload(fitting)
373/278:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'kx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/279: reload(fitting)
373/280:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/281: reload(fitting)
373/282:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/283: clf()
373/284: reload(fitting)
373/285: clf()
373/286:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/287:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/288: reload(fitting)
373/289: clf()
373/290:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/291: reload(fitting)
373/292:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/293:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/294: r4e
373/295: reload(fitting)
373/296:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/297: reload(fitting)
373/298:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/299: clf()
373/300:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = 1./(abs(zz/zz.max())))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/301:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights = None)
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/302:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/303: clf()
373/304: reload(fitting)
373/305:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/306:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=abs(zz))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/307:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=1./abs(zz))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/308: clf()
373/309:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=1./sqrt(abs(zz)))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/310: reload(fitting)
373/311:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=1./sqrt(abs(zz)))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/312: reload(fitting)
373/313:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=1./sqrt(abs(zz)))
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/314: reload(fitting)
373/315:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=1./sqrt(abs(zz)))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/316: figure()
373/317: x=lispace(0.999,1.001,10000)
373/318: x=linspace(0.999,1.001,10000)
373/319: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,0,1,0,0,0)[0])
373/320: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,0,1,0,0,0))
373/321: x=linspace(0.999e9,1.001e9,10000)
373/322: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,0,1,0,0,0))
373/323: clf()
373/324: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,0,1,0,0,0))
373/325: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,-10000,1,0,0,0))
373/326: plot(x,fitting.nonlinear_resonator(x,1e9,10000,-20000,-10000,1,0,0,0))
373/327: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,-10000,1,0,0,0))
373/328: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,-20000,1,0,0,0))
373/329: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,-20000,1,1.0,0,0))
373/330: plot(x,fitting.nonlinear_resonator(x,1e9,10000,20000,20000,1,1.0,0,0))
373/331: plot(x,fitting.nonlinear_resonator(x,1e9,10000,-20000,20000,1,1.0,0,0))
373/332: reload(fitting)
373/333: clf()
373/334:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares',weights=1./sqrt(abs(zz)))
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/335:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/336: reload(fitting)
373/337: clf()
373/338:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/339: clf()
373/340: reload(fitting)
373/341:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/342: reload(fitting)
373/343: clf()
373/344:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/345: reload(fitting)
373/346: clf()
373/347:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/348: reload(fitting)
373/349: clf()
373/350:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/351: reload(fitting)
373/352:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/353: reload(fitting)
373/354:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/355: reload(fitting)
373/356:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/357: clf()
373/358: reload(fitting)
373/359:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/360: reload(fitting)
373/361: clf()
373/362:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/363:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),para
     ...: ms['dc'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/364:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dc'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/365: ch.start_stream(stream_time=1,dont_ask=1)
373/366: zoff = array([mean(ch.current_dirfile.getdata('K%03d'%k)) for k in range(len(freqs))])
373/367: ioff = array([mean(ch.current_dirfile.getdata('K%03d_I'%k)) for k in range(len(freqs))])
373/368: qoff = array([mean(ch.current_dirfile.getdata('K%03d_Q'%k)) for k in range(len(freqs))])
373/369: figure()
373/370: plot ioff,'o'
373/371: plot qoff,'o'
373/372: reload(fitting)
373/373:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dc'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/374: clf()
373/375: reload(fitting)
373/376:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dc'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/377: reload(fitting)
373/378: clf()
373/379:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dc'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/380:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dci'].value,params['dcq'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/381: figure()
373/382: plot ioff,'o'
373/383: plot qoff,'o'
373/384: reload(fitting)
373/385:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dci'].value,params['dcq'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/386: reload(fitting)
373/387:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value),params['dci'].value,params['dcq'].value
    a0=np.concatenate([a0,[params['a'].value]])
373/388:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/389:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/390: figure()
373/391:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(zz.real,zz.imag,'x')
    plot(fit.real,fit.imag)
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/392: clf()
373/393:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(zz.real,zz.imag,'x')
    plot(fit.real,fit.imag)
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/394: reload(fitting)
373/395: clf()
373/396:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(zz.real,zz.imag,'x')
    plot(fit.real,fit.imag)
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/397: reload(fitting)
373/398: clf()
373/399:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(zz.real,zz.imag,'x')
    plot(fit.real,fit.imag)
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/400: reload(fitting)
373/401: clf()
373/402:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(zz.real,zz.imag,'x')
    plot(fit.real,fit.imag)
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/403: reload(fitting)
373/404: clf()
373/405:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(zz.real,zz.imag,'x')
    plot(fit.real,fit.imag)
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/406: figure()
373/407:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,angle(zz),'x')
    plot(ff,angle(fit))
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/408: reload(fitting)
373/409: clf()
373/410:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/411: reload(fitting)
373/412:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    zz-=ioff[k]+1j*qoff[k]
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/413:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/414: type(None)
373/415: type(None) is type(None)
373/416: reload(fitting)
373/417:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/418: close()
373/419: figure()
373/420:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/421: reload(fitting)
373/422:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/423: clf()
373/424: reload(fitting)
373/425:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/426: reload(fitting)
373/427: clf()
373/428:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/429: reload(fitting)
373/430: clf()
373/431:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/432: reload(fitting)
373/433:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/434:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/435: reload(fitting)
373/436: reload(fitting)
373/437:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/438: reload(fitting)
373/439: clf()
373/440:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/441: reload(fitting)
373/442:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/443: reload(fitting)
373/444: clf
373/445: clf()
373/446:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/447: reload(fitting)
373/448:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/449: reload(fitting)
373/450:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/451: reload(fitting)
373/452:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/453: reload(fitting)
373/454:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qe_real'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/455:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi'].value),round(params['Qc'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/456:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value)round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/457:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/458: reload(fitting)
373/459: clf()
373/460:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/461: reload(fitting)
373/462:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/463: reload(fitting)
373/464:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/465: reload(fitting)
373/466:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/467: reload(fitting)
373/468:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/469: reload(fitting)
373/470:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/471: reload(fitting)
373/472:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/473: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/474:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/475: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/476: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/477:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/478: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/479:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'cx')
    plot(ff,20*log10(abs(fit)),'c-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/480: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/481:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'cx')
    plot(ff,20*log10(abs(fit)),'c-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/482: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-1)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/483: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/484:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/485: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(1)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/486: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/487:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'yx')
    plot(ff,20*log10(abs(fit)),'y-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/488: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/489: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/490:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/491: wg
373/492: wg=0.9
373/493: clf()
373/494: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/495: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/496:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/497: clf()
373/498: reload(fitting)
373/499:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/500: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] )
373/501: change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist')
373/502: change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/503: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/504: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/505: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/506:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'yx')
    plot(ff,20*log10(abs(fit)),'y-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/507: ch.start_stream(stream_time=10,dont_ask=1)
373/508: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/509: figure('noise')
373/510: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'go')
373/511: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/512: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/513: figure(8)
373/514:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/515: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/516: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/517: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/518:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'yx')
    plot(ff,20*log10(abs(fit)),'y-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/519: ch.start_stream(stream_time=10,dont_ask=1)
373/520: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/521: figure('noise')
373/522: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'bo')
373/523: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(6)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/524: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/525: figure(8)
373/526:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/527: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/528: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(6)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/529: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/530:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/531: ch.start_stream(stream_time=10,dont_ask=1)
373/532: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/533: figure('noise')
373/534: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'co')
373/535: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/536: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/537: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/538: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/539: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/540:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/541: figure(8)
373/542:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/543: figure('noise')
373/544: ch.start_stream(stream_time=10,dont_ask=1)
373/545: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/546: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'mo')
373/547: ch.synth_lo.frequency=750e6+300e3
373/548: ch.start_stream(stream_time=10,dont_ask=1)
373/549: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/550: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'mx')
373/551: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(12)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/552: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/553: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/554: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(12)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/555: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/556: figure(8)
373/557:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'yx')
    plot(ff,20*log10(abs(fit)),'y-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/558: ch.start_stream(stream_time=10,dont_ask=1)
373/559: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/560: figure('noise')
373/561: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'yo')
373/562: ch.synth_lo.frequency=750e6+300e3
373/563: ch.start_stream(stream_time=10,dont_ask=1)
373/564: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/565: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'yx)
373/566: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'yx')
373/567: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(15)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/568: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/569: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/570: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(15)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/571: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/572: ch.start_stream(stream_time=10,dont_ask=1)
373/573: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/574: plot(freqs,[KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))],'ro')
373/575: figure('noise')
373/576: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))])-20*log10(feqs[k]),'ro')
373/577: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))])-20*log10(freqs[k]),'ro')
373/578: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))])-10*log10(freqs[k]),'ro')
373/579: gca().lines.pop(-1)
373/580: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/581: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/582: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/583: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/584: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/585: ch.start_stream(stream_time=10,dont_ask=1)
373/586: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/587: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'ko')
373/588: ch.synth_lo.frequency=750e6+300e3
373/589: ch.start_stream(stream_time=10,dont_ask=1)
373/590: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/591: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'kx')
373/592: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/593: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/594: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/595: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-3)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/596: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/597: ch.start_stream(stream_time=10,dont_ask=1)
373/598: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/599: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'gs')
373/600: figure(8)
373/601:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/602: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/603: gca().lines.pop(-1)
373/604: ch.start_stream(stream_time=10,dont_ask=1)
373/605: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/606: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'gs')
373/607: figure(8)
373/608:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/609: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/610: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/611: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt')
373/612: #ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/613: """kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'"""
373/614: """ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)"""
373/615: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/616: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/617:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/618: ch.start_stream(stream_time=10,dont_ask=1)
373/619: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/620: figure('noise')
373/621: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'rs')
373/622: ch.synth_lo.frequency=750e6+300e3
373/623: ch.start_stream(stream_time=10,dont_ask=1)
373/624: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False)
373/625: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'rx')
373/626: figure('noise')
373/627: plot linspace(0,244,len(KIDson['K000']['psd'])),KIDson['100']['psd']
373/628: plot linspace(0,244,len(KIDson['K000']['psd'])),KIDson['K100']['psd']
373/629: figure()
373/630: plot linspace(0,244,len(KIDson['K000']['psd'])),KIDson['K100']['psd']
373/631: argmin(abs(freqs-680e6))
373/632: plot linspace(0,244,len(KIDson['K000']['psd'])),KIDson['K076']['psd']
373/633: plot( linspace(0,244,len(KIDson['K000']['psd'])),mean([KIDson['K%03d']['psd'] for k in range(len(freqs))],axis=0))
373/634: plot( linspace(0,244,len(KIDson['K000']['psd'])),mean([KIDson['K%03d'%k]['psd'] for k in range(len(freqs))],axis=0))
373/635: pcp.scripts._psd_plot_functions.get_KID_data?
373/636: pcp.scripts._psd_plot_functions.get_KID_data??
373/637: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=140,down_lim=125)
373/638: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'gx')
373/639: ch.synth_lo.frequency=750e6
373/640: ch.start_stream(stream_time=10,dont_ask=1)
373/641: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=140,down_lim=125)
373/642: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'go')
373/643: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'ko')
373/644: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'wo')
373/645: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/646: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/647: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(-9)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/648: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/649: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/650: ch.start_stream(stream_time=10,dont_ask=1)
373/651: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=140,down_lim=125)
373/652: clf()
373/653: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/654: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=135,down_lim=130)
373/655: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/656: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=205)
373/657: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/658: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/659: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=200)
373/660: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/661: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/662: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/663: clf()
373/664: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/665: ch.synth_lo.frequency=750e6+300e3
373/666: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/667: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/668: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/669: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=233)
373/670: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/671: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=clf()244,down_lim=233)
373/672: clf()
373/673: plot linspace(0,244,len(KIDson['K000']['psd'])),KIDson['K076']['psd']
373/674: ch.start_stream(stream_time=10,dont_ask=1)
373/675: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=clf()244,down_lim=233)
373/676: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/677: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/678: clf()
373/679: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/680: ch.synth_lo.frequency=750e6+300e3
373/681: ch.start_stream(stream_time=10,dont_ask=1)
373/682: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/683: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/684: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/685: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/686: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/687: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/688: ch.start_stream(stream_time=10,dont_ask=1)
373/689: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/690: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/691: ch.synth_lo.frequency=750e6+300e3
373/692: ch.start_stream(stream_time=10,dont_ask=1)
373/693: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/694: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/695: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/696: ch.output_atten.att
373/697: ch.output_atten.att=4
373/698: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/699: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/700: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/701: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**10; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/702: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/703: ch.start_stream(stream_time=10,dont_ask=1)
373/704: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/705: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/706: ch.synth_lo.frequency=750e6+300e3
373/707: ch.start_stream(stream_time=10,dont_ask=1)
373/708: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/709: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/710: fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/711: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/712: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/713: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/714: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/715: ch.start_stream(stream_time=10,dont_ask=1)
373/716: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/717: gca().lines.pop(-1)
373/718: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/719: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/720: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/721: figure()
373/722:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/723: figure()
373/724: plot freqs,amps,'o'
373/725: kids
373/726: ama
373/727: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/728:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/729: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/730: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/731:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/732: clf()
373/733: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**4; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/734: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/735:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/736: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/737: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/738:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/739: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**2; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/740: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/741:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/742: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/743: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/744:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/745: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**3; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/746: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/747: ch.start_stream(stream_time=10,dont_ask=1)
373/748: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/749: figure()
373/750: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/751: ch.synth_lo.frequency=750e6+300e3
373/752: ch.start_stream(stream_time=10,dont_ask=1)
373/753: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/754: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/755: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/756: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/757:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/758:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/759: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/760: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/761: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/762:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/763: clf()
373/764: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/765: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/766:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/767:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/768: reload(fitting)
373/769: ch.start_stream(stream_time=10,dont_ask=1)
373/770: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/771: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/772: ch.synth_lo.frequency=750e6+300e3
373/773: ch.start_stream(stream_time=10,dont_ask=1)
373/774: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/775: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/776: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/777: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/778: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/779:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/780: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/781: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/782:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/783: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/784:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/785: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/786: ch.start_stream(stream_time=10,dont_ask=1)
373/787: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/788: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/789: ch.synth_lo.frequency=750e6+300e3
373/790: ch.start_stream(stream_time=10,dont_ask=1)
373/791: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/792: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/793: ch.input_atten.att
373/794: ch.input_atten.att=15
373/795: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/796: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/797:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/798: ch.input_atten.att=14
373/799: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/800: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/801: ch.output_atten.att
373/802: ch.output_atten.att=1
373/803: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/804:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'cx')
    plot(ff,20*log10(abs(fit)),'c-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/805: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/806: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/807: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/808: ch.start_stream(stream_time=10,dont_ask=1)
373/809: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/810: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/811: ch.synth_lo.frequency=750e6+300e3
373/812: ch.start_stream(stream_time=10,dont_ask=1)
373/813: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/814: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/815: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/816: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/817:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/818: ch.input_atten.att=13
373/819: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/820: ch.output_atten.att=3
373/821: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/822: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/823:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/824: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/825: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/826:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/827: ch.start_stream(stream_time=10,dont_ask=1)
373/828: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/829: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/830: ch.synth_lo.frequency=750e6+300e3
373/831: ch.start_stream(stream_time=10,dont_ask=1)
373/832: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=244,down_lim=160)
373/833: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/834: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/835: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100,sweep_span=35e3)
373/836: clf()
373/837:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'mx')
    plot(ff,20*log10(abs(fit)),'m-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/838: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/839: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100,sweep_span=35e3)
373/840:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'cx')
    plot(ff,20*log10(abs(fit)),'c-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/841: ch.start_stream(stream_time=10,dont_ask=1)
373/842: figure()
373/843: plot( linspace(0,244,len(KIDson['K000']['psd'])),mean([KIDson['K%03d'%k]['psd'] for k in range(len(freqs))],axis=0))
373/844: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=210,down_lim=200)
373/845: clf()
373/846: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/847: ch.synth_lo.frequency=750e6+300e3
373/848: ch.start_stream(stream_time=10,dont_ask=1)
373/849: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=210,down_lim=200)
373/850: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/851: clf()
373/852: plot( linspace(0,244,len(KIDson['K000']['psd'])),mean([KIDson['K%03d'%k]['psd'] for k in range(len(freqs[:50]))],axis=0))
373/853: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/854: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/855: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/856: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/857: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/858: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/859: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 100,sweep_span=35e3)
373/860:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/861: ch.input_atten.att=14
373/862: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/863:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'cx')
    plot(ff,20*log10(abs(fit)),'c-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/864: kids = array([ch.sweep.rf_freqs[j][nanargmax(abs(gradient(ch.sweep.data[j]) ))] for j in range(len(freqs))] ); change_toneslist_values.change_toneslist_freqs('/home/muscat/live_toneslist.toneslist',kids,'/home/muscat/live_toneslist.toneslist'); change_toneslist_values.change_freqsfile_freqs('/home/muscat/live_freqsfile.txt',kids,'/home/muscat/live_freqsfile.txt'); ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/865: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/866:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/867: ch.start_stream(stream_time=10,dont_ask=1)
373/868: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=210,down_lim=200)
373/869: figure()
373/870: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'o')
373/871: ch.synth_lo.frequency=750e6+300e3
373/872: ch.start_stream(stream_time=10,dont_ask=1)
373/873: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/874: KIDson = pcp.scripts._psd_plot_functions.get_KID_data(['K%03d'%k for k in range(len(freqs))], [ch.sweep.dirfile.name, ch.current_dirfile.name], current_channel=False,up_lim=210,down_lim=200)
373/875: plot(freqs,array([KIDson['K%03d'%k]['psd_level'] for k in range(len(freqs))]),'x')
373/876: ff,aa,pp =  genfromtxt('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',unpack=True)
373/877: kk,ff,aa,pp,ii,qq,iqiq =  genfromtxt('/home/muscat/Toneslist-md-e-a-beammap-02-rubber_cement-dark-found.txt',unpack=True)
373/878: figure()
373/879: plot ff,ff,'o'
373/880: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=350e3)
373/881: figure()
373/882:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/883: reload(fitting)
373/884:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/885: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/886:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/887: reload(fitting)
373/888:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/889: reload(fitting)
373/890:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/891: clf()
373/892: reload(fitting)
373/893:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/894: reload(fitting)re
373/895: reload(fitting)re
373/896: reload(fitting)
373/897:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/898: reload(fitting)
373/899:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/900: reload(fitting)
373/901:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/902: reload(fitting)
373/903:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/904: reload(fitting)
373/905:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/906: reload(fitting)
373/907:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/908: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/909: clf()
373/910:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/911: type(None) is NoneType
373/912: type(None)
373/913: type(None) is Type(None)
373/914: type(None) is type(None)
373/915: ch.input_atten.att
373/916: ch.output_atten.att
373/917: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/918: ch.input_atten.att=14.25
373/919: ch.output_atten.att=2.75
373/920: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/921:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/922: reload(fitting)
373/923:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/924: reload(fitting)
373/925:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/926: reload(fitting)
373/927:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/928: reload(fitting)
373/929:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/930:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'kx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/931: reload(fitting)
373/932:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'kx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/933: reload(fitting)
373/934:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'kx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/935: finite = np.isfinite(zz)
373/936: clf()
373/937: plot abs(zz)
373/938: weights = np.abs(np.gradient(z))[finite]
373/939: weights = np.abs(np.gradient(zz))[finite]
373/940: plot weights
373/941: figure()
373/942: plot log(weights)
373/943: plot( 1./( 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max()) )[finite])
373/944:  1./( 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max()) )[finite])
373/945:  1./( 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max()) )[finite]
373/946: ( 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max()) )[finite]
373/947: 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max())
373/948: 1-(abs(zz)-abs(zz).min())
373/949: reload(fitting)
373/950: z0=zz
373/951:
weights = 1./( 1-(abs(z0[finite])-abs(z0[finite]).min()) / 
                     ((abs(z0[finite])-abs(z0[finite]).min()).max()) )[finite]
373/952: reload(fitting)
373/953:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/954: plot( 1./( 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max()) ))
373/955: clf()
373/956: plot( 1./( 1-(abs(zz)-abs(zz).min()) / ((abs(zz)-abs(zz).min()).max()) ))
373/957: plot( 1./( 1-(abs(zz[finite])-abs(zz[finite]).min()) / ((abs(zz[finite])-abs(zz[finite]).min()).max()) ))
373/958: plot( ( 1-(abs(zz[finite])-abs(zz[finite]).min()) / ((abs(zz[finite])-abs(zz[finite]).min()).max()) ))
373/959: plot( 1./((abs(zz[finite])-abs(zz[finite]).min()) / ((abs(zz[finite])-abs(zz[finite]).min()).max()) ))
373/960: clf()
373/961: plot( 1./((abs(zz[finite])-abs(zz[finite]).min()) / ((abs(zz[finite])-abs(zz[finite]).min()).max()) ))
373/962: plot( log10(1./((abs(zz[finite])-abs(zz[finite]).min()) / ((abs(zz[finite])-abs(zz[finite]).min()).max()) )))
373/963: reload(fitting)
373/964:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/965: reload(fitting)
373/966:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/967:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/968: reload(fitting)
373/969:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/970: reload(fitting)
373/971:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/972: reload(fitting)
373/973:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/974: reload(fitting)
373/975:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/976:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/977: reload(fitting)
373/978:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/979: reload(fitting)
373/980:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/981: finite = np.isfinite(zz)
373/982: clf()
373/983: plot(abs(zz))
373/984: z=zz
373/985: rot = np.mean(np.unwrap(np.angle([z[finite][0],z[finite][-1]])))
373/986: z0 = z*np.exp(-1j*rot)
373/987: r      = fitting.NonlinearResonatorModel(sweep_direction='up')
373/988: f=ff
373/989: guess  = r.guess(z0[finite],f=f[finite])
373/990: zw = abs(z0[finite]); zw-=zw.min(); zw/=zw.max()
373/991: figure()
373/992: plot zw
373/993: weights = np.log10(1. / zw )
373/994: ploit weights
373/995: plot weights
373/996: clf()
373/997:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/998: reload(fitting)
373/999:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1000: figure()
373/1001: plot weights
373/1002: plot weights+1
373/1003: plot (weights+1**2)
373/1004: plot ((weights+1)**2)
373/1005: RE
373/1006: reload(fitting)
373/1007:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1008: reload(fitting)
373/1009:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'kx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1010: reload(fitting)
373/1011: reload(fitting)
373/1012:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'kx')
    plot(ff,20*log10(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1013: reload(fitting)
373/1014:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'bx')
    plot(ff,20*log10(abs(fit)),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1015: log10(1)
373/1016: reload(fitting)
373/1017: log10(1)
373/1018: reload(fitting)
373/1019:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'rx')
    plot(ff,20*log10(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1020: clf()]
373/1021: clf()
373/1022:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(zz)),'rx')
    plot(ff,(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1023:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(gradient(zz))),'rx')
    plot(ff,(abs(gradient(fit))),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1024: reload(fitting)
373/1025:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(gradient(zz))),'bx')
    plot(ff,(abs(gradient(fit))),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1026:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(gradient(zz))),'b.')
    plot(ff,(abs(gradient(fit))),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1027: clf()
373/1028:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(gradient(zz))),'b.')
    plot(ff,(abs(gradient(fit))),'b-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1029:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(zz)),'r.')
    plot(ff,(abs(fit)),'r-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1030:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(zz)),'r.')
    plot(ff,(abs(fit)),'k-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1031:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(xx)),'r.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1032:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'r.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1033: clf()
373/1034:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'r.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1035: ch.input_atten.att=10
373/1036: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/1037: clf()
373/1038:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'r.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1039: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/1040: ch.output_atten.att=6
373/1041: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/1042: clf()
373/1043:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'r.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1044: ch.input_atten.att=12
373/1045: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/1046:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'b.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1047: reload(fitting)
373/1048:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'b.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1049:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'g.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1050: ch.input_atten.att=16
373/1051: ch.output_atten.att=3
373/1052: amax(amax(absolute([ch.roach_iface.read_ADC() for j in range(10)]),axis=2),axis=0)
373/1053: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
373/1054: figure()
373/1055: reload(fitting)
373/1056:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'g.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1057: reload(fitting)
373/1058: clf()
373/1059:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'g.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
373/1060: figure()
373/1061: fill_between?
373/1062: fill_betweenx?
373/1063: vlines(freqs.min(axis=0),100,200)
373/1064: vlines(freqs.min(axis=1),100,200)
373/1065: vlines(freqs,100,200)
373/1066: vlines(lo-freqs,100,200,color='r')
373/1067: clf()
373/1068: vlines(freqs-lo,100,200,color='r')
373/1069: vlines(-(freqs-lo),100,200,color='g')
373/1070: fp = freqs-lo
373/1071: fn = -(freqs-lo)
373/1072: fp = sorted(freqs-lo)
373/1073: fp
373/1074: fp = sort(freqs-lo)
373/1075: fp
373/1076: fn = sort(-(freqs-lo))
373/1077: clf()
373/1078: vlines(fp,100,200,color='g')
373/1079: vlines(fn,100,200,color='r')
373/1080: lo
373/1081: clf()]
373/1082: clf()
373/1083: vlines(fp+lo,100,200,color='g')
373/1084: vlines(fn+lo,100,200,color='r')
373/1085: vlines(fp+lo+200e3,100,200,color='k')
373/1086: vlines(fp+lo-200e3,100,200,color='k')
373/1087: vlines(fp+lo+200e3,100,200,color='k')
373/1088: vlines(fp+lo-200e3,100,200,color='k')
373/1089: fc=750e6
373/1090: ny=256e6
373/1091: ny-fc
373/1092: ny-(ny-fc)
373/1093: abs(ny-fc)
373/1094: ny-abs(ny-fc)
373/1095: ny-abs(ny-abs(ny-fc))
373/1096: ny-abs(ny-abs(ny-fc))+lo
373/1097: (ny-abs(ny-fc))+lo
373/1098: ny-abs(ny-abs(ny-fc))+lo
373/1099: ny-abs(ny-abs(ny-fc))-lo
373/1100: lo-238e6
373/1101: lo+238e6
373/1102: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac*0,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/1103: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
373/1104: ch.synth_lo.setFrequency(800e6)
373/1105: ch._initialise_synth_lo()
373/1106: ch._initialise_synth_lo()
373/1107: ch._initialise_synth_lo()
373/1108: ch._initialise_synth_lo()
373/1109: ch._initialise_synth_lo()
373/1110: ch._initialise_synth_lo()
373/1111: ch._initialise_synth_lo()
373/1112: ch._initialise_synth_lo()
374/1: run tcp_server.py
375/1: import tcp_server
376/1: import tcp_client
376/2: import tcp_client
377/1: import tcp_client
378/1: import tcp_server
378/2: import tcp_server
378/3: import tcp_server
379/1: import tcp_server
380/1: import tcp_server
381/1: import tcp_client
381/2: import tcp_client
381/3: reload(tcp_client)
381/4: reload(tcp_client)
381/5: reload(tcp_client)
381/6: reload(tcp_client)
381/7: tcp_client.sendMessage('Hello')
373/1113: a='OPEN 123\ 123.txt'
373/1114: a.split(' ')
373/1115: a='OPEN 123\ 123.txt'
373/1116: a.find(' ')
373/1117: a[:4]
373/1118: a[4:]
373/1119: a[4+1:]
373/1120: a.find('q')
373/1121: a[:-1]
373/1122:
try:
    assert False
except Exception as e:
    print e
373/1123:
try:
    assert False
except Exception as e:
    print 'Exception:',e
373/1124: e.message
373/1125: e.args
373/1126:
try:
    asser False, 'False'
except Exception as e:
    print 'Exception:',e
373/1127:
try:
    assert False, 'False'
except Exception as e:
    print 'Exception:',e
373/1128: e.message
373/1129: e.args
373/1130: e
373/1131: print e
373/1132: e.__repr__
373/1133: e.__repr__()
373/1134: raise ValueError, 'bad value'
373/1135:
try:
    raise ValueError, 'False'
except Exception as e:
    print 'Exception:',e
373/1136: '' is None
373/1137: e.args
373/1138: e.args[0]
373/1139: (,)[0]
373/1140:
try:
    raise ValueError
except Exception as e:
    print 'Exception:',e
373/1141: e.args
373/1142: e.args[0]
373/1143: e.__repr__()
373/1144: print '%s'%e
373/1145: print '%s'%e.__repr__()
378/4: import tcp_server
382/1: tcp_client.sendMessage('Hello')
384/1: import tcp_server
383/1: import tcp_client
383/2: tcp_client.sendOpen('filename')
386/1: import tcp_server
386/2: tcp_server.main()
387/1: tcp_server.main()
387/2: import tcp_server
387/3: __name__
388/1: import tcp_server
385/1: import tcp_client
385/2: tcp_client.sendOpen('filename')
389/1: import tcp_server
390/1: import tcp_client
390/2: tcp_client.sendOpen('filename')
391/1: import tcp_client
391/2: tcp_client.sendOpen('filename')
392/1: import tcp_server
391/3: tcp_client.sendOpen('filename')
393/1: tcp_client.sendOpen('filename')
393/2: import tcp_client
393/3: tcp_client.sendOpen('filename')
394/1: import tcp_client
394/2: tcp_client.sendOpen('filename')
394/3: tcp_client.sendOpen('filename')
395/1: import tcp_client
395/2: tcp_client.sendOpen('filename')
395/3: tcp_client.sendOpen('filename')
395/4: tcp_client.sendOpen('filename')
395/5: tcp_client.sendClose('filename')
395/6: tcp_client.sendClose()
396/1: tcp_client.sendClose()
396/2: import tcp_client
395/7: tcp_client.sendClose()
395/8: tcp_client.sendClose()
397/1: import tcp_client
397/2: tcp_client.sendClose()
396/3: run lib/tcp_server.py
398/1: import tcp_client
398/2: tcp_client.sendClose()
399/1: import tcp_client
400/1: run lib/tcp_server.py
399/2: tcp_client.sendOpen('test')
399/3: tcp_client.sendStart()
401/1: import tcp_client
401/2: tcp_client.sendStart()
402/1: run lib/tcp_server.py
401/3: tcp_client.sendStart()
401/4: reload(tcp_client)
401/5: tcp_client.sendStart()
403/1: run lib/tcp_server.py
401/6: tcp_client.sendStart()
404/1: import pcp
405/1: import pcp
405/2: name = ['phantom','clones','sith','hope','empire','jedi']
405/3: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]
405/4: %history -g -f ipythonhistory
405/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=10
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
405/6: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
405/7: from numpy import *
405/8: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True)
405/9: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
405/10: ac = amps
405/11: wg=1.0
405/12: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
405/13: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
405/14:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'g.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
405/15: import fitting
405/16: from matplotlib.pyplot import *; ion()
405/17:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,(abs(fit)),'k-')
    plot(ff,(abs(zz)),'g.')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
405/18: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
405/19:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
405/20: a0=array([])
405/21:
for k,(ff,zz) in enumerate(zip(ch.sweep.rf_freqs,ch.sweep.data)):
    fit,params,guess=fitting.fit_nonlinear_resonator(ff,zz,method='least_squares')
    plot(ff,20*log10(abs(zz)),'gx')
    plot(ff,20*log10(abs(fit)),'g-')
    print k,params['a'].value,round(params['Qi_dummy'].value),round(params['Qc_dummy'].value),round(params['Qe_imag'].value)
    a0=np.concatenate([a0,[params['a'].value]])
405/22: ch.start_stream()
405/23: ch.stop_stream()
405/24: ch.start_stream()
405/25: ch.stop_stream()
403/2: run lib/tcp_server.py
406/1: run lib/tcp_server.py
401/7: tcp_client.sendStart()
401/8: tcp_client.sendOpen('obsnum')
406/2: import tcp_server; server = tcp_server.muscatTCSServer()
406/3: import tcp_server; server = tcp_server.muscatTCSServer()
406/4: import tcp_server; server = tcp_server.muscatTCSServer()
407/1: import tcp_server; server = tcp_server.muscatTCSServer()
401/9: tcp_client.sendOpen('obsnum')
407/2: s= 'OPEN 123456 1 1 "Test Source" "ON"'
407/3: import csv
407/4: r=csv.reader(s)
407/5: r
407/6: print r
407/7: csv.reader?
407/8: csv.reader[0]
407/9: row=csv.reader[0]
407/10: r=csv.reader(s)
407/11: row=r[0]
407/12: r
407/13: i for i in r
407/14: [i for i in r]
407/15: r=csv.reader(s,delimter=' ')
407/16: r=csv.reader(s,delimiter=' ')
407/17: [i for i in r]
407/18: r4
407/19: r
407/20: print r
407/21: r.dialect
407/22: r.line_num
407/23: r.line_num=0
407/24: r=csv.reader(s,delimiter=' ')
407/25: s
407/26: r=csv.reader(s,delimiter=' ',newline='\n')
407/27: r=csv.reader(s,delimiter=' ')
407/28: [i for i in r]
407/29: s
407/30: r=csv.reader(s,delimiter=' ')
407/31: r
407/32: r.next
407/33: r.next()
407/34: r.next()
407/35: r.next()
407/36: r.next()
407/37: r.next()
407/38: r.next()
407/39:
for row in r:
    print r
407/40: r=csv.reader(s,delimiter=' ')
407/41:
for row in r:
    print r
407/42: r=csv.reader(s,delimiter=' ')
407/43: for row in r; print row
407/44: for row in r: print row
407/45: import shlex
407/46: shlex.split(r)
407/47: shlex.split(s)
407/48: r=csv.reader([s],delimiter=' ')
407/49: r
407/50: for row in r: print row
407/51: row
407/52: cmd=row[0]
407/53: cmd.lower()
407/54: cmd=row.pop(0)
407/55: cmd
407/56: cmdrow
407/57: row
407/58: row.pop(0)
407/59: row
407/60: row.pop(0)
407/61: row
407/62: row.pop(0)
407/63: row
407/64: row.pop(0)
407/65: row
407/66: row.pop(0)
407/67: row
407/68: reload(tcp_client)
407/69: reload(tcp_server)
407/70: tcp_server.muscatTCSServer()
401/10: reload(tcp_client)
401/11: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
407/71: reload(tcp_server)
407/72: tcp_server.muscatTCSServer()
407/73: reload(tcp_server)
407/74: reload(tcp_server)
408/1: import tcp_server; server = tcp_server.muscatTCSServer()
401/12: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
408/2: reload(tcp_server)
408/3: import tcp_server; server = tcp_server.muscatTCSServer()
409/1: import tcp_server; server = tcp_server.muscatTCSServer()
401/13: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
409/2: [1]
409/3: [1][1:]
409/4: reload(tcp_server)
410/1: reload(tcp_server)
410/2: import tcp_server; server = tcp_server.muscatTCSServer()
401/14: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
411/1: import tcp_client
412/1: import tcp_server; server = tcp_server.muscatTCSServer()
411/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
413/1: import tcp_server; server = tcp_server.muscatTCSServer()
411/3: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
411/4: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
411/5: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
413/2: import tcp_server; server = tcp_server.muscatTCSServer()
414/1: import tcp_server; server = tcp_server.muscatTCSServer()
415/1: import tcp_client
415/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
416/1: import tcp_client
416/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
416/3: import tcp_server; server = tcp_server.muscatTCSServer()
417/1: import tcp_client
417/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
418/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/3: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
418/2: import tcp_server; server = tcp_server.muscatTCSServer()
419/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/4: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
405/26: timwe
405/27: time
405/28: time.asctime()
405/29: time.clock?
405/30: time.clock()
405/31: time.clock()
405/32: time.clock()
405/33: time.clock()
405/34: time.clock()
405/35: time.clock()
405/36: time.clock()
405/37: time.clock()
405/38: time.time()
405/39: time.localtime()
405/40: import datetime
405/41: datetime.datetime.utcnow().isoformat()
405/42: d=datetime.datetime.utcnow()
405/43: d.utcfromtimestamp()
405/44: d.utcfromtimestamp(1)
405/45: d.utcfromtimestamp(0.1)
405/46: d.utcfromtimestamp(0.0000001)
405/47: d.utcfromtimestamp(0.000001)
420/1: import tcp_server; server = tcp_server.muscatTCSServer()
420/2: import tcp_server; server = tcp_server.muscatTCSServer()
421/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/5: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
417/6: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
422/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/7: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'Program')
417/8: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
423/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/9: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
424/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/10: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/11: str('NameError("global name \'obspgm\' is not defined"')
417/12: '\"'
417/13: '\" 123"abc"\"'
417/14: eval '\" 123"abc"\"'
417/15: eval '\" 123\"abc\"\"'
417/16: a= '"123"123'
417/17: a.strip('"')
417/18: a.translate(None,['"'])
417/19: a.translate(None,'"')
417/20: a.translate('\'','"')
417/21: a.translate?
417/22: a
417/23: a.replace?
417/24: a.replace('"','\'')
425/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/25: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
425/2: reload(tcp_server)
426/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/26: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
427/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/27: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
428/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/28: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/29: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
428/2: import tcp_server; server = tcp_server.muscatTCSServer()
429/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/30: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/31: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
430/1: import tcp_server; server = tcp_server.muscatTCSServer()
417/32: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/33: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/34: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/35: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/36: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/37: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/38: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'ON')
417/39: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'OFF')
431/1: import tcp_client
432/1: import tcp_server; server = tcp_server.muscatTCSServer()
431/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'OFF')
433/1: import tcp_server; server = tcp_server.muscatTCSServer()
434/1: import tcp_client
434/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
434/3: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
434/4: bin(0x1)
434/5: bin(0x2)
434/6: bin(0x4)
434/7: bin(0x8)
434/8: bin(0x10)
434/9: bin(0x100)
434/10: bin(0x20)
434/11: bin(0x40)
434/12: bin(0x80)
434/13: bin(0x100)
435/1: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
435/2: import tcp_client
435/3: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
436/1: import tcp_server; server = tcp_server.muscatTCSServer()
436/2: import tcp_server; server = tcp_server.muscatTCSServer()
436/3: reload(tcp_server)
436/4: import tcp_server; server = tcp_server.muscatTCSServer()
435/4: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
437/1: import tcp_server; server = tcp_server.muscatTCSServer()
435/5: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
435/6: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
438/1: import tcp_server; server = tcp_server.muscatTCSServer()
438/2: import tcp_server; server = tcp_server.muscatTCSServer()
435/7: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
439/1: import tcp_server; server = tcp_server.muscatTCSServer()
435/8: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'test')
435/9: tcp_client.sendOpen(123,1,1,'Hello Scan Name', '123')
435/10: tcp_client.sendOpen(123,1,1,'Hello Scan Name', '123')
441/1: import pcp
442/1: import tcp_server; server = tcp_server.muscatTCSServer()
443/1: import tcp_client
443/2: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'MAP')
441/2: !ls /dev
444/1: import pcp
444/2: name = ['phantom','clones','sith','hope','empire','jedi']
444/3: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting;
444/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]
444/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=14
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
444/6: freqs_file = '/home/muscat/live_freqsfile.txt'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True); ac=amps;wg=1.0
444/7: ch.toneslist.tonelistfile = '/home/muscat/live_toneslist.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = 750e6; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
444/8: ch.sweep
444/9: ch.sweep.dirfile
442/2: import tcp_server; server = tcp_server.muscatTCSServer()
445/1: import tcp_server; server = tcp_server.muscatTCSServer()
443/3: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'MAP')
444/10: raise ValueError, '111' as e
444/11: try:raise ValueError, '111' as e
444/12:
try:
    raise ValueError, '123'
except Exception as e:
    pass
444/13:
try:
    raise ValueError, '123'
except Exception as e:
    rasie e
444/14:
try:
    raise ValueError, '123'
except Exception as e:
    raise e
446/1: import tcp_server; server = tcp_server.muscatTCSServer()
447/1: import tcp_server; server = tcp_server.muscatTCSServer()
443/4: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'MAP')
448/1: import tcp_server; server = tcp_server.muscatTCSServer()
443/5: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'MAP')
449/1: import tcp_server; server = tcp_server.muscatTCSServer()
443/6: tcp_client.sendOpen(123,1,1,'Hello Scan Name', 'MAP')
444/15:
#for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=14
    ch.output_atten.att=10
    lo=750e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
444/16: In[15]
444/17: ch.stop_stream()
444/18: ch.start_stream(dontask=True)
444/19: ch.start_stream(dont_ask=True)
444/20: ch.stop_stream()
444/21: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
444/22: ch.start_stream(dont_ask=True)
444/23: ch.stop_stream()
444/24: ch.current_dirfile
444/25: ch.current_dirfile.name
444/26: import os
444/27: os.path
444/28: os.mkdir('/data1/obs')
450/1: import tcp_server; server = tcp_server.muscatTCSServer()
450/2: import tcp_server; server = tcp_server.muscatTCSServer()
450/3: import tcp_server; server = tcp_server.muscatTCSServer()
450/4: import tcp_server; server = tcp_server.muscatTCSServer()
451/1: import tcp_server; server = tcp_server.muscatTCSServer()
452/1: import tcp_client
453/1: import tcp_server; server = tcp_server.muscatTCSServer()
454/1: import tcp_server; server = tcp_server.muscatTCSServer()
452/2: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
455/1: import tcp_client
456/1: import tcp_server; server = tcp_server.muscatTCSServer()
455/2: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
455/3: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
457/1: import tcp_server; server = tcp_server.muscatTCSServer()
458/1: import tcp_server; server = tcp_server.muscatTCSServer()
455/4: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
459/1: import tcp_server; server = tcp_server.muscatTCSServer()
455/5: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
460/1: import tcp_client
461/1: import tcp_server; server = tcp_server.muscatTCSServer()
460/2: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
460/3: tcp_client.sendClose()
462/1: import tcp_client
462/2: import tcp_server; server = tcp_server.muscatTCSServer()
460/4: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
463/1: import tcp_server; server = tcp_server.muscatTCSServer()
460/5: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
460/6: tcp_client.sendClose()
463/2: tcp_server.datetime
464/1: import tcp_server; server = tcp_server.muscatTCSServer()
460/7: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
465/1: import tcp_server; server = tcp_server.muscatTCSServer()
460/8: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
460/9: tcp_client.sendClose()
466/1: import tcp_server; server = tcp_server.muscatTCSServer()
467/1: import tcp_server; server = tcp_server.muscatTCSServer()
467/2: import tcp_server; server = tcp_server.muscatTCSServer()
468/1: import tcp_client
468/2: tcp_client.sendStart()
469/1: import tcp_client
470/1: import tcp_server; server = tcp_server.muscatTCSServer()
469/2: tcp_client.sendStart()
471/1: import tcp_server; server = tcp_server.muscatTCSServer()
471/2: reload(tcp_server)
471/3: import tcp_server; server = tcp_server.muscatTCSServer()
469/3: tcp_client.sendStart()
469/4: tcp_client.sendStart()
469/5: tcp_client.sendStop()
469/6: tcp_client.sendStop()
469/7: tcp_client.sendStop()
469/8: tcp_client.sendClose()
469/9: tcp_client.sendClose()
469/10: tcp_client.sendOpen()
469/11: tcp_client.sendOpen(1,1,1,'TestSource1', 'MAP')
469/12: tcp_client.sendStart()
469/13: tcp_client.sendStart()
469/14: tcp_client.sendStop()
469/15: tcp_client.sendStop()
469/16: tcp_client.sendClose()
469/17: tcp_client.sendStop()
469/18: tcp_client.sendOpen(2,1,1,'TestSource1', 'MAP')
469/19: tcp_client.sendStop()
469/20: tcp_client.sendClose()
472/1: import tcp_server; server = tcp_server.muscatTCSServer()
473/1: import tcp_server; server = tcp_server.muscatTCSServer()
474/1: import tcp_server; server = tcp_server.muscatTCSServer()
475/1: import tcp_server; server = tcp_server.muscatTCSServer()
476/1: import tcp_server; server = tcp_server.muscatTCSServer()
469/21: tcp_client.sendStop()
469/22: tcp_client.sendStop()[0]
469/23: tcp_client.sendStop()[0]
469/24: tcp_client.sendStop()
469/25: tcp_client.sendStop()
469/26: tcp_client.sendStop()
469/27: bool("")
469/28: bool('\x00')
477/1: len('\x00')
478/1: import tcp_server; server = tcp_server.muscatTCSServer()
479/1: import tcp_server; server = tcp_server.muscatTCSServer()
480/1: import tcp_server; server = tcp_server.muscatTCSServer()
481/1: import tcp_server; server = tcp_server.muscatTCSServer()
482/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/2: int('\x00')
477/3: chr('\x00')
477/4: chr(0)
477/5: '%s'%(chr(0))
483/1: import tcp_server; server = tcp_server.muscatTCSServer()
484/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/6: import tcp_client
477/7: tcp_client.sendClose()
477/8: s=_
477/9: s[0]
477/10:
import socket
import sys
import shlex
import datetime
from muscat_flags import *
import muscat_control
import threading
import Queue
477/11: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
477/12: sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
477/13: sock.bind(('192.168.0.1',10002))
477/14: sock.listen(10)
477/15:
while True:
    connection, client_address = sock.accept()
    while True:
        data = connection.recv(1024)
        print  'received "%s"' % data
        if len(data)==0:
                        break
        connection.send(data)
485/1: import tcp_server; server = tcp_server.muscatTCSServer()
485/2: import tcp_server; server = tcp_server.muscatTCSServer()
486/1: import tcp_server; server = tcp_server.muscatTCSServer()
487/1: import tcp_server; server = tcp_server.muscatTCSServer()
488/1: import tcp_server; server = tcp_server.muscatTCSServer()
489/1: import tcp_server; server = tcp_server.muscatTCSServer()
490/1: import tcp_server; server = tcp_server.muscatTCSServer()
491/1: import tcp_server; server = tcp_server.muscatTCSServer()
491/2: import tcp_server; server = tcp_server.muscatTCSServer()
492/1: import tcp_server; server = tcp_server.muscatTCSServer()
493/1: import tcp_server; server = tcp_server.muscatTCSServer()
494/1: import tcp_server; server = tcp_server.muscatTCSServer()
495/1: import tcp_server; server = tcp_server.muscatTCSServer()
496/1: import tcp_server; server = tcp_server.muscatTCSServer()
497/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/16: import tcp_client
477/17: tcp_client.sendClose()
477/18: tcp_client.sendOpen(5,1,1,'TestSource1', 'On')
477/19: tcp_client.sendClose()
477/20: tcp_client.sendOpen(5,1,2,'TestSource1', 'On')
477/21: tcp_client.sendClose()
477/22: os
477/23: import os
477/24: os.path.join('1','2','3')
498/1: import tcp_server; server = tcp_server.muscatTCSServer()
498/2: import tcp_server; server = tcp_server.muscatTCSServer()
477/25: tcp_client.sendOpen(6,1,2,'TestSource1', 'On')
477/26: tcp_client.sendClose()
477/27: tcp_client.sendOpen(6,1,3,'TestSource1', 'On')
477/28: tcp_client.sendClose()
477/29: tcp_client.sendOpen(6,1,3,'TestSource1', 'Map')
477/30: tcp_client.sendClose()
477/31: tcp_client.sendOpen(6,1,4,'TestSource1', 'Map')
477/32: tcp_client.sendClose()
499/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/33: tcp_client.sendOpen(1,0,1,'TestSource1', 'Map')
477/34: tcp_client.sendClose()
477/35: tcp_client.sendOpen(1,0,2,'TestSource1', 'Map')
477/36: tcp_client.sendClose()
500/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/37: tcp_client.sendOpen(1,0,1,'TestSource1', 'Map')
477/38: tcp_client.sendClose()
501/1: import tcp_server; server = tcp_server.muscatTCSServer()
502/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/39: tcp_client.sendClose()
477/40: tcp_client.sendOpen(1,0,1,'TestSource1', 'Map')
477/41: tcp_client.sendClose()
477/42: os.makedirs
477/43: os.makedirs?
503/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/44: os.mkdir?
477/45: tcp_client.sendOpen(1,0,1,'TestSource1', 'Map')
477/46: tcp_client.sendClose()
504/1: import tcp_server; server = tcp_server.muscatTCSServer()
505/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/47: tcp_client.sendOpen(1,0,1,'TestSource1', 'Map')
477/48: tcp_client.sendClose()
477/49: tcp_client.sendOpen(1,0,2,'TestSource1', 'Map')
477/50: tcp_client.sendClose()
506/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/51: tcp_client.sendOpen(2,0,2,'TestSource1', 'Skydip')
507/1: import tcp_server; server = tcp_server.muscatTCSServer()
477/52: tcp_client.sendOpen(2,0,2,'TestSource1', 'Skydip')
477/53: tcp_client.sendOpen(2,0,2,'TestSource1', 'Map')
477/54: tcp_client.sendClose()
477/55: tcp_client.sendOpen(2,0,2,'TestSource1', 'Map')
477/56: tcp_client.sendClose()
477/57: tcp_client.sendOpen(2,0,2,'TestSource1', 'SkyDip')
508/1: import tcp_server; server = tcp_server.muscatTCSServer()
509/1: import tcp_server; server = tcp_server.muscatTCSServer()
511/1: a='123,txt'
511/2: a[-4:]
511/3: bool(True and 0)
511/4: bool(True and 1)
511/5: True an not(0)
511/6: True and not(0)
511/7: import toneslist_tools
511/8: import toneslist_tools
511/9: import toneslist_tools
511/10: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
511/11: reload(toneslist_tools)
511/12: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
511/13: reload(toneslist_tools)
511/14: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
511/15: pwd
511/16: ls
511/17: ls
511/18: pwd
511/19: cd ..
511/20: ls
511/21: wd
512/1: pwd
512/2: ls
512/3: import toneslist_tools
512/4: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/5: ls
512/6: reload(toneslist_tools)
512/7: ls
512/8: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/9: reload(toneslist_tools)
512/10: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/11: reload(toneslist_tools)
512/12: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/13: reload(toneslist_tools)
512/14: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/15: ls
512/16: reload(toneslist_tools)
512/17: ls
512/18: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/19: from numpy import genfromtxt
512/20: genfromtxt?
512/21: reload(toneslist_tools)
512/22: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/23: reload(toneslist_tools)
512/24: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/25: reload(toneslist_tools)
512/26: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/27: reload(toneslist_tools)
512/28: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/29: reload(toneslist_tools)
512/30: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/31: reload(toneslist_tools)
512/32: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/33: dtype("S10, f4, d4, d4, d4")
512/34: from numpy import *
512/35: dtype("S10, f4, d4, d4, d4")
512/36: dtype("S10, f4, i4, i4, i4")
512/37: dtype("S10, f, i, ?, ?")
512/38: reload(toneslist_tools)
512/39: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/40: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/41: reload(toneslist_tools)
512/42: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/43: reload(toneslist_tools)
512/44: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/45: dtype("S4, f, i, ?, ?")
512/46: reload(toneslist_tools)
512/47: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/48:
name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=True,
                                                dtype="S4, f, i, ?, ?")
512/49: infile 'TonesList_WTLSNOISE-Al5-1'
512/50: infile= 'TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt'
512/51:

    tfilename = infile[:-4]+'.toneslist'
    ffilename = infile[:-4]+'.freqsfile'
512/52:
    tfilename = infile[:-4]+'.toneslist'
    ffilename = infile[:-4]+'.freqsfile'
512/53:
    name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=True,
                                                dtype="S4, f, i, ?, ?")
512/54:
    name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=True,
                                                dtype="S, f, i, ?, ?")
512/55:
    name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=True,
                                                dtype="S,f,i,?,?")
512/56:
    name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=True,
                                               dtype=("S,f,i,?,?"))
512/57:
    name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=1,
                                               dtype=("S,f,i,?,?"))
512/58:
    name,freqs,offset_att,All,none = genfromtxt(infile,
                                                unpack=True,
                                                skip_header=1,
                                              dtype=("S4, f, i, ?, ?"))
512/59:     name,freqs,offset_att,All,none = genfromtxt(infile, unpack=True, skip_header=1,delimiter='\t', dtype=("S4, f, i, ?, ?"))
512/60:     name,freqs,offset_att,All,none = genfromtxt(infile, unpack=True, skip_header=1,delimiter='\r\n', dtype=("S4, f, i, ?, ?"))
512/61:     name,freqs,offset_att,All,none = genfromtxt(infile, unpack=True, skip_header=1,delimiter='\r\n', dtype="S4, f, i, ?, ?")
512/62:     name,freqs,offset_att,All,none = genfromtxt(infile, unpack=True, skip_header=1,delimiter='\t', dtype="S4, f, i, ?, ?")
512/63: name,freqs,offset_att,All,none = genfromtxt(infile, skip_header=1,delimiter='\t', dtype="S4, f, i, ?, ?")
512/64: name,freqs,offset_att,All,none = genfromtxt(infile, skip_header=1,delimiter='\t', dtype="S4, f, i, ?, ?")
512/65:     name,freqs,offset_att,All,none = genfromtxt(infile, unpack=True, skip_header=1,delimiter='\t', dtype="S4, f, i, ?, ?")
512/66: reload(toneslist_tools)
512/67:     name,freqs,offset_att,All,none = genfromtxt(infile, unpack=True, skip_header=1,delimiter='\t', dtype="S4, f, i, ?, ?")
512/68: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/69: bool('0')
512/70: bool(int('0'))
512/71: reload(toneslist_tools)
512/72: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/73: reload(toneslist_tools)
512/74: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/75: reload(toneslist_tools)
512/76: reload(toneslist_tools)
512/77: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/78: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
512/79: reload(toneslist_tools)
512/80: toneslist_tools.convert_automeasure_toneslist('TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.txt')
513/1: import pcp
513/2: name = ['phantom','clones','sith','hope','empire','jedi']
513/3: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting;
513/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]
514/1: import pcp
514/2: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting;
514/3: name = ['sith']
514/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]
515/1: import pcp
515/2: from numpy import *; from matplotlib.pyplot import *; ion(); import fitting;
515/3: name = ['sith']
515/4: mc = pcp.mux_channel.muxChannelList(name); mclist = [eval('mc.'+mcname) for mcname in name]
515/5:
for ch in mclist:  
    pcp.scripts.set_muscat_init_synth(ch)
    ch.initialise_hardware()
    ch.roach_iface.initialise_fpga(force_reupload=1)
    ch.input_atten.att=14
    ch.output_atten.att=10
    lo=775e6
    ch.synth_lo.frequency=lo
    ch=mclist[2]
515/6: ch=mclist[0]
515/7: ch.toneslist.tonelistfile = '/home/muscat/cmbkid/TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = lo; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
515/8: freqs_file = '/home/muscat/cmbkid/TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.freqsfile'; freqs,amps,phases =  genfromtxt(freqs_file,unpack=True); ac=amps;wg=1.0
515/9: ch.toneslist.tonelistfile = '/home/muscat/cmbkid/TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = lo; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
515/10: 775e6-1165680681
515/11: 1165680681+786045045.000000
515/12: 1951725726.0/2
515/13: lo=975e6#
515/14: lo=975e6
515/15: ch.toneslist.tonelistfile = '/home/muscat/cmbkid/TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = lo; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
515/16: 32768/7158.308027119418
515/17: wg=4.5
515/18: ch.toneslist.tonelistfile = '/home/muscat/cmbkid/TonesList_WTLSNOISE-Al5-1-devA1_90mK_09102019.toneslist'; ch.toneslist._bandwidth=512e6;ch.toneslist.load_tonelist(); ch.toneslist.bandwidth = 512e6; ch.toneslist.phases=phases; ch.toneslist.amp=ac; ch.toneslist.lo_freq = lo; ch.toneslist._update_frequencies(); ch.roach_iface.write_freqs_to_qdr(ch.toneslist.bb_freqs,wg*ac,phases,autoFullScale=False,dac_iq_phase=radians(0)*ones(len(freqs)),dac_iq_gain=ones(len(freqs))+1j*ones(len(freqs)),dds_iq_gain=(1+1j)*ones(len(freqs)),dds_iq_phase=radians(0)*ones(len(freqs)), dds_iq_offset = 0*ones(len(freqs)),dac_dither=False,dds_dither=False); fft_shift = 2**5; pcp.lib.lib_fpga.write_to_fpga_register(ch.roach_iface.fpga, { "fft_shift_reg": fft_shift - 1} , ch.roach_iface.firmware_reg_list,sleep_time =0.)
515/19: ch.toneslist.lo_freq
515/20: ch.synth_lo.frequency
515/21: ch.synth_lo.frequency=lo
515/22: ch.synth_lo.frequency
515/23: ch.sweep_lo(sweep_avgs=20,startidx=10,sweep_step = 500,sweep_span=450e3)
   1: history -g -f ipythonhistory
