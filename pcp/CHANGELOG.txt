# Changelog
This file will document and keep track of changes with each push to the master branch.

Put most recent commits at the top please!
--------------------------------------------------------------------------------
2019-12-05 [PB] - looking at merging muscat changes
  - lots of changes done by the muscat team - possibly too many to incorporate on a short timescale
  - some important/useful features that could be incorporated
    - iqcalibration
    - off resonance mode (just move the LO?) - is that ever useful? why not just add blind tone? maybe quicker?



--------------------------------------------------------------------------------
2019-12-04 [PB] - major additions continued

- beginning to implement scripts from superspec computer

- now have a amplitude correction ampcorr directory for each roach
  - ampcorr = dictionary of numpy arrays to easily combine them with np.prod([a for a in ampcorr.values()], axis = 0)
  - with given toneslist, connect to spec_analsyer and measure tone heights and save to file (this should be a standalone script)
  - script now in pcp.scripts.measure_ampcorr()

- added history to pcp.sweep, which will store previous sweep objects that can be used to handle tuning correctly

- added noise to roach2udp_spoof file (for testing only)

- tune_kids in mux_channel
     - runs a sweep -> find f0s -> rewrite tones -> sweep again

- change to sweep visualization code
  - modified the pcpInteractivePlot to accept a list of pcp.sweep objects and overplot as required
  - TODO: add legend to plots
          - color plots for different sweeps

- added explicit frequency -> tonename mapping to ensure correct ordering of sweep data
  - this fixed an issue with the ordering from going from the sweepdirfile to pcp.sweep.data

- add attenuations to metadata

TODO
- check order of data in sweeps
  - there might be an issue with the ordering from going from the sweepdirfile to pcp.sweep.data
  - the sweep data is good - the calcuation of the frequencies is off

- write the centre lo freq to the sweep dirfile

- need to write a tonename mapping to sweep file to extract the data correctly

- how to handle blind tones ?
  - can we add a "blind" flag somewhere?

- higher level functionality requirements
  - multiroach capabilities
    - sweeping/tuning kids
    - streaming

   - initialize all hardware - roaches, synths attenuators
   - finsh ampcorr - apply ampcorr to amps
   - tune powers - in script
     - sweep vs atten - fit all resonators and get att value for given "a" for all resonators -> tune_kids
  - tune powers all - in script

  - script to automate attenuation levels?
      - use spectrum analyser?
      - measure ADC input?

  - fix issues with dirfile stream writing - can't find any? have to debug on sspec machine
  - handle errors with hardware better - allow pcp to run for debugging purposes

- implement an interpolation table to have dff0 calculated from the phase relationship
  - need phase center and rotated -> need array of centers and rotation angles (from fits)
  - require an interpolation table for each tone with phi vs freq as a separate file
  - this should be do-able - not high priority right now

- fix invalid dirfile error when trying to close an invalid dirfile in set_active_dirfile

- how to visualise sweeps correctly
  - need to be able to store at least two sweeps for comparison - modify pcp.sweep object to store data
  - implement the ability to plot multiple sweeps (at least 2 to verify tuning) within pcpInteractivePlot

- can't currently change configuration easily
  - caused by relative imports and not being able to update in real time - can this be fixed?

- toneslist - check for duplicate names?

- have the ability to change the timespan programmatically?
  - set the timespan as an attribute to the muxChannel
  - requires the lib_dirfiles.append_dirfile_to_sourcefile to read the directory - not too bad

--------------------------------------------------------------------------------
2019-12-03 [PB] - major additions continued

- moved tonehistdir to data/tuning
  *** requires addition to filesys_config - see example ***

- added reload_scripts function to pcp.script for simple reloading of all scripts once changed

--------------------------------------------------------------------------------
2019-11-26 [PB] - major additions

- cleaned up mc.sweep_lo function
  - split into multiple functions that can be tested individually

- implement df conversion on the fly
  - derived fields are now added to the stream dirfiles upon creation
    - currently only amp, phi, and df are added. Plan will be to add phicr, dfphi (using interp table) in the near future
  - need to write functions to add/update the sweep cal data when starting a stream

  - cleaned up lib_dirfiles and the order of functions

  - added find_new_freqs to sweep_lo() function - if false, this function calculates the calc parameters

- plotting sweep functionality
    - added the pcpInteractivePlot class to the visualization.py
    - very basic for now; plots latest sweep data for each tone, can scroll quickly with arrow keys
    - need to add functionality

- add function to re-calculate and re-write cal data (saving old data as a backup)
    - this is now in the sweep object

- added a tonenames vs frequency mapping in all raw dirfiles
  - write tonenames, bb_freqs and lofreq to the format file of all stream files
    - this data is written in the mc.set_active_dirfile() method
  - the sweep files have this saved too

- simplified and cleaned up create_pcp_dirfile to only allow list of names to be given

- added option to copy sweep file as a symlink (now the default behavior)
  - this is favorable as the user can change the sweep and it will apply the changes to all dirfiles that reference it
  - zipping the dirfile will make a copy of the sweep file during compression (use zip -r pathtozip dirfilepath )
  - checked that the dirfile can be added appropriately and read in python

- save file with amps, phases, freqs in tonehistory file
  - where to save these files? in data/tonehistory
  - add toneslist.load_tonehistfile() function that can used to recreate a previous state
  - use pyyaml for simple reading into a python dictionary
  - file format YYYYMMDD_HHMMSS.tone file (yaml) format
  - added functions to read and write toneshistory file

--- Bug Fixes ---

- added a check to see if packets are streaming in writer_daemon.start_writing() function

  - it appeared that when streaming is paused, any data left in the queue and not a multiple of 'buffer_len_to_write' is
not written to disk. Fixed this by adding a 'last_iteration' flag that should save remaining data in the buffer when exiting
the writing while loop. Tested on mac with dummyroach.

 - fixed derived sweep files to have the same datetime stamp as the raw sweep file

 - handle effect of ctrl+c in sweep not getting to the end of the sweep where lo_freqs != toneslist.sweep_lo_freqs
  - fixed by noting how far through the loop and tracking those indexes through to the sweep dirfile
  % when writing sweep, lofreqs has a number of zeros at the end - is that intentional?

- sourcefile handling: now the sourcefile retains past entries and is not overwritten upon new instantiation of
muxchannel/restarting of pcp

--------------------------------------------------------------------------------
2019-10-13 [PB]
- Implementation of derived fields for easy plotting of df, amp, phase...etc.
  - after a sweep file is created, the sweep object has all the calibration data for all the tones
  - when creating a stream dirfile, create these derived fields using the last sweep available (or make option)
  - if no sweep exists, ensure that nans are written cleanly

- Currently, stream file creates dirfile and generates main fields - add option to include derived fields (default to true)

- Added functions to lib_dirfiles to write the derived raw fields
  - the df derived files require
- Also created a workaround function to modify the format file to correctly index arrays in the definition of derived fields

- when dirfile is created, all fields are created
- in pcp, if a sweep object is available when the file is created, then populate the

TODO
  - how to handle blind tones? probably just write the garbage?
  - make sure that sweep object has the correct fields defined
  - add this data to the stream dirfile if in use
  - fix bug with metadata fields when adding sweep to stream dirfiles

  - fix lib.lib_dirfiles list_fragments_in_dirfile function to account for multiple format entries
  - find a way to get namespace from fragments

  - figure out how to integrate blind tones correctly (i.e. in toneslist )

  - fix the create_pcp_dirfile function to deal with the following:
    - a directory in which to place a new dirfile
    - an existing dirfile
    - a path that is an existing dirfile, but has a filename_suffx

2019-10-11 [PB]
- Bug fix: python_timestamp wasn't being written to the file correctly with new datapacket_dict structure and sweep failed
  - fixed and tested with dummy roach

2019-10-06 [PB]
- Bug fix: excess packet loss observed when using > 300 tones. Narrowed down to pcp.lib.lib_datapackets.parse_datapacket_dict
function that took a long time when using a larger number of tones.
    - Fixed to implement more efficient parsing of the packet data into a state where it can be written to the dirfile
    - modified datapacket_dict structure to facilitate this improvement
    - comparison shows an improvement of 10^3 for new version.
    - Now dirfile writing is dominant timescale for writing a large number of tones to disk

2019-09-24 [PB]
- Cleaned up, and modified/improved logging implementation.
    - removed most of the now deprecated logging daemon code. All logging now relies on the external multiprocessing_logging module described below
    - implemented configuration of logging from configuration file.
        - [CONFIG FILE CHANGE]: major change to logging_config. See uploaded config_example.zip
    - provides pcp.logger as a convenient way to log interactively from the command line
    - modified the default log format to a TimedRotatingFileHandler to start a new log file every day at midnight
    - cleaned up doc strings + user documentation

2019-09-15 [PB]
- implemented the kst source file writer. Every time a new dirfile is created, the path is appended to a text file which is passed to kst
- note that the source file currently resets upon a new pcp import.

2019-03-11 - [PB]
- moved call of activate_pps from muxchannel to roach_iface (so that the code can run in dummy mode, without an fpga instance)

- datapacket loss issue
    - investigated and narrowed this down to an issue with thread priorities. When the write to dirfile
    function is called, it hogs the CPU causing the thread that is reading packets to stop, and miss packets
    - added a set of checks in both main _data_logger_main and _writer_thread_function to shout if a packet is lost
    - MAJOR CHANGE
        - replaced threading with multi-process implementation to have reader and writer be truly parallel
        - required some additional IPC, which is now implemented, and has passed preliminary testing
        - most importantly, in preliminary testing, the packet loss issue does appear to be have solved - needs checking on roach system
        - UI shouldn't have changed

- check/fix logging in daemon writer
    - added capability to log correctly from parallel processes. This required a new module to be installed (multiprocessing_logging)
    - simple "pip install multiprocessing_logging"
    - logging level of parallel processes can't currently be changed on the fly.
        - Instead, set the logging level pcp.set_log_level(level=logging.DEBUG) before instantiation of muxChannel object.
        - This isn't too bad, as any debugging will likely be known beforehand.

2019-03-07 22:05 [MB SR] ==================
-kidpy snap functions added
-activate pps added in lib_fpga
-windfreak bug fixed, now the switch between frequencies is faster, really faster

2019-02-27 21:31 [MB] ==================

Bug fixes:
  - read_from_fpga_register fixed and tested
  - Function getADC from lib_fpga now can read the I and Q signals from ADC.(the scale is right?)

Driver of Jose Miguel synthesizer added

2019-02-26 13:00 CST [PB] ==================

Bug fixes:
  - IMPORTANT: fixed bug in data slicing. Should now be extracting the correct values.
    - TODO: this brings up point of how to deal with a difference in tonelist + tones written (if they are different)? needs thought
  - Fixed bug with tone writing in lib_fpga when setting random phases (note that when writing dds_lut, phases are not randomised )

2019-02-20 18:00 CST [PB] ==================
- Bug fixes:
  - found the issue with datapacket parsing - now fixed
  - fixed BoundsError in sweep function

Tested roach @ UC from cold switch on - all appears to be working (not tested with resonators)


2019-02-12 16:00 CST [PB] ==================

- major improvements in printing/logging
    - started to remove print statements, and replace with logging instances
    - added a StreamHandler in addition to the file handler that will be used to handle printing to the screen
    - implemented pcp.set_log_level to allow the user to control the verbosity of print statements
    - began going through code to replace print statements (not all done yet!!) + adding useful debug statements

- preliminary scripting capabilities
    - scripts are designed to handle all high level functionality, that will ideally be the only interface
    required to run the system
    - all high level functionality should be handled using scripts, and not by adding to the core functions
    - all script files should contain a main() function, which contains the actual script to run
    - example provided: pcp.scripts.initialise_roaches()
        - script to initialise pcp, initialise the hardware and return a list of objects, one for each connected
        roachid. This list will then be used as an input to all other scripts.
    - in addition, this simplifies any interface with the envisioned TCS command server

- automatically add last taken sweep to current stream dirfile

TODO priorities
- implement checks and logic to run with single synth systems.
- test system with lots of roaches
- find bugs
- tone power handling and optimisation
    - optimisation will require a script
- attenuator hardware objects
    - linking input/output attenuators
- clean up dirfile routines

2019-01-16 15:30 CST [PB] ==================

- set_phases function fixed minor syntax bugs
- need set amps function (hacked for now)

- Testing the roach configuration, and comparing with kidpy
- using roach0 run through set up start to finish, and ensure that tones are being written
 - the kidpy reference tone list uses 101 frequencies between min_neg_freq and max_pos_freq (read from the configuration file )
todo
 - allow tonelist to write baseband frequencies only (can hack it as is, but should make it work properly with rf_freqs...etc)

2019-01-09 15:30 CST [PB] ==================
- Based on the muscat readout meeting, made the following changes to the tonelist.Tonelist
    - included max_pos_freq and min_neg_freq to calculate usable bandwidth baseband
    - include list of "excluded" frequencies that the LO shouldn't be set to (for PLL generated sources)
    - useful roach_interface functions - get current qdr, get regsiter names...etc

- check mapping of tonelist to dirfile generation
- modified functions in lib_dirfiles to replace 'ntones' with 'tones', which can accept either a number, or
a list of tone names
    - changed generate_sweep_dirfile, generate_sweep_fragment, generate_sweep_fields, generate_main_rawfields, create_dirfile

    [CONFIG FILE CHANGE] roach_config - replaced "tones" with "max_ntones" in packet structure
- TODO
    - in mux_channel.py, in the sweep averaging code, there is a check to see if the field name starts with "K" - this is not ideal
    and will cause problems - needs to be changed. How to only choose tones? maybe something in the format file?
        - using an 'onres' namespace for tones might be the easiest way to do this
    - fix defaults for datalog_mp.py - set_active_dirfile function
    - remove ntones from packet_structure (as it could be different for different roaches)

2019-01-07 15:30 CST [PB] ==================

- Added some convenience definitions for filesys paths in configuration/__init__.py. Now checks for absolute path in filesys_config before joining to rootdir.
    - added new firmwarefiledir value as a path to a directory to store firmware files
    - upon initialisation, it checks that at least 1 .fpg exists. Raises error otherwise.
    -

- [CONFIG FILE CHANGE] added tonelist entry to roach_config with key "tonelist_file". This can be an empty
- [CONFIG FILE CHANGE] added dac_bandwidth key to roach_config (used by tonelist).

- added custom yaml resolver to parse floats of format 1e6 correctly (borrowed from SO)
- changed entry for accumulator length to now be the number of bits required.
    old: "roach_accum_len: 2**21 - 1"
    new: "roach_accum_len: 21  # 2**roach_accum_len - 1"

- modified lib_dirfiles to remove eval statements for parsing the pygetdata constants. Added two mappings
_GDDATAMAP and _GDENTRYMAP to perform the translation. It should be backward compatible.

- Added new functionality to tonelist class.
    - allows the user to pass a "loader function" that can be used to load in custom tone list files
    - implemented "optimum" lo placement for a given a tonelist.
    - kept degree of user customisation - i.e. the user can set the lo to anthing, and bb_freqs will automatically
    be updated
    - simple plotting routine to check tonelist
    - check to see if bb_freqs are outside the bandwidth, and clips the bb_freq list appropriately.

2018-12-27 17:30 [PB] ==================

- Included a roachInterface object in lib_fpga to handle all of the interactions with the ppc and fpga.
The code is similar to the kidPy implementation, with a couple of small tweaks.
    - tidied up upload_fpg function to now check if a running firmware is identical to the one being uploaded
    - sensible renaming of functions (freqComb --> gen_waveform_from_freqs)
    - simplified functionality of gen_waveform_from_freqs (prev freqComb in kidpy). It now doesn't include the
    option to account for a transfer function. This should all be handled in the object ToneList.
    - implemented code to write tones (same workflow as kidPy). Code has been checked with hardware and runs
without errors. Need now to confirm that the results remain consistent with kidPy.

- Renamed roach_interface.py --> mux_channel.py and roachInterface class --> muxChannel so as not to confuse
the roachInterface now defined in lib/lib_fpga.

- Modified muxChannel to use the new roachInterface object.

- [CONFIG FILE CHANGE] Added a firmware_file parameter to each roach entry with key:

- Fixed the AttributeError when muxChannel.shutdown() was called when a dirfile wasn't yet set

commit 2d4a259596e2c836f65e70b77174b004c8551a44 ==================
Author: sr-cdf <rowes@cardiff.ac.uk>
Date:   Thu Dec 13 15:45:48 2018 +0000

    finished synth devices and sources for independent control of single/multi port synths.

    Using Thomas's updated windfreaksynth_v2 we now have separate classes for synthesiser hardware devices and synthesiser sources for muscat.
    The lib_hardware.intiialise_connected_synths function returns a dict of the synth *sources* relating to the devices and their channels as
    named in the hardware_config.cfg and roach_config.cfg files, and no manual source switching is required. This did require adding synth devices
    and synth sources for all synths in the synthclasses submodule, including the dummy synth but should be fully backwards compatible with rest
    of the PCP code.


2018-12-11 14:14 [SR] ==================

Synth stuff:
- Set up synth instantiation based on physical devices (dummy synth is still physical)
- Multi-source synths now share a common instance
- Windfreak set up to use CLK on channel0 and LO on channel1 (muscat requirement)
- RoachInterface now sets the CLK source to 512 Mhz before loading any firmware

FPGA stuff:
- RoachInterface uploads firmware if the currently running firmware does not match.
- RoachInterface performs QDR calibration only when uploading firmware
- QDR calibration actually runs now.
- libFPGA.configure_downlink_registers now converts ip_addr strings to integers


2018-12-07 13:30 [PB] ==================

- Added this file.


2018-12-07 12:30 [PB] ==================

- Removed device_id field in the network_config file, that is what the field names (i.e. network_config.keys()) are for…
	- if there is a good reason to keep it, let me know and i’ll add it back in (edited)

- Added a maxchannels field for each roach to the roach_config file to retain flexibility
	- Modified the configuration verification accordingly
